[build-system]
requires = ["poetry-core>=1.4.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "flwr"
version = "1.6.0"
description = "Flower: A Friendly Federated Learning Framework"
license = "Apache-2.0"
authors = ["The Flower Authors <hello@flower.dev>"]
readme = "README.md"
homepage = "https://flower.dev"
repository = "https://github.com/adap/flower"
documentation = "https://flower.dev"
keywords = [
    "flower",
    "fl",
    "federated learning",
    "federated analytics",
    "federated evaluation",
    "machine learning",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
packages = [
    { include = "flwr", from = "src/py" },
]
exclude = [
    "src/py/**/*_test.py",
]

[tool.poetry.scripts]
flower-driver-api = "flwr.server:run_driver_api"
flower-fleet-api = "flwr.server:run_fleet_api"
flower-server = "flwr.server:run_server"
flower-client = "flwr.client:run_client"

[tool.poetry.dependencies]
python = "^3.8"
# Mandatory dependencies
numpy = "^1.21.0"
grpcio = "^1.48.2,!=1.52.0"
protobuf = "^3.19.0"
cryptography = "^41.0.2"
pycryptodome = "^3.18.0"
iterators = "^0.0.2"
# Optional dependencies (VCE)
ray = { version = "==2.6.3", optional = true }
pydantic = { version = "<2.0.0", optional = true }
# Optional dependencies (REST transport layer)
requests = { version = "^2.31.0", optional = true }
starlette = { version = "^0.31.0", optional = true }
uvicorn = { version = "^0.23.0", extras = ["standard"], optional = true }

[tool.poetry.extras]
simulation = ["ray", "pydantic"]
rest = ["requests", "starlette", "uvicorn"]

[tool.poetry.group.dev.dependencies]
types-dataclasses = "==0.6.6"
types-protobuf = "==3.19.18"
types-requests = "==2.31.0.2"
types-setuptools = "==68.2.0.0"
clang-format = "==17.0.4"
isort = "==5.12.0"
black = { version = "==23.10.1", extras = ["jupyter"] }
docformatter = "==1.7.5"
mypy = "==1.6.1"
pylint = "==2.13.9"
flake8 = "==5.0.4"
pytest = "==7.4.3"
pytest-cov = "==4.1.0"
pytest-watch = "==4.2.0"
grpcio-tools = "==1.48.2"
mypy-protobuf = "==3.2.0"
jupyterlab = "==4.0.8"
rope = "==1.11.0"
semver = "==3.0.2"
sphinx = "==6.2.1"
sphinx-intl = "==2.1.0"
myst-parser = "==1.0.0"
sphinx-design = "==0.5.0"
sphinx-copybutton = "==0.5.2"
sphinxcontrib-mermaid = "==0.9.2"
sphinxcontrib-youtube = "==1.4.1"
furo = "==2023.9.10"
sphinx-reredirects = "==0.1.3"
nbsphinx = "==0.9.3"
nbstripout = "==0.6.1"
ruff = "==0.1.4"
sphinx-argparse = "==0.4.0"
pipreqs = "==0.4.13"
mdformat-gfm = "==0.3.5"
mdformat-frontmatter = "==2.0.1"
mdformat-beautysh = "==0.1.1"
mdformat-myst = "==0.1.5"
twine = "==4.0.2"
pyroma = "==4.2"
check-wheel-contents = "==0.4.0"
GitPython = "==3.1.32"
licensecheck = "==2023.5.1"

[tool.isort]
line_length = 88
indent = "    "
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
known_first_party = ["flwr", "flwr_experimental", "flwr_tool"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]

[tool.pylint."MESSAGES CONTROL"]
disable = "bad-continuation,duplicate-code,too-few-public-methods,useless-import-alias"

[tool.pytest.ini_options]
minversion = "6.2"
addopts = "-qq"
testpaths = [
    "src/py/flwr",
    "src/py/flwr_tool",
]

[tool.mypy]
plugins = [
    "numpy.typing.mypy_plugin",
]
ignore_missing_imports = true
strict = true

[[tool.mypy.overrides]]
module = [
    "flwr_example.*",
    "flwr_experimental.*",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "importlib.metadata.*",
    "importlib_metadata.*",
]
follow_imports = "skip"
follow_imports_for_stubs = true
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = "torch.*"
follow_imports = "skip"
follow_imports_for_stubs = true

[tool.docformatter]
wrap-summaries = 88
wrap-descriptions = 88

[tool.ruff]
target-version = "py38"
line-length = 88
select = ["D", "E", "F", "W", "B", "ISC", "C4", "UP"]
fixable = ["D", "E", "F", "W", "B", "ISC", "C4", "UP"]
ignore = ["B024", "B027"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "proto",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"src/py/flwr/server/strategy/*.py" = ["E501"]
