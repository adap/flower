[build-system]
requires = ["poetry-core>=1.4.0"]
build-backend = "poetry.masonry.api"

[tool.poetry]
name = "dasha" # <----- Ensure it matches the name of your baseline directory containing all the source code
version = "1.0.0"
description = "DASHA: Distributed nonconvex optimization with communication compression and optimal oracle complexity"
license = "Apache-2.0"
authors = ["Alexander Tyurin <alexandertiurin@gmail.com>"]
readme = "README.md"
homepage = "https://flower.dev"
repository = "https://github.com/adap/flower"
documentation = "https://flower.dev"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = ">=3.10.0, <3.11.0"  # don't change this
flwr = { extras = ["simulation"], version = "1.5.0" }
hydra-core = "1.3.2" # don't change this
scikit-learn = "1.3.0"
matplotlib = "3.7.1"
# Installing Torch. TODO: Fix and install the relevant version of Torch based on the current system.
torch = [{ url = "https://download.pytorch.org/whl/cu118/torch-2.0.0%2Bcu118-cp310-cp310-linux_x86_64.whl", markers="sys_platform == 'linux'"},
         { url = "https://download.pytorch.org/whl/cpu/torch-2.0.0-cp39-none-macosx_11_0_arm64.whl", markers="sys_platform == 'darwin'"}]
torchvision = [{ url = "https://download.pytorch.org/whl/cu118/torchvision-0.15.0%2Bcu118-cp310-cp310-linux_x86_64.whl", markers="sys_platform == 'linux'"},
               { url = "https://download.pytorch.org/whl/cpu/torchvision-0.15.0-cp39-cp39-macosx_11_0_arm64.whl", markers="sys_platform == 'darwin'"}]

[tool.poetry.dev-dependencies]
isort = "==5.11.5"
black = "==23.1.0"
docformatter = "==1.5.1"
mypy = "==1.4.1"
pylint = "==2.8.2"
flake8 = "==3.9.2"
pytest = "==6.2.4"
pytest-watch = "==4.2.0"
types-requests = "==2.27.7"
py-spy = "==0.3.14"
ruff = "==0.0.272"

[tool.isort]
line_length = 88
indent = "    "
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]

[tool.pytest.ini_options]
minversion = "6.2"
addopts = "-qq"
testpaths = [
    "flwr_baselines",
]

[tool.mypy]
ignore_missing_imports = true
strict = false
plugins = "numpy.typing.mypy_plugin"

[tool.pylint."MESSAGES CONTROL"]
disable = "bad-continuation,duplicate-code,too-few-public-methods,useless-import-alias,no-self-use,too-many-locals,too-many-instance-attributes"
good-names = "i,j,k,_,x,y,X,Y"
signature-mutators="hydra.main.main"
generated-members="numpy.*, torch.*"

[[tool.mypy.overrides]]
module = [
    "importlib.metadata.*",
    "importlib_metadata.*",
]
follow_imports = "skip"
follow_imports_for_stubs = true
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = "torch.*"
follow_imports = "skip"
follow_imports_for_stubs = true

[tool.docformatter]
wrap-summaries = 88
wrap-descriptions = 88

[tool.ruff]
target-version = "py38"
line-length = 88
select = ["D", "E", "F", "W", "B", "ISC", "C4"]
fixable = ["D", "E", "F", "W", "B", "ISC", "C4"]
ignore = ["B024", "B027"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "proto",
]

[tool.ruff.pydocstyle]
convention = "numpy"
