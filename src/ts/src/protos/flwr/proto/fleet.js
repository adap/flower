"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fleet = exports.Reconnect = exports.PushTaskResResponse = exports.PushTaskResRequest = exports.PullTaskInsResponse = exports.PullTaskInsRequest = exports.PingResponse = exports.PingRequest = exports.DeleteNodeResponse = exports.DeleteNodeRequest = exports.CreateNodeResponse = exports.CreateNodeRequest = void 0;
// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/fleet.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2022 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
const fab_1 = require("./fab");
const fab_2 = require("./fab");
const run_1 = require("./run");
const run_2 = require("./run");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const task_1 = require("./task");
const task_2 = require("./task");
const node_1 = require("./node");
// @generated message type with reflection information, may provide speed optimized methods
class CreateNodeRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.CreateNodeRequest", [
            { no: 1, name: "ping_interval", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pingInterval = 0;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double ping_interval */ 1:
                    message.pingInterval = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* double ping_interval = 1; */
        if (message.pingInterval !== 0)
            writer.tag(1, runtime_1.WireType.Bit64).double(message.pingInterval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.CreateNodeRequest
 */
exports.CreateNodeRequest = new CreateNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateNodeResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.CreateNodeResponse", [
            { no: 1, name: "node", kind: "message", T: () => node_1.Node }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = node_1.Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            node_1.Node.internalBinaryWrite(message.node, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.CreateNodeResponse
 */
exports.CreateNodeResponse = new CreateNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNodeRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.DeleteNodeRequest", [
            { no: 1, name: "node", kind: "message", T: () => node_1.Node }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = node_1.Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            node_1.Node.internalBinaryWrite(message.node, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.DeleteNodeRequest
 */
exports.DeleteNodeRequest = new DeleteNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNodeResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.DeleteNodeResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.DeleteNodeResponse
 */
exports.DeleteNodeResponse = new DeleteNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.PingRequest", [
            { no: 1, name: "node", kind: "message", T: () => node_1.Node },
            { no: 2, name: "ping_interval", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pingInterval = 0;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = node_1.Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* double ping_interval */ 2:
                    message.pingInterval = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            node_1.Node.internalBinaryWrite(message.node, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* double ping_interval = 2; */
        if (message.pingInterval !== 0)
            writer.tag(2, runtime_1.WireType.Bit64).double(message.pingInterval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PingRequest
 */
exports.PingRequest = new PingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.PingResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.success = false;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PingResponse
 */
exports.PingResponse = new PingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullTaskInsRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.PullTaskInsRequest", [
            { no: 1, name: "node", kind: "message", T: () => node_1.Node },
            { no: 2, name: "task_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.taskIds = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = node_1.Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* repeated string task_ids */ 2:
                    message.taskIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            node_1.Node.internalBinaryWrite(message.node, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated string task_ids = 2; */
        for (let i = 0; i < message.taskIds.length; i++)
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.taskIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PullTaskInsRequest
 */
exports.PullTaskInsRequest = new PullTaskInsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullTaskInsResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.PullTaskInsResponse", [
            { no: 1, name: "reconnect", kind: "message", T: () => exports.Reconnect },
            { no: 2, name: "task_ins_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => task_2.TaskIns }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.taskInsList = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Reconnect reconnect */ 1:
                    message.reconnect = exports.Reconnect.internalBinaryRead(reader, reader.uint32(), options, message.reconnect);
                    break;
                case /* repeated flwr.proto.TaskIns task_ins_list */ 2:
                    message.taskInsList.push(task_2.TaskIns.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Reconnect reconnect = 1; */
        if (message.reconnect)
            exports.Reconnect.internalBinaryWrite(message.reconnect, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated flwr.proto.TaskIns task_ins_list = 2; */
        for (let i = 0; i < message.taskInsList.length; i++)
            task_2.TaskIns.internalBinaryWrite(message.taskInsList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PullTaskInsResponse
 */
exports.PullTaskInsResponse = new PullTaskInsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushTaskResRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.PushTaskResRequest", [
            { no: 1, name: "node", kind: "message", T: () => node_1.Node },
            { no: 2, name: "task_res_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => task_1.TaskRes }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.taskResList = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = node_1.Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* repeated flwr.proto.TaskRes task_res_list */ 2:
                    message.taskResList.push(task_1.TaskRes.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            node_1.Node.internalBinaryWrite(message.node, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated flwr.proto.TaskRes task_res_list = 2; */
        for (let i = 0; i < message.taskResList.length; i++)
            task_1.TaskRes.internalBinaryWrite(message.taskResList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PushTaskResRequest
 */
exports.PushTaskResRequest = new PushTaskResRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushTaskResResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.PushTaskResResponse", [
            { no: 1, name: "reconnect", kind: "message", T: () => exports.Reconnect },
            { no: 2, name: "results", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.results = {};
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Reconnect reconnect */ 1:
                    message.reconnect = exports.Reconnect.internalBinaryRead(reader, reader.uint32(), options, message.reconnect);
                    break;
                case /* map<string, uint32> results */ 2:
                    this.binaryReadMap2(message.results, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap2(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.PushTaskResResponse.results");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Reconnect reconnect = 1; */
        if (message.reconnect)
            exports.Reconnect.internalBinaryWrite(message.reconnect, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<string, uint32> results = 2; */
        for (let k of globalThis.Object.keys(message.results))
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k).tag(2, runtime_1.WireType.Varint).uint32(message.results[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PushTaskResResponse
 */
exports.PushTaskResResponse = new PushTaskResResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Reconnect$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.Reconnect", [
            { no: 1, name: "reconnect", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.reconnect = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 reconnect */ 1:
                    message.reconnect = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 reconnect = 1; */
        if (message.reconnect !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).uint64(message.reconnect);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.Reconnect
 */
exports.Reconnect = new Reconnect$Type();
/**
 * @generated ServiceType for protobuf service flwr.proto.Fleet
 */
exports.Fleet = new runtime_rpc_1.ServiceType("flwr.proto.Fleet", [
    { name: "CreateNode", options: {}, I: exports.CreateNodeRequest, O: exports.CreateNodeResponse },
    { name: "DeleteNode", options: {}, I: exports.DeleteNodeRequest, O: exports.DeleteNodeResponse },
    { name: "Ping", options: {}, I: exports.PingRequest, O: exports.PingResponse },
    { name: "PullTaskIns", options: {}, I: exports.PullTaskInsRequest, O: exports.PullTaskInsResponse },
    { name: "PushTaskRes", options: {}, I: exports.PushTaskResRequest, O: exports.PushTaskResResponse },
    { name: "GetRun", options: {}, I: run_2.GetRunRequest, O: run_1.GetRunResponse },
    { name: "GetFab", options: {}, I: fab_2.GetFabRequest, O: fab_1.GetFabResponse }
]);
