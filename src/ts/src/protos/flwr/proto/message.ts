// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/message.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Scalar } from "./transport";
import { Error } from "./error";
import { RecordSet } from "./recordset";
/**
 * @generated from protobuf message flwr.proto.Message
 */
export interface Message {
    /**
     * @generated from protobuf field: flwr.proto.Metadata metadata = 1;
     */
    metadata?: Metadata;
    /**
     * @generated from protobuf field: flwr.proto.RecordSet content = 2;
     */
    content?: RecordSet;
    /**
     * @generated from protobuf field: flwr.proto.Error error = 3;
     */
    error?: Error;
}
/**
 * @generated from protobuf message flwr.proto.Context
 */
export interface Context {
    /**
     * @generated from protobuf field: uint64 node_id = 1;
     */
    nodeId: bigint;
    /**
     * @generated from protobuf field: map<string, flwr.proto.Scalar> node_config = 2;
     */
    nodeConfig: {
        [key: string]: Scalar;
    };
    /**
     * @generated from protobuf field: flwr.proto.RecordSet state = 3;
     */
    state?: RecordSet;
    /**
     * @generated from protobuf field: map<string, flwr.proto.Scalar> run_config = 4;
     */
    runConfig: {
        [key: string]: Scalar;
    };
}
/**
 * @generated from protobuf message flwr.proto.Metadata
 */
export interface Metadata {
    /**
     * @generated from protobuf field: uint64 run_id = 1;
     */
    runId: bigint;
    /**
     * @generated from protobuf field: string message_id = 2;
     */
    messageId: string;
    /**
     * @generated from protobuf field: uint64 src_node_id = 3;
     */
    srcNodeId: bigint;
    /**
     * @generated from protobuf field: uint64 dst_node_id = 4;
     */
    dstNodeId: bigint;
    /**
     * @generated from protobuf field: string reply_to_message = 5;
     */
    replyToMessage: string;
    /**
     * @generated from protobuf field: string group_id = 6;
     */
    groupId: string;
    /**
     * @generated from protobuf field: double ttl = 7;
     */
    ttl: number;
    /**
     * @generated from protobuf field: string message_type = 8;
     */
    messageType: string;
    /**
     * @generated from protobuf field: double created_at = 9;
     */
    createdAt: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("flwr.proto.Message", [
            { no: 1, name: "metadata", kind: "message", T: () => Metadata },
            { no: 2, name: "content", kind: "message", T: () => RecordSet },
            { no: 3, name: "error", kind: "message", T: () => Error }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Metadata metadata */ 1:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* flwr.proto.RecordSet content */ 2:
                    message.content = RecordSet.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* flwr.proto.Error error */ 3:
                    message.error = Error.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Metadata metadata = 1; */
        if (message.metadata)
            Metadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.RecordSet content = 2; */
        if (message.content)
            RecordSet.internalBinaryWrite(message.content, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.Error error = 3; */
        if (message.error)
            Error.internalBinaryWrite(message.error, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Context$Type extends MessageType<Context> {
    constructor() {
        super("flwr.proto.Context", [
            { no: 1, name: "node_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "node_config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Scalar } },
            { no: 3, name: "state", kind: "message", T: () => RecordSet },
            { no: 4, name: "run_config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Scalar } }
        ]);
    }
    create(value?: PartialMessage<Context>): Context {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodeId = 0n;
        message.nodeConfig = {};
        message.runConfig = {};
        if (value !== undefined)
            reflectionMergePartial<Context>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Context): Context {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 node_id */ 1:
                    message.nodeId = reader.uint64().toBigInt();
                    break;
                case /* map<string, flwr.proto.Scalar> node_config */ 2:
                    this.binaryReadMap2(message.nodeConfig, reader, options);
                    break;
                case /* flwr.proto.RecordSet state */ 3:
                    message.state = RecordSet.internalBinaryRead(reader, reader.uint32(), options, message.state);
                    break;
                case /* map<string, flwr.proto.Scalar> run_config */ 4:
                    this.binaryReadMap4(message.runConfig, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: Context["nodeConfig"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Context["nodeConfig"] | undefined, val: Context["nodeConfig"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.Context.node_config");
            }
        }
        map[key ?? ""] = val ?? Scalar.create();
    }
    private binaryReadMap4(map: Context["runConfig"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Context["runConfig"] | undefined, val: Context["runConfig"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.Context.run_config");
            }
        }
        map[key ?? ""] = val ?? Scalar.create();
    }
    internalBinaryWrite(message: Context, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 node_id = 1; */
        if (message.nodeId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.nodeId);
        /* map<string, flwr.proto.Scalar> node_config = 2; */
        for (let k of globalThis.Object.keys(message.nodeConfig)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Scalar.internalBinaryWrite(message.nodeConfig[k], writer, options);
            writer.join().join();
        }
        /* flwr.proto.RecordSet state = 3; */
        if (message.state)
            RecordSet.internalBinaryWrite(message.state, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* map<string, flwr.proto.Scalar> run_config = 4; */
        for (let k of globalThis.Object.keys(message.runConfig)) {
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Scalar.internalBinaryWrite(message.runConfig[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.Context
 */
export const Context = new Context$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Metadata$Type extends MessageType<Metadata> {
    constructor() {
        super("flwr.proto.Metadata", [
            { no: 1, name: "run_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "src_node_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "dst_node_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "reply_to_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "group_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "ttl", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "message_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "created_at", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Metadata>): Metadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.runId = 0n;
        message.messageId = "";
        message.srcNodeId = 0n;
        message.dstNodeId = 0n;
        message.replyToMessage = "";
        message.groupId = "";
        message.ttl = 0;
        message.messageType = "";
        message.createdAt = 0;
        if (value !== undefined)
            reflectionMergePartial<Metadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metadata): Metadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 run_id */ 1:
                    message.runId = reader.uint64().toBigInt();
                    break;
                case /* string message_id */ 2:
                    message.messageId = reader.string();
                    break;
                case /* uint64 src_node_id */ 3:
                    message.srcNodeId = reader.uint64().toBigInt();
                    break;
                case /* uint64 dst_node_id */ 4:
                    message.dstNodeId = reader.uint64().toBigInt();
                    break;
                case /* string reply_to_message */ 5:
                    message.replyToMessage = reader.string();
                    break;
                case /* string group_id */ 6:
                    message.groupId = reader.string();
                    break;
                case /* double ttl */ 7:
                    message.ttl = reader.double();
                    break;
                case /* string message_type */ 8:
                    message.messageType = reader.string();
                    break;
                case /* double created_at */ 9:
                    message.createdAt = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Metadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 run_id = 1; */
        if (message.runId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.runId);
        /* string message_id = 2; */
        if (message.messageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.messageId);
        /* uint64 src_node_id = 3; */
        if (message.srcNodeId !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.srcNodeId);
        /* uint64 dst_node_id = 4; */
        if (message.dstNodeId !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.dstNodeId);
        /* string reply_to_message = 5; */
        if (message.replyToMessage !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.replyToMessage);
        /* string group_id = 6; */
        if (message.groupId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.groupId);
        /* double ttl = 7; */
        if (message.ttl !== 0)
            writer.tag(7, WireType.Bit64).double(message.ttl);
        /* string message_type = 8; */
        if (message.messageType !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.messageType);
        /* double created_at = 9; */
        if (message.createdAt !== 0)
            writer.tag(9, WireType.Bit64).double(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.Metadata
 */
export const Metadata = new Metadata$Type();
