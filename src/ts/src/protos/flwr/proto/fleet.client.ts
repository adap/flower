// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/fleet.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2022 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Fleet } from "./fleet";
import type { GetFabResponse } from "./fab";
import type { GetFabRequest } from "./fab";
import type { GetRunResponse } from "./run";
import type { GetRunRequest } from "./run";
import type { PushTaskResResponse } from "./fleet";
import type { PushTaskResRequest } from "./fleet";
import type { PullTaskInsResponse } from "./fleet";
import type { PullTaskInsRequest } from "./fleet";
import type { PingResponse } from "./fleet";
import type { PingRequest } from "./fleet";
import type { DeleteNodeResponse } from "./fleet";
import type { DeleteNodeRequest } from "./fleet";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateNodeResponse } from "./fleet";
import type { CreateNodeRequest } from "./fleet";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service flwr.proto.Fleet
 */
export interface IFleetClient {
    /**
     * @generated from protobuf rpc: CreateNode(flwr.proto.CreateNodeRequest) returns (flwr.proto.CreateNodeResponse);
     */
    createNode(input: CreateNodeRequest, options?: RpcOptions): UnaryCall<CreateNodeRequest, CreateNodeResponse>;
    /**
     * @generated from protobuf rpc: DeleteNode(flwr.proto.DeleteNodeRequest) returns (flwr.proto.DeleteNodeResponse);
     */
    deleteNode(input: DeleteNodeRequest, options?: RpcOptions): UnaryCall<DeleteNodeRequest, DeleteNodeResponse>;
    /**
     * @generated from protobuf rpc: Ping(flwr.proto.PingRequest) returns (flwr.proto.PingResponse);
     */
    ping(input: PingRequest, options?: RpcOptions): UnaryCall<PingRequest, PingResponse>;
    /**
     * Retrieve one or more tasks, if possible
     *
     * HTTP API path: /api/v1/fleet/pull-task-ins
     *
     * @generated from protobuf rpc: PullTaskIns(flwr.proto.PullTaskInsRequest) returns (flwr.proto.PullTaskInsResponse);
     */
    pullTaskIns(input: PullTaskInsRequest, options?: RpcOptions): UnaryCall<PullTaskInsRequest, PullTaskInsResponse>;
    /**
     * Complete one or more tasks, if possible
     *
     * HTTP API path: /api/v1/fleet/push-task-res
     *
     * @generated from protobuf rpc: PushTaskRes(flwr.proto.PushTaskResRequest) returns (flwr.proto.PushTaskResResponse);
     */
    pushTaskRes(input: PushTaskResRequest, options?: RpcOptions): UnaryCall<PushTaskResRequest, PushTaskResResponse>;
    /**
     * @generated from protobuf rpc: GetRun(flwr.proto.GetRunRequest) returns (flwr.proto.GetRunResponse);
     */
    getRun(input: GetRunRequest, options?: RpcOptions): UnaryCall<GetRunRequest, GetRunResponse>;
    /**
     * Get FAB
     *
     * @generated from protobuf rpc: GetFab(flwr.proto.GetFabRequest) returns (flwr.proto.GetFabResponse);
     */
    getFab(input: GetFabRequest, options?: RpcOptions): UnaryCall<GetFabRequest, GetFabResponse>;
}
/**
 * @generated from protobuf service flwr.proto.Fleet
 */
export class FleetClient implements IFleetClient, ServiceInfo {
    typeName = Fleet.typeName;
    methods = Fleet.methods;
    options = Fleet.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateNode(flwr.proto.CreateNodeRequest) returns (flwr.proto.CreateNodeResponse);
     */
    createNode(input: CreateNodeRequest, options?: RpcOptions): UnaryCall<CreateNodeRequest, CreateNodeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateNodeRequest, CreateNodeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteNode(flwr.proto.DeleteNodeRequest) returns (flwr.proto.DeleteNodeResponse);
     */
    deleteNode(input: DeleteNodeRequest, options?: RpcOptions): UnaryCall<DeleteNodeRequest, DeleteNodeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteNodeRequest, DeleteNodeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Ping(flwr.proto.PingRequest) returns (flwr.proto.PingResponse);
     */
    ping(input: PingRequest, options?: RpcOptions): UnaryCall<PingRequest, PingResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PingRequest, PingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieve one or more tasks, if possible
     *
     * HTTP API path: /api/v1/fleet/pull-task-ins
     *
     * @generated from protobuf rpc: PullTaskIns(flwr.proto.PullTaskInsRequest) returns (flwr.proto.PullTaskInsResponse);
     */
    pullTaskIns(input: PullTaskInsRequest, options?: RpcOptions): UnaryCall<PullTaskInsRequest, PullTaskInsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<PullTaskInsRequest, PullTaskInsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Complete one or more tasks, if possible
     *
     * HTTP API path: /api/v1/fleet/push-task-res
     *
     * @generated from protobuf rpc: PushTaskRes(flwr.proto.PushTaskResRequest) returns (flwr.proto.PushTaskResResponse);
     */
    pushTaskRes(input: PushTaskResRequest, options?: RpcOptions): UnaryCall<PushTaskResRequest, PushTaskResResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<PushTaskResRequest, PushTaskResResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRun(flwr.proto.GetRunRequest) returns (flwr.proto.GetRunResponse);
     */
    getRun(input: GetRunRequest, options?: RpcOptions): UnaryCall<GetRunRequest, GetRunResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRunRequest, GetRunResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get FAB
     *
     * @generated from protobuf rpc: GetFab(flwr.proto.GetFabRequest) returns (flwr.proto.GetFabResponse);
     */
    getFab(input: GetFabRequest, options?: RpcOptions): UnaryCall<GetFabRequest, GetFabResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFabRequest, GetFabResponse>("unary", this._transport, method, opt, input);
    }
}
