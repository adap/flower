// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/driver.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2022 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Driver } from "./driver";
import type { GetFabResponse } from "./fab";
import type { GetFabRequest } from "./fab";
import type { GetRunResponse } from "./run";
import type { GetRunRequest } from "./run";
import type { PullTaskResResponse } from "./driver";
import type { PullTaskResRequest } from "./driver";
import type { PushTaskInsResponse } from "./driver";
import type { PushTaskInsRequest } from "./driver";
import type { GetNodesResponse } from "./driver";
import type { GetNodesRequest } from "./driver";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateRunResponse } from "./run";
import type { CreateRunRequest } from "./run";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service flwr.proto.Driver
 */
export interface IDriverClient {
    /**
     * Request run_id
     *
     * @generated from protobuf rpc: CreateRun(flwr.proto.CreateRunRequest) returns (flwr.proto.CreateRunResponse);
     */
    createRun(input: CreateRunRequest, options?: RpcOptions): UnaryCall<CreateRunRequest, CreateRunResponse>;
    /**
     * Return a set of nodes
     *
     * @generated from protobuf rpc: GetNodes(flwr.proto.GetNodesRequest) returns (flwr.proto.GetNodesResponse);
     */
    getNodes(input: GetNodesRequest, options?: RpcOptions): UnaryCall<GetNodesRequest, GetNodesResponse>;
    /**
     * Create one or more tasks
     *
     * @generated from protobuf rpc: PushTaskIns(flwr.proto.PushTaskInsRequest) returns (flwr.proto.PushTaskInsResponse);
     */
    pushTaskIns(input: PushTaskInsRequest, options?: RpcOptions): UnaryCall<PushTaskInsRequest, PushTaskInsResponse>;
    /**
     * Get task results
     *
     * @generated from protobuf rpc: PullTaskRes(flwr.proto.PullTaskResRequest) returns (flwr.proto.PullTaskResResponse);
     */
    pullTaskRes(input: PullTaskResRequest, options?: RpcOptions): UnaryCall<PullTaskResRequest, PullTaskResResponse>;
    /**
     * Get run details
     *
     * @generated from protobuf rpc: GetRun(flwr.proto.GetRunRequest) returns (flwr.proto.GetRunResponse);
     */
    getRun(input: GetRunRequest, options?: RpcOptions): UnaryCall<GetRunRequest, GetRunResponse>;
    /**
     * Get FAB
     *
     * @generated from protobuf rpc: GetFab(flwr.proto.GetFabRequest) returns (flwr.proto.GetFabResponse);
     */
    getFab(input: GetFabRequest, options?: RpcOptions): UnaryCall<GetFabRequest, GetFabResponse>;
}
/**
 * @generated from protobuf service flwr.proto.Driver
 */
export class DriverClient implements IDriverClient, ServiceInfo {
    typeName = Driver.typeName;
    methods = Driver.methods;
    options = Driver.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Request run_id
     *
     * @generated from protobuf rpc: CreateRun(flwr.proto.CreateRunRequest) returns (flwr.proto.CreateRunResponse);
     */
    createRun(input: CreateRunRequest, options?: RpcOptions): UnaryCall<CreateRunRequest, CreateRunResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRunRequest, CreateRunResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Return a set of nodes
     *
     * @generated from protobuf rpc: GetNodes(flwr.proto.GetNodesRequest) returns (flwr.proto.GetNodesResponse);
     */
    getNodes(input: GetNodesRequest, options?: RpcOptions): UnaryCall<GetNodesRequest, GetNodesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNodesRequest, GetNodesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Create one or more tasks
     *
     * @generated from protobuf rpc: PushTaskIns(flwr.proto.PushTaskInsRequest) returns (flwr.proto.PushTaskInsResponse);
     */
    pushTaskIns(input: PushTaskInsRequest, options?: RpcOptions): UnaryCall<PushTaskInsRequest, PushTaskInsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PushTaskInsRequest, PushTaskInsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get task results
     *
     * @generated from protobuf rpc: PullTaskRes(flwr.proto.PullTaskResRequest) returns (flwr.proto.PullTaskResResponse);
     */
    pullTaskRes(input: PullTaskResRequest, options?: RpcOptions): UnaryCall<PullTaskResRequest, PullTaskResResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<PullTaskResRequest, PullTaskResResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get run details
     *
     * @generated from protobuf rpc: GetRun(flwr.proto.GetRunRequest) returns (flwr.proto.GetRunResponse);
     */
    getRun(input: GetRunRequest, options?: RpcOptions): UnaryCall<GetRunRequest, GetRunResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRunRequest, GetRunResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get FAB
     *
     * @generated from protobuf rpc: GetFab(flwr.proto.GetFabRequest) returns (flwr.proto.GetFabResponse);
     */
    getFab(input: GetFabRequest, options?: RpcOptions): UnaryCall<GetFabRequest, GetFabResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFabRequest, GetFabResponse>("unary", this._transport, method, opt, input);
    }
}
