// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/exec.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Exec } from "./exec";
import type { StreamLogsResponse } from "./exec";
import type { StreamLogsRequest } from "./exec";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StartRunResponse } from "./exec";
import type { StartRunRequest } from "./exec";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service flwr.proto.Exec
 */
export interface IExecClient {
    /**
     * Start run upon request
     *
     * @generated from protobuf rpc: StartRun(flwr.proto.StartRunRequest) returns (flwr.proto.StartRunResponse);
     */
    startRun(input: StartRunRequest, options?: RpcOptions): UnaryCall<StartRunRequest, StartRunResponse>;
    /**
     * Start log stream upon request
     *
     * @generated from protobuf rpc: StreamLogs(flwr.proto.StreamLogsRequest) returns (stream flwr.proto.StreamLogsResponse);
     */
    streamLogs(input: StreamLogsRequest, options?: RpcOptions): ServerStreamingCall<StreamLogsRequest, StreamLogsResponse>;
}
/**
 * @generated from protobuf service flwr.proto.Exec
 */
export class ExecClient implements IExecClient, ServiceInfo {
    typeName = Exec.typeName;
    methods = Exec.methods;
    options = Exec.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Start run upon request
     *
     * @generated from protobuf rpc: StartRun(flwr.proto.StartRunRequest) returns (flwr.proto.StartRunResponse);
     */
    startRun(input: StartRunRequest, options?: RpcOptions): UnaryCall<StartRunRequest, StartRunResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartRunRequest, StartRunResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Start log stream upon request
     *
     * @generated from protobuf rpc: StreamLogs(flwr.proto.StreamLogsRequest) returns (stream flwr.proto.StreamLogsResponse);
     */
    streamLogs(input: StreamLogsRequest, options?: RpcOptions): ServerStreamingCall<StreamLogsRequest, StreamLogsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamLogsRequest, StreamLogsResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
