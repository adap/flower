"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowerService = exports.Scalar = exports.ClientMessage_EvaluateRes = exports.ClientMessage_FitRes = exports.ClientMessage_GetParametersRes = exports.ClientMessage_GetPropertiesRes = exports.ClientMessage_DisconnectRes = exports.ClientMessage = exports.ServerMessage_EvaluateIns = exports.ServerMessage_FitIns = exports.ServerMessage_GetParametersIns = exports.ServerMessage_GetPropertiesIns = exports.ServerMessage_ReconnectIns = exports.ServerMessage = exports.Parameters = exports.Status = exports.Reason = exports.Code = void 0;
// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/transport.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2020 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * @generated from protobuf enum flwr.proto.Code
 */
var Code;
(function (Code) {
    /**
     * @generated from protobuf enum value: OK = 0;
     */
    Code[Code["OK"] = 0] = "OK";
    /**
     * @generated from protobuf enum value: GET_PROPERTIES_NOT_IMPLEMENTED = 1;
     */
    Code[Code["GET_PROPERTIES_NOT_IMPLEMENTED"] = 1] = "GET_PROPERTIES_NOT_IMPLEMENTED";
    /**
     * @generated from protobuf enum value: GET_PARAMETERS_NOT_IMPLEMENTED = 2;
     */
    Code[Code["GET_PARAMETERS_NOT_IMPLEMENTED"] = 2] = "GET_PARAMETERS_NOT_IMPLEMENTED";
    /**
     * @generated from protobuf enum value: FIT_NOT_IMPLEMENTED = 3;
     */
    Code[Code["FIT_NOT_IMPLEMENTED"] = 3] = "FIT_NOT_IMPLEMENTED";
    /**
     * @generated from protobuf enum value: EVALUATE_NOT_IMPLEMENTED = 4;
     */
    Code[Code["EVALUATE_NOT_IMPLEMENTED"] = 4] = "EVALUATE_NOT_IMPLEMENTED";
})(Code || (exports.Code = Code = {}));
/**
 * @generated from protobuf enum flwr.proto.Reason
 */
var Reason;
(function (Reason) {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    Reason[Reason["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * @generated from protobuf enum value: RECONNECT = 1;
     */
    Reason[Reason["RECONNECT"] = 1] = "RECONNECT";
    /**
     * @generated from protobuf enum value: POWER_DISCONNECTED = 2;
     */
    Reason[Reason["POWER_DISCONNECTED"] = 2] = "POWER_DISCONNECTED";
    /**
     * @generated from protobuf enum value: WIFI_UNAVAILABLE = 3;
     */
    Reason[Reason["WIFI_UNAVAILABLE"] = 3] = "WIFI_UNAVAILABLE";
    /**
     * @generated from protobuf enum value: ACK = 4;
     */
    Reason[Reason["ACK"] = 4] = "ACK";
})(Reason || (exports.Reason = Reason = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Status$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.Status", [
            { no: 1, name: "code", kind: "enum", T: () => ["flwr.proto.Code", Code] },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.code = 0;
        message.message = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Code code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Code code = 1; */
        if (message.code !== 0)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.Status
 */
exports.Status = new Status$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Parameters$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.Parameters", [
            { no: 1, name: "tensors", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "tensor_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tensors = [];
        message.tensorType = "";
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes tensors */ 1:
                    message.tensors.push(reader.bytes());
                    break;
                case /* string tensor_type */ 2:
                    message.tensorType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bytes tensors = 1; */
        for (let i = 0; i < message.tensors.length; i++)
            writer.tag(1, runtime_1.WireType.LengthDelimited).bytes(message.tensors[i]);
        /* string tensor_type = 2; */
        if (message.tensorType !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.tensorType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.Parameters
 */
exports.Parameters = new Parameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerMessage$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ServerMessage", [
            { no: 1, name: "reconnect_ins", kind: "message", oneof: "msg", T: () => exports.ServerMessage_ReconnectIns },
            { no: 2, name: "get_properties_ins", kind: "message", oneof: "msg", T: () => exports.ServerMessage_GetPropertiesIns },
            { no: 3, name: "get_parameters_ins", kind: "message", oneof: "msg", T: () => exports.ServerMessage_GetParametersIns },
            { no: 4, name: "fit_ins", kind: "message", oneof: "msg", T: () => exports.ServerMessage_FitIns },
            { no: 5, name: "evaluate_ins", kind: "message", oneof: "msg", T: () => exports.ServerMessage_EvaluateIns }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.msg = { oneofKind: undefined };
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.ServerMessage.ReconnectIns reconnect_ins */ 1:
                    message.msg = {
                        oneofKind: "reconnectIns",
                        reconnectIns: exports.ServerMessage_ReconnectIns.internalBinaryRead(reader, reader.uint32(), options, message.msg.reconnectIns)
                    };
                    break;
                case /* flwr.proto.ServerMessage.GetPropertiesIns get_properties_ins */ 2:
                    message.msg = {
                        oneofKind: "getPropertiesIns",
                        getPropertiesIns: exports.ServerMessage_GetPropertiesIns.internalBinaryRead(reader, reader.uint32(), options, message.msg.getPropertiesIns)
                    };
                    break;
                case /* flwr.proto.ServerMessage.GetParametersIns get_parameters_ins */ 3:
                    message.msg = {
                        oneofKind: "getParametersIns",
                        getParametersIns: exports.ServerMessage_GetParametersIns.internalBinaryRead(reader, reader.uint32(), options, message.msg.getParametersIns)
                    };
                    break;
                case /* flwr.proto.ServerMessage.FitIns fit_ins */ 4:
                    message.msg = {
                        oneofKind: "fitIns",
                        fitIns: exports.ServerMessage_FitIns.internalBinaryRead(reader, reader.uint32(), options, message.msg.fitIns)
                    };
                    break;
                case /* flwr.proto.ServerMessage.EvaluateIns evaluate_ins */ 5:
                    message.msg = {
                        oneofKind: "evaluateIns",
                        evaluateIns: exports.ServerMessage_EvaluateIns.internalBinaryRead(reader, reader.uint32(), options, message.msg.evaluateIns)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.ServerMessage.ReconnectIns reconnect_ins = 1; */
        if (message.msg.oneofKind === "reconnectIns")
            exports.ServerMessage_ReconnectIns.internalBinaryWrite(message.msg.reconnectIns, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.ServerMessage.GetPropertiesIns get_properties_ins = 2; */
        if (message.msg.oneofKind === "getPropertiesIns")
            exports.ServerMessage_GetPropertiesIns.internalBinaryWrite(message.msg.getPropertiesIns, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.ServerMessage.GetParametersIns get_parameters_ins = 3; */
        if (message.msg.oneofKind === "getParametersIns")
            exports.ServerMessage_GetParametersIns.internalBinaryWrite(message.msg.getParametersIns, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.ServerMessage.FitIns fit_ins = 4; */
        if (message.msg.oneofKind === "fitIns")
            exports.ServerMessage_FitIns.internalBinaryWrite(message.msg.fitIns, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.ServerMessage.EvaluateIns evaluate_ins = 5; */
        if (message.msg.oneofKind === "evaluateIns")
            exports.ServerMessage_EvaluateIns.internalBinaryWrite(message.msg.evaluateIns, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ServerMessage
 */
exports.ServerMessage = new ServerMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerMessage_ReconnectIns$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ServerMessage.ReconnectIns", [
            { no: 1, name: "seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.seconds = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 seconds */ 1:
                    message.seconds = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 seconds = 1; */
        if (message.seconds !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.seconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ServerMessage.ReconnectIns
 */
exports.ServerMessage_ReconnectIns = new ServerMessage_ReconnectIns$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerMessage_GetPropertiesIns$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ServerMessage.GetPropertiesIns", [
            { no: 1, name: "config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => exports.Scalar } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.config = {};
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, flwr.proto.Scalar> config */ 1:
                    this.binaryReadMap1(message.config, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = exports.Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.ServerMessage.GetPropertiesIns.config");
            }
        }
        map[key ?? ""] = val ?? exports.Scalar.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<string, flwr.proto.Scalar> config = 1; */
        for (let k of globalThis.Object.keys(message.config)) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k);
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.Scalar.internalBinaryWrite(message.config[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ServerMessage.GetPropertiesIns
 */
exports.ServerMessage_GetPropertiesIns = new ServerMessage_GetPropertiesIns$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerMessage_GetParametersIns$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ServerMessage.GetParametersIns", [
            { no: 1, name: "config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => exports.Scalar } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.config = {};
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, flwr.proto.Scalar> config */ 1:
                    this.binaryReadMap1(message.config, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = exports.Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.ServerMessage.GetParametersIns.config");
            }
        }
        map[key ?? ""] = val ?? exports.Scalar.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<string, flwr.proto.Scalar> config = 1; */
        for (let k of globalThis.Object.keys(message.config)) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k);
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.Scalar.internalBinaryWrite(message.config[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ServerMessage.GetParametersIns
 */
exports.ServerMessage_GetParametersIns = new ServerMessage_GetParametersIns$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerMessage_FitIns$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ServerMessage.FitIns", [
            { no: 1, name: "parameters", kind: "message", T: () => exports.Parameters },
            { no: 2, name: "config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => exports.Scalar } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.config = {};
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Parameters parameters */ 1:
                    message.parameters = exports.Parameters.internalBinaryRead(reader, reader.uint32(), options, message.parameters);
                    break;
                case /* map<string, flwr.proto.Scalar> config */ 2:
                    this.binaryReadMap2(message.config, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap2(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = exports.Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.ServerMessage.FitIns.config");
            }
        }
        map[key ?? ""] = val ?? exports.Scalar.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Parameters parameters = 1; */
        if (message.parameters)
            exports.Parameters.internalBinaryWrite(message.parameters, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<string, flwr.proto.Scalar> config = 2; */
        for (let k of globalThis.Object.keys(message.config)) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k);
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.Scalar.internalBinaryWrite(message.config[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ServerMessage.FitIns
 */
exports.ServerMessage_FitIns = new ServerMessage_FitIns$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerMessage_EvaluateIns$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ServerMessage.EvaluateIns", [
            { no: 1, name: "parameters", kind: "message", T: () => exports.Parameters },
            { no: 2, name: "config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => exports.Scalar } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.config = {};
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Parameters parameters */ 1:
                    message.parameters = exports.Parameters.internalBinaryRead(reader, reader.uint32(), options, message.parameters);
                    break;
                case /* map<string, flwr.proto.Scalar> config */ 2:
                    this.binaryReadMap2(message.config, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap2(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = exports.Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.ServerMessage.EvaluateIns.config");
            }
        }
        map[key ?? ""] = val ?? exports.Scalar.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Parameters parameters = 1; */
        if (message.parameters)
            exports.Parameters.internalBinaryWrite(message.parameters, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<string, flwr.proto.Scalar> config = 2; */
        for (let k of globalThis.Object.keys(message.config)) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k);
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.Scalar.internalBinaryWrite(message.config[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ServerMessage.EvaluateIns
 */
exports.ServerMessage_EvaluateIns = new ServerMessage_EvaluateIns$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientMessage$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ClientMessage", [
            { no: 1, name: "disconnect_res", kind: "message", oneof: "msg", T: () => exports.ClientMessage_DisconnectRes },
            { no: 2, name: "get_properties_res", kind: "message", oneof: "msg", T: () => exports.ClientMessage_GetPropertiesRes },
            { no: 3, name: "get_parameters_res", kind: "message", oneof: "msg", T: () => exports.ClientMessage_GetParametersRes },
            { no: 4, name: "fit_res", kind: "message", oneof: "msg", T: () => exports.ClientMessage_FitRes },
            { no: 5, name: "evaluate_res", kind: "message", oneof: "msg", T: () => exports.ClientMessage_EvaluateRes }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.msg = { oneofKind: undefined };
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.ClientMessage.DisconnectRes disconnect_res */ 1:
                    message.msg = {
                        oneofKind: "disconnectRes",
                        disconnectRes: exports.ClientMessage_DisconnectRes.internalBinaryRead(reader, reader.uint32(), options, message.msg.disconnectRes)
                    };
                    break;
                case /* flwr.proto.ClientMessage.GetPropertiesRes get_properties_res */ 2:
                    message.msg = {
                        oneofKind: "getPropertiesRes",
                        getPropertiesRes: exports.ClientMessage_GetPropertiesRes.internalBinaryRead(reader, reader.uint32(), options, message.msg.getPropertiesRes)
                    };
                    break;
                case /* flwr.proto.ClientMessage.GetParametersRes get_parameters_res */ 3:
                    message.msg = {
                        oneofKind: "getParametersRes",
                        getParametersRes: exports.ClientMessage_GetParametersRes.internalBinaryRead(reader, reader.uint32(), options, message.msg.getParametersRes)
                    };
                    break;
                case /* flwr.proto.ClientMessage.FitRes fit_res */ 4:
                    message.msg = {
                        oneofKind: "fitRes",
                        fitRes: exports.ClientMessage_FitRes.internalBinaryRead(reader, reader.uint32(), options, message.msg.fitRes)
                    };
                    break;
                case /* flwr.proto.ClientMessage.EvaluateRes evaluate_res */ 5:
                    message.msg = {
                        oneofKind: "evaluateRes",
                        evaluateRes: exports.ClientMessage_EvaluateRes.internalBinaryRead(reader, reader.uint32(), options, message.msg.evaluateRes)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.ClientMessage.DisconnectRes disconnect_res = 1; */
        if (message.msg.oneofKind === "disconnectRes")
            exports.ClientMessage_DisconnectRes.internalBinaryWrite(message.msg.disconnectRes, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.ClientMessage.GetPropertiesRes get_properties_res = 2; */
        if (message.msg.oneofKind === "getPropertiesRes")
            exports.ClientMessage_GetPropertiesRes.internalBinaryWrite(message.msg.getPropertiesRes, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.ClientMessage.GetParametersRes get_parameters_res = 3; */
        if (message.msg.oneofKind === "getParametersRes")
            exports.ClientMessage_GetParametersRes.internalBinaryWrite(message.msg.getParametersRes, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.ClientMessage.FitRes fit_res = 4; */
        if (message.msg.oneofKind === "fitRes")
            exports.ClientMessage_FitRes.internalBinaryWrite(message.msg.fitRes, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.ClientMessage.EvaluateRes evaluate_res = 5; */
        if (message.msg.oneofKind === "evaluateRes")
            exports.ClientMessage_EvaluateRes.internalBinaryWrite(message.msg.evaluateRes, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ClientMessage
 */
exports.ClientMessage = new ClientMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientMessage_DisconnectRes$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ClientMessage.DisconnectRes", [
            { no: 1, name: "reason", kind: "enum", T: () => ["flwr.proto.Reason", Reason] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.reason = 0;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Reason reason */ 1:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Reason reason = 1; */
        if (message.reason !== 0)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ClientMessage.DisconnectRes
 */
exports.ClientMessage_DisconnectRes = new ClientMessage_DisconnectRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientMessage_GetPropertiesRes$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ClientMessage.GetPropertiesRes", [
            { no: 1, name: "status", kind: "message", T: () => exports.Status },
            { no: 2, name: "properties", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => exports.Scalar } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.properties = {};
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Status status */ 1:
                    message.status = exports.Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* map<string, flwr.proto.Scalar> properties */ 2:
                    this.binaryReadMap2(message.properties, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap2(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = exports.Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.ClientMessage.GetPropertiesRes.properties");
            }
        }
        map[key ?? ""] = val ?? exports.Scalar.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Status status = 1; */
        if (message.status)
            exports.Status.internalBinaryWrite(message.status, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<string, flwr.proto.Scalar> properties = 2; */
        for (let k of globalThis.Object.keys(message.properties)) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k);
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.Scalar.internalBinaryWrite(message.properties[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ClientMessage.GetPropertiesRes
 */
exports.ClientMessage_GetPropertiesRes = new ClientMessage_GetPropertiesRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientMessage_GetParametersRes$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ClientMessage.GetParametersRes", [
            { no: 1, name: "status", kind: "message", T: () => exports.Status },
            { no: 2, name: "parameters", kind: "message", T: () => exports.Parameters }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Status status */ 1:
                    message.status = exports.Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* flwr.proto.Parameters parameters */ 2:
                    message.parameters = exports.Parameters.internalBinaryRead(reader, reader.uint32(), options, message.parameters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Status status = 1; */
        if (message.status)
            exports.Status.internalBinaryWrite(message.status, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.Parameters parameters = 2; */
        if (message.parameters)
            exports.Parameters.internalBinaryWrite(message.parameters, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ClientMessage.GetParametersRes
 */
exports.ClientMessage_GetParametersRes = new ClientMessage_GetParametersRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientMessage_FitRes$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ClientMessage.FitRes", [
            { no: 1, name: "status", kind: "message", T: () => exports.Status },
            { no: 2, name: "parameters", kind: "message", T: () => exports.Parameters },
            { no: 3, name: "num_examples", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "metrics", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => exports.Scalar } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.numExamples = 0n;
        message.metrics = {};
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Status status */ 1:
                    message.status = exports.Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* flwr.proto.Parameters parameters */ 2:
                    message.parameters = exports.Parameters.internalBinaryRead(reader, reader.uint32(), options, message.parameters);
                    break;
                case /* int64 num_examples */ 3:
                    message.numExamples = reader.int64().toBigInt();
                    break;
                case /* map<string, flwr.proto.Scalar> metrics */ 4:
                    this.binaryReadMap4(message.metrics, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap4(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = exports.Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.ClientMessage.FitRes.metrics");
            }
        }
        map[key ?? ""] = val ?? exports.Scalar.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Status status = 1; */
        if (message.status)
            exports.Status.internalBinaryWrite(message.status, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.Parameters parameters = 2; */
        if (message.parameters)
            exports.Parameters.internalBinaryWrite(message.parameters, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* int64 num_examples = 3; */
        if (message.numExamples !== 0n)
            writer.tag(3, runtime_1.WireType.Varint).int64(message.numExamples);
        /* map<string, flwr.proto.Scalar> metrics = 4; */
        for (let k of globalThis.Object.keys(message.metrics)) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k);
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.Scalar.internalBinaryWrite(message.metrics[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ClientMessage.FitRes
 */
exports.ClientMessage_FitRes = new ClientMessage_FitRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientMessage_EvaluateRes$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.ClientMessage.EvaluateRes", [
            { no: 1, name: "status", kind: "message", T: () => exports.Status },
            { no: 2, name: "loss", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "num_examples", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "metrics", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => exports.Scalar } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.loss = 0;
        message.numExamples = 0n;
        message.metrics = {};
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Status status */ 1:
                    message.status = exports.Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* float loss */ 2:
                    message.loss = reader.float();
                    break;
                case /* int64 num_examples */ 3:
                    message.numExamples = reader.int64().toBigInt();
                    break;
                case /* map<string, flwr.proto.Scalar> metrics */ 4:
                    this.binaryReadMap4(message.metrics, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap4(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = exports.Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.ClientMessage.EvaluateRes.metrics");
            }
        }
        map[key ?? ""] = val ?? exports.Scalar.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* flwr.proto.Status status = 1; */
        if (message.status)
            exports.Status.internalBinaryWrite(message.status, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* float loss = 2; */
        if (message.loss !== 0)
            writer.tag(2, runtime_1.WireType.Bit32).float(message.loss);
        /* int64 num_examples = 3; */
        if (message.numExamples !== 0n)
            writer.tag(3, runtime_1.WireType.Varint).int64(message.numExamples);
        /* map<string, flwr.proto.Scalar> metrics = 4; */
        for (let k of globalThis.Object.keys(message.metrics)) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k);
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.Scalar.internalBinaryWrite(message.metrics[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ClientMessage.EvaluateRes
 */
exports.ClientMessage_EvaluateRes = new ClientMessage_EvaluateRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Scalar$Type extends runtime_4.MessageType {
    constructor() {
        super("flwr.proto.Scalar", [
            { no: 1, name: "double", kind: "scalar", oneof: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "uint64", kind: "scalar", oneof: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "sint64", kind: "scalar", oneof: "scalar", T: 18 /*ScalarType.SINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "bool", kind: "scalar", oneof: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "string", kind: "scalar", oneof: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "bytes", kind: "scalar", oneof: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.scalar = { oneofKind: undefined };
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double double */ 1:
                    message.scalar = {
                        oneofKind: "double",
                        double: reader.double()
                    };
                    break;
                case /* uint64 uint64 */ 6:
                    message.scalar = {
                        oneofKind: "uint64",
                        uint64: reader.uint64().toBigInt()
                    };
                    break;
                case /* sint64 sint64 */ 8:
                    message.scalar = {
                        oneofKind: "sint64",
                        sint64: reader.sint64().toBigInt()
                    };
                    break;
                case /* bool bool */ 13:
                    message.scalar = {
                        oneofKind: "bool",
                        bool: reader.bool()
                    };
                    break;
                case /* string string */ 14:
                    message.scalar = {
                        oneofKind: "string",
                        string: reader.string()
                    };
                    break;
                case /* bytes bytes */ 15:
                    message.scalar = {
                        oneofKind: "bytes",
                        bytes: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* double double = 1; */
        if (message.scalar.oneofKind === "double")
            writer.tag(1, runtime_1.WireType.Bit64).double(message.scalar.double);
        /* uint64 uint64 = 6; */
        if (message.scalar.oneofKind === "uint64")
            writer.tag(6, runtime_1.WireType.Varint).uint64(message.scalar.uint64);
        /* sint64 sint64 = 8; */
        if (message.scalar.oneofKind === "sint64")
            writer.tag(8, runtime_1.WireType.Varint).sint64(message.scalar.sint64);
        /* bool bool = 13; */
        if (message.scalar.oneofKind === "bool")
            writer.tag(13, runtime_1.WireType.Varint).bool(message.scalar.bool);
        /* string string = 14; */
        if (message.scalar.oneofKind === "string")
            writer.tag(14, runtime_1.WireType.LengthDelimited).string(message.scalar.string);
        /* bytes bytes = 15; */
        if (message.scalar.oneofKind === "bytes")
            writer.tag(15, runtime_1.WireType.LengthDelimited).bytes(message.scalar.bytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.Scalar
 */
exports.Scalar = new Scalar$Type();
/**
 * @generated ServiceType for protobuf service flwr.proto.FlowerService
 */
exports.FlowerService = new runtime_rpc_1.ServiceType("flwr.proto.FlowerService", [
    { name: "Join", serverStreaming: true, clientStreaming: true, options: {}, I: exports.ClientMessage, O: exports.ServerMessage }
]);
