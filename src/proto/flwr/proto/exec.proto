// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================

syntax = "proto3";

package flwr.proto;

import "flwr/proto/fab.proto";
import "flwr/proto/transport.proto";
import "flwr/proto/recordset.proto";
import "flwr/proto/run.proto";

service Exec {
  // Start run upon request
  rpc StartRun(StartRunRequest) returns (StartRunResponse) {}

  // Stop run upon request
  rpc StopRun(StopRunRequest) returns (StopRunResponse) {}

  // Start log stream upon request
  rpc StreamLogs(StreamLogsRequest) returns (stream StreamLogsResponse) {}

  // flwr ls command
  rpc ListRuns(ListRunsRequest) returns (ListRunsResponse) {}

  // Get login details upon request
  rpc GetLoginDetails(GetLoginDetailsRequest)
      returns (GetLoginDetailsResponse) {}

  // Get auth tokens upon request
  rpc GetAuthTokens(GetAuthTokensRequest) returns (GetAuthTokensResponse) {}
}

message StartRunRequest {
  Fab fab = 1;
  map<string, Scalar> override_config = 2;
  ConfigsRecord federation_options = 3;
}
message StartRunResponse { optional uint64 run_id = 1; }
message StreamLogsRequest {
  uint64 run_id = 1;
  double after_timestamp = 2;
}
message StreamLogsResponse {
  string log_output = 1;
  double latest_timestamp = 2;
}
message ListRunsRequest { optional uint64 run_id = 1; }
message ListRunsResponse {
  map<uint64, Run> run_dict = 1;
  string now = 2;
}

message GetLoginDetailsRequest {}
message GetLoginDetailsResponse { map<string, string> login_details = 1; }

message GetAuthTokensRequest { map<string, string> auth_details = 1; }
message GetAuthTokensResponse { map<string, string> auth_tokens = 1; }

message StopRunRequest { uint64 run_id = 1; }
message StopRunResponse { bool success = 1; }
