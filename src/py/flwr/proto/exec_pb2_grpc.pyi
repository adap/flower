"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2024 Flower Labs GmbH. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================
"""

import abc
import collections.abc
import flwr.proto.exec_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ExecStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    StartRun: grpc.UnaryUnaryMultiCallable[
        flwr.proto.exec_pb2.StartRunRequest,
        flwr.proto.exec_pb2.StartRunResponse,
    ]
    """Start run upon request"""

    StopRun: grpc.UnaryUnaryMultiCallable[
        flwr.proto.exec_pb2.StopRunRequest,
        flwr.proto.exec_pb2.StopRunResponse,
    ]
    """Stop run upon request"""

    StreamLogs: grpc.UnaryStreamMultiCallable[
        flwr.proto.exec_pb2.StreamLogsRequest,
        flwr.proto.exec_pb2.StreamLogsResponse,
    ]
    """Start log stream upon request"""

    ListRuns: grpc.UnaryUnaryMultiCallable[
        flwr.proto.exec_pb2.ListRunsRequest,
        flwr.proto.exec_pb2.ListRunsResponse,
    ]
    """flwr ls command"""

    GetLoginDetails: grpc.UnaryUnaryMultiCallable[
        flwr.proto.exec_pb2.GetLoginDetailsRequest,
        flwr.proto.exec_pb2.GetLoginDetailsResponse,
    ]
    """Get login details upon request"""

    GetAuthTokens: grpc.UnaryUnaryMultiCallable[
        flwr.proto.exec_pb2.GetAuthTokensRequest,
        flwr.proto.exec_pb2.GetAuthTokensResponse,
    ]
    """Get auth tokens upon request"""

class ExecAsyncStub:
    StartRun: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.exec_pb2.StartRunRequest,
        flwr.proto.exec_pb2.StartRunResponse,
    ]
    """Start run upon request"""

    StopRun: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.exec_pb2.StopRunRequest,
        flwr.proto.exec_pb2.StopRunResponse,
    ]
    """Stop run upon request"""

    StreamLogs: grpc.aio.UnaryStreamMultiCallable[
        flwr.proto.exec_pb2.StreamLogsRequest,
        flwr.proto.exec_pb2.StreamLogsResponse,
    ]
    """Start log stream upon request"""

    ListRuns: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.exec_pb2.ListRunsRequest,
        flwr.proto.exec_pb2.ListRunsResponse,
    ]
    """flwr ls command"""

    GetLoginDetails: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.exec_pb2.GetLoginDetailsRequest,
        flwr.proto.exec_pb2.GetLoginDetailsResponse,
    ]
    """Get login details upon request"""

    GetAuthTokens: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.exec_pb2.GetAuthTokensRequest,
        flwr.proto.exec_pb2.GetAuthTokensResponse,
    ]
    """Get auth tokens upon request"""

class ExecServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def StartRun(
        self,
        request: flwr.proto.exec_pb2.StartRunRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.exec_pb2.StartRunResponse, collections.abc.Awaitable[flwr.proto.exec_pb2.StartRunResponse]]:
        """Start run upon request"""

    @abc.abstractmethod
    def StopRun(
        self,
        request: flwr.proto.exec_pb2.StopRunRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.exec_pb2.StopRunResponse, collections.abc.Awaitable[flwr.proto.exec_pb2.StopRunResponse]]:
        """Stop run upon request"""

    @abc.abstractmethod
    def StreamLogs(
        self,
        request: flwr.proto.exec_pb2.StreamLogsRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[flwr.proto.exec_pb2.StreamLogsResponse], collections.abc.AsyncIterator[flwr.proto.exec_pb2.StreamLogsResponse]]:
        """Start log stream upon request"""

    @abc.abstractmethod
    def ListRuns(
        self,
        request: flwr.proto.exec_pb2.ListRunsRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.exec_pb2.ListRunsResponse, collections.abc.Awaitable[flwr.proto.exec_pb2.ListRunsResponse]]:
        """flwr ls command"""

    @abc.abstractmethod
    def GetLoginDetails(
        self,
        request: flwr.proto.exec_pb2.GetLoginDetailsRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.exec_pb2.GetLoginDetailsResponse, collections.abc.Awaitable[flwr.proto.exec_pb2.GetLoginDetailsResponse]]:
        """Get login details upon request"""

    @abc.abstractmethod
    def GetAuthTokens(
        self,
        request: flwr.proto.exec_pb2.GetAuthTokensRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.exec_pb2.GetAuthTokensResponse, collections.abc.Awaitable[flwr.proto.exec_pb2.GetAuthTokensResponse]]:
        """Get auth tokens upon request"""

def add_ExecServicer_to_server(servicer: ExecServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
