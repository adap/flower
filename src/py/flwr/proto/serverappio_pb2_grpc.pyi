"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2022 Flower Labs GmbH. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================
"""

import abc
import collections.abc
import flwr.proto.fab_pb2
import flwr.proto.log_pb2
import flwr.proto.run_pb2
import flwr.proto.serverappio_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ServerAppIoStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateRun: grpc.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.CreateRunRequest,
        flwr.proto.run_pb2.CreateRunResponse,
    ]
    """Request run_id"""

    GetNodes: grpc.UnaryUnaryMultiCallable[
        flwr.proto.serverappio_pb2.GetNodesRequest,
        flwr.proto.serverappio_pb2.GetNodesResponse,
    ]
    """Return a set of nodes"""

    PushMessages: grpc.UnaryUnaryMultiCallable[
        flwr.proto.serverappio_pb2.PushInsMessagesRequest,
        flwr.proto.serverappio_pb2.PushInsMessagesResponse,
    ]
    """Create one or more messages"""

    PullMessages: grpc.UnaryUnaryMultiCallable[
        flwr.proto.serverappio_pb2.PullResMessagesRequest,
        flwr.proto.serverappio_pb2.PullResMessagesResponse,
    ]
    """Get message results"""

    GetRun: grpc.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.GetRunRequest,
        flwr.proto.run_pb2.GetRunResponse,
    ]
    """Get run details"""

    GetFab: grpc.UnaryUnaryMultiCallable[
        flwr.proto.fab_pb2.GetFabRequest,
        flwr.proto.fab_pb2.GetFabResponse,
    ]
    """Get FAB"""

    PullServerAppInputs: grpc.UnaryUnaryMultiCallable[
        flwr.proto.serverappio_pb2.PullServerAppInputsRequest,
        flwr.proto.serverappio_pb2.PullServerAppInputsResponse,
    ]
    """Pull ServerApp inputs"""

    PushServerAppOutputs: grpc.UnaryUnaryMultiCallable[
        flwr.proto.serverappio_pb2.PushServerAppOutputsRequest,
        flwr.proto.serverappio_pb2.PushServerAppOutputsResponse,
    ]
    """Push ServerApp outputs"""

    UpdateRunStatus: grpc.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.UpdateRunStatusRequest,
        flwr.proto.run_pb2.UpdateRunStatusResponse,
    ]
    """Update the status of a given run"""

    GetRunStatus: grpc.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.GetRunStatusRequest,
        flwr.proto.run_pb2.GetRunStatusResponse,
    ]
    """Get the status of a given run"""

    PushLogs: grpc.UnaryUnaryMultiCallable[
        flwr.proto.log_pb2.PushLogsRequest,
        flwr.proto.log_pb2.PushLogsResponse,
    ]
    """Push ServerApp logs"""

class ServerAppIoAsyncStub:
    CreateRun: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.CreateRunRequest,
        flwr.proto.run_pb2.CreateRunResponse,
    ]
    """Request run_id"""

    GetNodes: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.serverappio_pb2.GetNodesRequest,
        flwr.proto.serverappio_pb2.GetNodesResponse,
    ]
    """Return a set of nodes"""

    PushMessages: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.serverappio_pb2.PushInsMessagesRequest,
        flwr.proto.serverappio_pb2.PushInsMessagesResponse,
    ]
    """Create one or more messages"""

    PullMessages: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.serverappio_pb2.PullResMessagesRequest,
        flwr.proto.serverappio_pb2.PullResMessagesResponse,
    ]
    """Get message results"""

    GetRun: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.GetRunRequest,
        flwr.proto.run_pb2.GetRunResponse,
    ]
    """Get run details"""

    GetFab: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.fab_pb2.GetFabRequest,
        flwr.proto.fab_pb2.GetFabResponse,
    ]
    """Get FAB"""

    PullServerAppInputs: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.serverappio_pb2.PullServerAppInputsRequest,
        flwr.proto.serverappio_pb2.PullServerAppInputsResponse,
    ]
    """Pull ServerApp inputs"""

    PushServerAppOutputs: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.serverappio_pb2.PushServerAppOutputsRequest,
        flwr.proto.serverappio_pb2.PushServerAppOutputsResponse,
    ]
    """Push ServerApp outputs"""

    UpdateRunStatus: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.UpdateRunStatusRequest,
        flwr.proto.run_pb2.UpdateRunStatusResponse,
    ]
    """Update the status of a given run"""

    GetRunStatus: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.GetRunStatusRequest,
        flwr.proto.run_pb2.GetRunStatusResponse,
    ]
    """Get the status of a given run"""

    PushLogs: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.log_pb2.PushLogsRequest,
        flwr.proto.log_pb2.PushLogsResponse,
    ]
    """Push ServerApp logs"""

class ServerAppIoServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateRun(
        self,
        request: flwr.proto.run_pb2.CreateRunRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.run_pb2.CreateRunResponse, collections.abc.Awaitable[flwr.proto.run_pb2.CreateRunResponse]]:
        """Request run_id"""

    @abc.abstractmethod
    def GetNodes(
        self,
        request: flwr.proto.serverappio_pb2.GetNodesRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.serverappio_pb2.GetNodesResponse, collections.abc.Awaitable[flwr.proto.serverappio_pb2.GetNodesResponse]]:
        """Return a set of nodes"""

    @abc.abstractmethod
    def PushMessages(
        self,
        request: flwr.proto.serverappio_pb2.PushInsMessagesRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.serverappio_pb2.PushInsMessagesResponse, collections.abc.Awaitable[flwr.proto.serverappio_pb2.PushInsMessagesResponse]]:
        """Create one or more messages"""

    @abc.abstractmethod
    def PullMessages(
        self,
        request: flwr.proto.serverappio_pb2.PullResMessagesRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.serverappio_pb2.PullResMessagesResponse, collections.abc.Awaitable[flwr.proto.serverappio_pb2.PullResMessagesResponse]]:
        """Get message results"""

    @abc.abstractmethod
    def GetRun(
        self,
        request: flwr.proto.run_pb2.GetRunRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.run_pb2.GetRunResponse, collections.abc.Awaitable[flwr.proto.run_pb2.GetRunResponse]]:
        """Get run details"""

    @abc.abstractmethod
    def GetFab(
        self,
        request: flwr.proto.fab_pb2.GetFabRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.fab_pb2.GetFabResponse, collections.abc.Awaitable[flwr.proto.fab_pb2.GetFabResponse]]:
        """Get FAB"""

    @abc.abstractmethod
    def PullServerAppInputs(
        self,
        request: flwr.proto.serverappio_pb2.PullServerAppInputsRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.serverappio_pb2.PullServerAppInputsResponse, collections.abc.Awaitable[flwr.proto.serverappio_pb2.PullServerAppInputsResponse]]:
        """Pull ServerApp inputs"""

    @abc.abstractmethod
    def PushServerAppOutputs(
        self,
        request: flwr.proto.serverappio_pb2.PushServerAppOutputsRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.serverappio_pb2.PushServerAppOutputsResponse, collections.abc.Awaitable[flwr.proto.serverappio_pb2.PushServerAppOutputsResponse]]:
        """Push ServerApp outputs"""

    @abc.abstractmethod
    def UpdateRunStatus(
        self,
        request: flwr.proto.run_pb2.UpdateRunStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.run_pb2.UpdateRunStatusResponse, collections.abc.Awaitable[flwr.proto.run_pb2.UpdateRunStatusResponse]]:
        """Update the status of a given run"""

    @abc.abstractmethod
    def GetRunStatus(
        self,
        request: flwr.proto.run_pb2.GetRunStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.run_pb2.GetRunStatusResponse, collections.abc.Awaitable[flwr.proto.run_pb2.GetRunStatusResponse]]:
        """Get the status of a given run"""

    @abc.abstractmethod
    def PushLogs(
        self,
        request: flwr.proto.log_pb2.PushLogsRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.log_pb2.PushLogsResponse, collections.abc.Awaitable[flwr.proto.log_pb2.PushLogsResponse]]:
        """Push ServerApp logs"""

def add_ServerAppIoServicer_to_server(servicer: ServerAppIoServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
