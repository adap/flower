"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2024 Flower Labs GmbH. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================
"""

import abc
import collections.abc
import flwr.proto.log_pb2
import flwr.proto.run_pb2
import flwr.proto.simulationio_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SimulationIoStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    PullSimulationInputs: grpc.UnaryUnaryMultiCallable[
        flwr.proto.simulationio_pb2.PullSimulationInputsRequest,
        flwr.proto.simulationio_pb2.PullSimulationInputsResponse,
    ]
    """Pull Simulation inputs"""

    PushSimulationOutputs: grpc.UnaryUnaryMultiCallable[
        flwr.proto.simulationio_pb2.PushSimulationOutputsRequest,
        flwr.proto.simulationio_pb2.PushSimulationOutputsResponse,
    ]
    """Push Simulation outputs"""

    UpdateRunStatus: grpc.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.UpdateRunStatusRequest,
        flwr.proto.run_pb2.UpdateRunStatusResponse,
    ]
    """Update the status of a given run"""

    PushLogs: grpc.UnaryUnaryMultiCallable[
        flwr.proto.log_pb2.PushLogsRequest,
        flwr.proto.log_pb2.PushLogsResponse,
    ]
    """Push ServerApp logs"""

    GetFederationOptions: grpc.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.GetFederationOptionsRequest,
        flwr.proto.run_pb2.GetFederationOptionsResponse,
    ]
    """Get Federation Options"""

    GetRunStatus: grpc.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.GetRunStatusRequest,
        flwr.proto.run_pb2.GetRunStatusResponse,
    ]
    """Get Run Status"""

class SimulationIoAsyncStub:
    PullSimulationInputs: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.simulationio_pb2.PullSimulationInputsRequest,
        flwr.proto.simulationio_pb2.PullSimulationInputsResponse,
    ]
    """Pull Simulation inputs"""

    PushSimulationOutputs: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.simulationio_pb2.PushSimulationOutputsRequest,
        flwr.proto.simulationio_pb2.PushSimulationOutputsResponse,
    ]
    """Push Simulation outputs"""

    UpdateRunStatus: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.UpdateRunStatusRequest,
        flwr.proto.run_pb2.UpdateRunStatusResponse,
    ]
    """Update the status of a given run"""

    PushLogs: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.log_pb2.PushLogsRequest,
        flwr.proto.log_pb2.PushLogsResponse,
    ]
    """Push ServerApp logs"""

    GetFederationOptions: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.GetFederationOptionsRequest,
        flwr.proto.run_pb2.GetFederationOptionsResponse,
    ]
    """Get Federation Options"""

    GetRunStatus: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.GetRunStatusRequest,
        flwr.proto.run_pb2.GetRunStatusResponse,
    ]
    """Get Run Status"""

class SimulationIoServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def PullSimulationInputs(
        self,
        request: flwr.proto.simulationio_pb2.PullSimulationInputsRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.simulationio_pb2.PullSimulationInputsResponse, collections.abc.Awaitable[flwr.proto.simulationio_pb2.PullSimulationInputsResponse]]:
        """Pull Simulation inputs"""

    @abc.abstractmethod
    def PushSimulationOutputs(
        self,
        request: flwr.proto.simulationio_pb2.PushSimulationOutputsRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.simulationio_pb2.PushSimulationOutputsResponse, collections.abc.Awaitable[flwr.proto.simulationio_pb2.PushSimulationOutputsResponse]]:
        """Push Simulation outputs"""

    @abc.abstractmethod
    def UpdateRunStatus(
        self,
        request: flwr.proto.run_pb2.UpdateRunStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.run_pb2.UpdateRunStatusResponse, collections.abc.Awaitable[flwr.proto.run_pb2.UpdateRunStatusResponse]]:
        """Update the status of a given run"""

    @abc.abstractmethod
    def PushLogs(
        self,
        request: flwr.proto.log_pb2.PushLogsRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.log_pb2.PushLogsResponse, collections.abc.Awaitable[flwr.proto.log_pb2.PushLogsResponse]]:
        """Push ServerApp logs"""

    @abc.abstractmethod
    def GetFederationOptions(
        self,
        request: flwr.proto.run_pb2.GetFederationOptionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.run_pb2.GetFederationOptionsResponse, collections.abc.Awaitable[flwr.proto.run_pb2.GetFederationOptionsResponse]]:
        """Get Federation Options"""

    @abc.abstractmethod
    def GetRunStatus(
        self,
        request: flwr.proto.run_pb2.GetRunStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.run_pb2.GetRunStatusResponse, collections.abc.Awaitable[flwr.proto.run_pb2.GetRunStatusResponse]]:
        """Get Run Status"""

def add_SimulationIoServicer_to_server(servicer: SimulationIoServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
