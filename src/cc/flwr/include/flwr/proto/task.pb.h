// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2ftask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2ftask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flwr/proto/node.pb.h"
#include "flwr/proto/recordset.pb.h"
#include "flwr/proto/transport.pb.h"
#include "flwr/proto/error.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flwr_2fproto_2ftask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flwr_2fproto_2ftask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flwr_2fproto_2ftask_2eproto;
namespace flwr {
namespace proto {
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskIns;
struct TaskInsDefaultTypeInternal;
extern TaskInsDefaultTypeInternal _TaskIns_default_instance_;
class TaskRes;
struct TaskResDefaultTypeInternal;
extern TaskResDefaultTypeInternal _TaskRes_default_instance_;
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> ::flwr::proto::Task* Arena::CreateMaybeMessage<::flwr::proto::Task>(Arena*);
template<> ::flwr::proto::TaskIns* Arena::CreateMaybeMessage<::flwr::proto::TaskIns>(Arena*);
template<> ::flwr::proto::TaskRes* Arena::CreateMaybeMessage<::flwr::proto::TaskRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flwr {
namespace proto {

// ===================================================================

class Task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  explicit constexpr Task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return new Task();
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Task& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAncestryFieldNumber = 7,
    kDeliveredAtFieldNumber = 4,
    kTaskTypeFieldNumber = 8,
    kProducerFieldNumber = 1,
    kConsumerFieldNumber = 2,
    kRecordsetFieldNumber = 9,
    kErrorFieldNumber = 10,
    kCreatedAtFieldNumber = 3,
    kPushedAtFieldNumber = 5,
    kTtlFieldNumber = 6,
  };
  // repeated string ancestry = 7;
  int ancestry_size() const;
  private:
  int _internal_ancestry_size() const;
  public:
  void clear_ancestry();
  const std::string& ancestry(int index) const;
  std::string* mutable_ancestry(int index);
  void set_ancestry(int index, const std::string& value);
  void set_ancestry(int index, std::string&& value);
  void set_ancestry(int index, const char* value);
  void set_ancestry(int index, const char* value, size_t size);
  std::string* add_ancestry();
  void add_ancestry(const std::string& value);
  void add_ancestry(std::string&& value);
  void add_ancestry(const char* value);
  void add_ancestry(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ancestry() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ancestry();
  private:
  const std::string& _internal_ancestry(int index) const;
  std::string* _internal_add_ancestry();
  public:

  // string delivered_at = 4;
  void clear_delivered_at();
  const std::string& delivered_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delivered_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delivered_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_delivered_at();
  void set_allocated_delivered_at(std::string* delivered_at);
  private:
  const std::string& _internal_delivered_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delivered_at(const std::string& value);
  std::string* _internal_mutable_delivered_at();
  public:

  // string task_type = 8;
  void clear_task_type();
  const std::string& task_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_type();
  void set_allocated_task_type(std::string* task_type);
  private:
  const std::string& _internal_task_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_type(const std::string& value);
  std::string* _internal_mutable_task_type();
  public:

  // .flwr.proto.Node producer = 1;
  bool has_producer() const;
  private:
  bool _internal_has_producer() const;
  public:
  void clear_producer();
  const ::flwr::proto::Node& producer() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Node* release_producer();
  ::flwr::proto::Node* mutable_producer();
  void set_allocated_producer(::flwr::proto::Node* producer);
  private:
  const ::flwr::proto::Node& _internal_producer() const;
  ::flwr::proto::Node* _internal_mutable_producer();
  public:
  void unsafe_arena_set_allocated_producer(
      ::flwr::proto::Node* producer);
  ::flwr::proto::Node* unsafe_arena_release_producer();

  // .flwr.proto.Node consumer = 2;
  bool has_consumer() const;
  private:
  bool _internal_has_consumer() const;
  public:
  void clear_consumer();
  const ::flwr::proto::Node& consumer() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Node* release_consumer();
  ::flwr::proto::Node* mutable_consumer();
  void set_allocated_consumer(::flwr::proto::Node* consumer);
  private:
  const ::flwr::proto::Node& _internal_consumer() const;
  ::flwr::proto::Node* _internal_mutable_consumer();
  public:
  void unsafe_arena_set_allocated_consumer(
      ::flwr::proto::Node* consumer);
  ::flwr::proto::Node* unsafe_arena_release_consumer();

  // .flwr.proto.RecordSet recordset = 9;
  bool has_recordset() const;
  private:
  bool _internal_has_recordset() const;
  public:
  void clear_recordset();
  const ::flwr::proto::RecordSet& recordset() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::RecordSet* release_recordset();
  ::flwr::proto::RecordSet* mutable_recordset();
  void set_allocated_recordset(::flwr::proto::RecordSet* recordset);
  private:
  const ::flwr::proto::RecordSet& _internal_recordset() const;
  ::flwr::proto::RecordSet* _internal_mutable_recordset();
  public:
  void unsafe_arena_set_allocated_recordset(
      ::flwr::proto::RecordSet* recordset);
  ::flwr::proto::RecordSet* unsafe_arena_release_recordset();

  // .flwr.proto.Error error = 10;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::flwr::proto::Error& error() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Error* release_error();
  ::flwr::proto::Error* mutable_error();
  void set_allocated_error(::flwr::proto::Error* error);
  private:
  const ::flwr::proto::Error& _internal_error() const;
  ::flwr::proto::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::flwr::proto::Error* error);
  ::flwr::proto::Error* unsafe_arena_release_error();

  // double created_at = 3;
  void clear_created_at();
  double created_at() const;
  void set_created_at(double value);
  private:
  double _internal_created_at() const;
  void _internal_set_created_at(double value);
  public:

  // double pushed_at = 5;
  void clear_pushed_at();
  double pushed_at() const;
  void set_pushed_at(double value);
  private:
  double _internal_pushed_at() const;
  void _internal_set_pushed_at(double value);
  public:

  // double ttl = 6;
  void clear_ttl();
  double ttl() const;
  void set_ttl(double value);
  private:
  double _internal_ttl() const;
  void _internal_set_ttl(double value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ancestry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delivered_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_type_;
  ::flwr::proto::Node* producer_;
  ::flwr::proto::Node* consumer_;
  ::flwr::proto::RecordSet* recordset_;
  ::flwr::proto::Error* error_;
  double created_at_;
  double pushed_at_;
  double ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ftask_2eproto;
};
// -------------------------------------------------------------------

class TaskIns final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.TaskIns) */ {
 public:
  inline TaskIns() : TaskIns(nullptr) {}
  ~TaskIns() override;
  explicit constexpr TaskIns(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskIns(const TaskIns& from);
  TaskIns(TaskIns&& from) noexcept
    : TaskIns() {
    *this = ::std::move(from);
  }

  inline TaskIns& operator=(const TaskIns& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskIns& operator=(TaskIns&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskIns& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskIns* internal_default_instance() {
    return reinterpret_cast<const TaskIns*>(
               &_TaskIns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskIns& a, TaskIns& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskIns* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskIns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskIns* New() const final {
    return new TaskIns();
  }

  TaskIns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskIns>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskIns& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskIns& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskIns* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.TaskIns";
  }
  protected:
  explicit TaskIns(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kTaskFieldNumber = 4,
    kRunIdFieldNumber = 3,
  };
  // string task_id = 1;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // string group_id = 2;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // .flwr.proto.Task task = 4;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::flwr::proto::Task& task() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Task* release_task();
  ::flwr::proto::Task* mutable_task();
  void set_allocated_task(::flwr::proto::Task* task);
  private:
  const ::flwr::proto::Task& _internal_task() const;
  ::flwr::proto::Task* _internal_mutable_task();
  public:
  void unsafe_arena_set_allocated_task(
      ::flwr::proto::Task* task);
  ::flwr::proto::Task* unsafe_arena_release_task();

  // sint64 run_id = 3;
  void clear_run_id();
  ::PROTOBUF_NAMESPACE_ID::int64 run_id() const;
  void set_run_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_run_id() const;
  void _internal_set_run_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.TaskIns)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::flwr::proto::Task* task_;
  ::PROTOBUF_NAMESPACE_ID::int64 run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ftask_2eproto;
};
// -------------------------------------------------------------------

class TaskRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.TaskRes) */ {
 public:
  inline TaskRes() : TaskRes(nullptr) {}
  ~TaskRes() override;
  explicit constexpr TaskRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskRes(const TaskRes& from);
  TaskRes(TaskRes&& from) noexcept
    : TaskRes() {
    *this = ::std::move(from);
  }

  inline TaskRes& operator=(const TaskRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskRes& operator=(TaskRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskRes* internal_default_instance() {
    return reinterpret_cast<const TaskRes*>(
               &_TaskRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TaskRes& a, TaskRes& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskRes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskRes* New() const final {
    return new TaskRes();
  }

  TaskRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.TaskRes";
  }
  protected:
  explicit TaskRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kTaskFieldNumber = 4,
    kRunIdFieldNumber = 3,
  };
  // string task_id = 1;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // string group_id = 2;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // .flwr.proto.Task task = 4;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::flwr::proto::Task& task() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Task* release_task();
  ::flwr::proto::Task* mutable_task();
  void set_allocated_task(::flwr::proto::Task* task);
  private:
  const ::flwr::proto::Task& _internal_task() const;
  ::flwr::proto::Task* _internal_mutable_task();
  public:
  void unsafe_arena_set_allocated_task(
      ::flwr::proto::Task* task);
  ::flwr::proto::Task* unsafe_arena_release_task();

  // sint64 run_id = 3;
  void clear_run_id();
  ::PROTOBUF_NAMESPACE_ID::int64 run_id() const;
  void set_run_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_run_id() const;
  void _internal_set_run_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.TaskRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::flwr::proto::Task* task_;
  ::PROTOBUF_NAMESPACE_ID::int64 run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ftask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Task

// .flwr.proto.Node producer = 1;
inline bool Task::_internal_has_producer() const {
  return this != internal_default_instance() && producer_ != nullptr;
}
inline bool Task::has_producer() const {
  return _internal_has_producer();
}
inline const ::flwr::proto::Node& Task::_internal_producer() const {
  const ::flwr::proto::Node* p = producer_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Node&>(
      ::flwr::proto::_Node_default_instance_);
}
inline const ::flwr::proto::Node& Task::producer() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Task.producer)
  return _internal_producer();
}
inline void Task::unsafe_arena_set_allocated_producer(
    ::flwr::proto::Node* producer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(producer_);
  }
  producer_ = producer;
  if (producer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.Task.producer)
}
inline ::flwr::proto::Node* Task::release_producer() {
  
  ::flwr::proto::Node* temp = producer_;
  producer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Node* Task::unsafe_arena_release_producer() {
  // @@protoc_insertion_point(field_release:flwr.proto.Task.producer)
  
  ::flwr::proto::Node* temp = producer_;
  producer_ = nullptr;
  return temp;
}
inline ::flwr::proto::Node* Task::_internal_mutable_producer() {
  
  if (producer_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Node>(GetArenaForAllocation());
    producer_ = p;
  }
  return producer_;
}
inline ::flwr::proto::Node* Task::mutable_producer() {
  ::flwr::proto::Node* _msg = _internal_mutable_producer();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Task.producer)
  return _msg;
}
inline void Task::set_allocated_producer(::flwr::proto::Node* producer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(producer_);
  }
  if (producer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(producer));
    if (message_arena != submessage_arena) {
      producer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producer, submessage_arena);
    }
    
  } else {
    
  }
  producer_ = producer;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Task.producer)
}

// .flwr.proto.Node consumer = 2;
inline bool Task::_internal_has_consumer() const {
  return this != internal_default_instance() && consumer_ != nullptr;
}
inline bool Task::has_consumer() const {
  return _internal_has_consumer();
}
inline const ::flwr::proto::Node& Task::_internal_consumer() const {
  const ::flwr::proto::Node* p = consumer_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Node&>(
      ::flwr::proto::_Node_default_instance_);
}
inline const ::flwr::proto::Node& Task::consumer() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Task.consumer)
  return _internal_consumer();
}
inline void Task::unsafe_arena_set_allocated_consumer(
    ::flwr::proto::Node* consumer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consumer_);
  }
  consumer_ = consumer;
  if (consumer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.Task.consumer)
}
inline ::flwr::proto::Node* Task::release_consumer() {
  
  ::flwr::proto::Node* temp = consumer_;
  consumer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Node* Task::unsafe_arena_release_consumer() {
  // @@protoc_insertion_point(field_release:flwr.proto.Task.consumer)
  
  ::flwr::proto::Node* temp = consumer_;
  consumer_ = nullptr;
  return temp;
}
inline ::flwr::proto::Node* Task::_internal_mutable_consumer() {
  
  if (consumer_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Node>(GetArenaForAllocation());
    consumer_ = p;
  }
  return consumer_;
}
inline ::flwr::proto::Node* Task::mutable_consumer() {
  ::flwr::proto::Node* _msg = _internal_mutable_consumer();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Task.consumer)
  return _msg;
}
inline void Task::set_allocated_consumer(::flwr::proto::Node* consumer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consumer_);
  }
  if (consumer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consumer));
    if (message_arena != submessage_arena) {
      consumer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consumer, submessage_arena);
    }
    
  } else {
    
  }
  consumer_ = consumer;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Task.consumer)
}

// double created_at = 3;
inline void Task::clear_created_at() {
  created_at_ = 0;
}
inline double Task::_internal_created_at() const {
  return created_at_;
}
inline double Task::created_at() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Task.created_at)
  return _internal_created_at();
}
inline void Task::_internal_set_created_at(double value) {
  
  created_at_ = value;
}
inline void Task::set_created_at(double value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Task.created_at)
}

// string delivered_at = 4;
inline void Task::clear_delivered_at() {
  delivered_at_.ClearToEmpty();
}
inline const std::string& Task::delivered_at() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Task.delivered_at)
  return _internal_delivered_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_delivered_at(ArgT0&& arg0, ArgT... args) {
 
 delivered_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.Task.delivered_at)
}
inline std::string* Task::mutable_delivered_at() {
  std::string* _s = _internal_mutable_delivered_at();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Task.delivered_at)
  return _s;
}
inline const std::string& Task::_internal_delivered_at() const {
  return delivered_at_.Get();
}
inline void Task::_internal_set_delivered_at(const std::string& value) {
  
  delivered_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_delivered_at() {
  
  return delivered_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_delivered_at() {
  // @@protoc_insertion_point(field_release:flwr.proto.Task.delivered_at)
  return delivered_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_delivered_at(std::string* delivered_at) {
  if (delivered_at != nullptr) {
    
  } else {
    
  }
  delivered_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delivered_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Task.delivered_at)
}

// double pushed_at = 5;
inline void Task::clear_pushed_at() {
  pushed_at_ = 0;
}
inline double Task::_internal_pushed_at() const {
  return pushed_at_;
}
inline double Task::pushed_at() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Task.pushed_at)
  return _internal_pushed_at();
}
inline void Task::_internal_set_pushed_at(double value) {
  
  pushed_at_ = value;
}
inline void Task::set_pushed_at(double value) {
  _internal_set_pushed_at(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Task.pushed_at)
}

// double ttl = 6;
inline void Task::clear_ttl() {
  ttl_ = 0;
}
inline double Task::_internal_ttl() const {
  return ttl_;
}
inline double Task::ttl() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Task.ttl)
  return _internal_ttl();
}
inline void Task::_internal_set_ttl(double value) {
  
  ttl_ = value;
}
inline void Task::set_ttl(double value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Task.ttl)
}

// repeated string ancestry = 7;
inline int Task::_internal_ancestry_size() const {
  return ancestry_.size();
}
inline int Task::ancestry_size() const {
  return _internal_ancestry_size();
}
inline void Task::clear_ancestry() {
  ancestry_.Clear();
}
inline std::string* Task::add_ancestry() {
  std::string* _s = _internal_add_ancestry();
  // @@protoc_insertion_point(field_add_mutable:flwr.proto.Task.ancestry)
  return _s;
}
inline const std::string& Task::_internal_ancestry(int index) const {
  return ancestry_.Get(index);
}
inline const std::string& Task::ancestry(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.Task.ancestry)
  return _internal_ancestry(index);
}
inline std::string* Task::mutable_ancestry(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.Task.ancestry)
  return ancestry_.Mutable(index);
}
inline void Task::set_ancestry(int index, const std::string& value) {
  ancestry_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Task.ancestry)
}
inline void Task::set_ancestry(int index, std::string&& value) {
  ancestry_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flwr.proto.Task.ancestry)
}
inline void Task::set_ancestry(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ancestry_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flwr.proto.Task.ancestry)
}
inline void Task::set_ancestry(int index, const char* value, size_t size) {
  ancestry_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flwr.proto.Task.ancestry)
}
inline std::string* Task::_internal_add_ancestry() {
  return ancestry_.Add();
}
inline void Task::add_ancestry(const std::string& value) {
  ancestry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flwr.proto.Task.ancestry)
}
inline void Task::add_ancestry(std::string&& value) {
  ancestry_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flwr.proto.Task.ancestry)
}
inline void Task::add_ancestry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ancestry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flwr.proto.Task.ancestry)
}
inline void Task::add_ancestry(const char* value, size_t size) {
  ancestry_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flwr.proto.Task.ancestry)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Task::ancestry() const {
  // @@protoc_insertion_point(field_list:flwr.proto.Task.ancestry)
  return ancestry_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Task::mutable_ancestry() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.Task.ancestry)
  return &ancestry_;
}

// string task_type = 8;
inline void Task::clear_task_type() {
  task_type_.ClearToEmpty();
}
inline const std::string& Task::task_type() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Task.task_type)
  return _internal_task_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_task_type(ArgT0&& arg0, ArgT... args) {
 
 task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.Task.task_type)
}
inline std::string* Task::mutable_task_type() {
  std::string* _s = _internal_mutable_task_type();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Task.task_type)
  return _s;
}
inline const std::string& Task::_internal_task_type() const {
  return task_type_.Get();
}
inline void Task::_internal_set_task_type(const std::string& value) {
  
  task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_task_type() {
  
  return task_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_task_type() {
  // @@protoc_insertion_point(field_release:flwr.proto.Task.task_type)
  return task_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_task_type(std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Task.task_type)
}

// .flwr.proto.RecordSet recordset = 9;
inline bool Task::_internal_has_recordset() const {
  return this != internal_default_instance() && recordset_ != nullptr;
}
inline bool Task::has_recordset() const {
  return _internal_has_recordset();
}
inline const ::flwr::proto::RecordSet& Task::_internal_recordset() const {
  const ::flwr::proto::RecordSet* p = recordset_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::RecordSet&>(
      ::flwr::proto::_RecordSet_default_instance_);
}
inline const ::flwr::proto::RecordSet& Task::recordset() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Task.recordset)
  return _internal_recordset();
}
inline void Task::unsafe_arena_set_allocated_recordset(
    ::flwr::proto::RecordSet* recordset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recordset_);
  }
  recordset_ = recordset;
  if (recordset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.Task.recordset)
}
inline ::flwr::proto::RecordSet* Task::release_recordset() {
  
  ::flwr::proto::RecordSet* temp = recordset_;
  recordset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::RecordSet* Task::unsafe_arena_release_recordset() {
  // @@protoc_insertion_point(field_release:flwr.proto.Task.recordset)
  
  ::flwr::proto::RecordSet* temp = recordset_;
  recordset_ = nullptr;
  return temp;
}
inline ::flwr::proto::RecordSet* Task::_internal_mutable_recordset() {
  
  if (recordset_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::RecordSet>(GetArenaForAllocation());
    recordset_ = p;
  }
  return recordset_;
}
inline ::flwr::proto::RecordSet* Task::mutable_recordset() {
  ::flwr::proto::RecordSet* _msg = _internal_mutable_recordset();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Task.recordset)
  return _msg;
}
inline void Task::set_allocated_recordset(::flwr::proto::RecordSet* recordset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recordset_);
  }
  if (recordset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recordset));
    if (message_arena != submessage_arena) {
      recordset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recordset, submessage_arena);
    }
    
  } else {
    
  }
  recordset_ = recordset;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Task.recordset)
}

// .flwr.proto.Error error = 10;
inline bool Task::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool Task::has_error() const {
  return _internal_has_error();
}
inline const ::flwr::proto::Error& Task::_internal_error() const {
  const ::flwr::proto::Error* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Error&>(
      ::flwr::proto::_Error_default_instance_);
}
inline const ::flwr::proto::Error& Task::error() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Task.error)
  return _internal_error();
}
inline void Task::unsafe_arena_set_allocated_error(
    ::flwr::proto::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.Task.error)
}
inline ::flwr::proto::Error* Task::release_error() {
  
  ::flwr::proto::Error* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Error* Task::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:flwr.proto.Task.error)
  
  ::flwr::proto::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::flwr::proto::Error* Task::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Error>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::flwr::proto::Error* Task::mutable_error() {
  ::flwr::proto::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Task.error)
  return _msg;
}
inline void Task::set_allocated_error(::flwr::proto::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Task.error)
}

// -------------------------------------------------------------------

// TaskIns

// string task_id = 1;
inline void TaskIns::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& TaskIns::task_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.TaskIns.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskIns::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.TaskIns.task_id)
}
inline std::string* TaskIns::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:flwr.proto.TaskIns.task_id)
  return _s;
}
inline const std::string& TaskIns::_internal_task_id() const {
  return task_id_.Get();
}
inline void TaskIns::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskIns::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskIns::release_task_id() {
  // @@protoc_insertion_point(field_release:flwr.proto.TaskIns.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskIns::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.TaskIns.task_id)
}

// string group_id = 2;
inline void TaskIns::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& TaskIns::group_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.TaskIns.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskIns::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.TaskIns.group_id)
}
inline std::string* TaskIns::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:flwr.proto.TaskIns.group_id)
  return _s;
}
inline const std::string& TaskIns::_internal_group_id() const {
  return group_id_.Get();
}
inline void TaskIns::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskIns::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskIns::release_group_id() {
  // @@protoc_insertion_point(field_release:flwr.proto.TaskIns.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskIns::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.TaskIns.group_id)
}

// sint64 run_id = 3;
inline void TaskIns::clear_run_id() {
  run_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskIns::_internal_run_id() const {
  return run_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskIns::run_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.TaskIns.run_id)
  return _internal_run_id();
}
inline void TaskIns::_internal_set_run_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  run_id_ = value;
}
inline void TaskIns::set_run_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_run_id(value);
  // @@protoc_insertion_point(field_set:flwr.proto.TaskIns.run_id)
}

// .flwr.proto.Task task = 4;
inline bool TaskIns::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool TaskIns::has_task() const {
  return _internal_has_task();
}
inline void TaskIns::clear_task() {
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::flwr::proto::Task& TaskIns::_internal_task() const {
  const ::flwr::proto::Task* p = task_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Task&>(
      ::flwr::proto::_Task_default_instance_);
}
inline const ::flwr::proto::Task& TaskIns::task() const {
  // @@protoc_insertion_point(field_get:flwr.proto.TaskIns.task)
  return _internal_task();
}
inline void TaskIns::unsafe_arena_set_allocated_task(
    ::flwr::proto::Task* task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_);
  }
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.TaskIns.task)
}
inline ::flwr::proto::Task* TaskIns::release_task() {
  
  ::flwr::proto::Task* temp = task_;
  task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Task* TaskIns::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_release:flwr.proto.TaskIns.task)
  
  ::flwr::proto::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::flwr::proto::Task* TaskIns::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Task>(GetArenaForAllocation());
    task_ = p;
  }
  return task_;
}
inline ::flwr::proto::Task* TaskIns::mutable_task() {
  ::flwr::proto::Task* _msg = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:flwr.proto.TaskIns.task)
  return _msg;
}
inline void TaskIns::set_allocated_task(::flwr::proto::Task* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::Task>::GetOwningArena(task);
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.TaskIns.task)
}

// -------------------------------------------------------------------

// TaskRes

// string task_id = 1;
inline void TaskRes::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& TaskRes::task_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.TaskRes.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRes::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.TaskRes.task_id)
}
inline std::string* TaskRes::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:flwr.proto.TaskRes.task_id)
  return _s;
}
inline const std::string& TaskRes::_internal_task_id() const {
  return task_id_.Get();
}
inline void TaskRes::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRes::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRes::release_task_id() {
  // @@protoc_insertion_point(field_release:flwr.proto.TaskRes.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRes::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.TaskRes.task_id)
}

// string group_id = 2;
inline void TaskRes::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& TaskRes::group_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.TaskRes.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRes::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.TaskRes.group_id)
}
inline std::string* TaskRes::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:flwr.proto.TaskRes.group_id)
  return _s;
}
inline const std::string& TaskRes::_internal_group_id() const {
  return group_id_.Get();
}
inline void TaskRes::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRes::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRes::release_group_id() {
  // @@protoc_insertion_point(field_release:flwr.proto.TaskRes.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRes::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.TaskRes.group_id)
}

// sint64 run_id = 3;
inline void TaskRes::clear_run_id() {
  run_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskRes::_internal_run_id() const {
  return run_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskRes::run_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.TaskRes.run_id)
  return _internal_run_id();
}
inline void TaskRes::_internal_set_run_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  run_id_ = value;
}
inline void TaskRes::set_run_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_run_id(value);
  // @@protoc_insertion_point(field_set:flwr.proto.TaskRes.run_id)
}

// .flwr.proto.Task task = 4;
inline bool TaskRes::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool TaskRes::has_task() const {
  return _internal_has_task();
}
inline void TaskRes::clear_task() {
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::flwr::proto::Task& TaskRes::_internal_task() const {
  const ::flwr::proto::Task* p = task_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Task&>(
      ::flwr::proto::_Task_default_instance_);
}
inline const ::flwr::proto::Task& TaskRes::task() const {
  // @@protoc_insertion_point(field_get:flwr.proto.TaskRes.task)
  return _internal_task();
}
inline void TaskRes::unsafe_arena_set_allocated_task(
    ::flwr::proto::Task* task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_);
  }
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.TaskRes.task)
}
inline ::flwr::proto::Task* TaskRes::release_task() {
  
  ::flwr::proto::Task* temp = task_;
  task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Task* TaskRes::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_release:flwr.proto.TaskRes.task)
  
  ::flwr::proto::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::flwr::proto::Task* TaskRes::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Task>(GetArenaForAllocation());
    task_ = p;
  }
  return task_;
}
inline ::flwr::proto::Task* TaskRes::mutable_task() {
  ::flwr::proto::Task* _msg = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:flwr.proto.TaskRes.task)
  return _msg;
}
inline void TaskRes::set_allocated_task(::flwr::proto::Task* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::Task>::GetOwningArena(task);
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.TaskRes.task)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flwr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2ftask_2eproto
