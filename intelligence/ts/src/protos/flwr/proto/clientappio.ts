// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/clientappio.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Fab } from "./fab";
import { Run } from "./run";
import { Context } from "./message";
import { Message } from "./message";
/**
 * @generated from protobuf message flwr.proto.ClientAppOutputStatus
 */
export interface ClientAppOutputStatus {
    /**
     * @generated from protobuf field: flwr.proto.ClientAppOutputCode code = 1;
     */
    code: ClientAppOutputCode;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message flwr.proto.GetTokenRequest
 */
export interface GetTokenRequest {
}
/**
 * @generated from protobuf message flwr.proto.GetTokenResponse
 */
export interface GetTokenResponse {
    /**
     * @generated from protobuf field: uint64 token = 1;
     */
    token: bigint;
}
/**
 * @generated from protobuf message flwr.proto.PullClientAppInputsRequest
 */
export interface PullClientAppInputsRequest {
    /**
     * @generated from protobuf field: uint64 token = 1;
     */
    token: bigint;
}
/**
 * @generated from protobuf message flwr.proto.PullClientAppInputsResponse
 */
export interface PullClientAppInputsResponse {
    /**
     * @generated from protobuf field: flwr.proto.Message message = 1;
     */
    message?: Message;
    /**
     * @generated from protobuf field: flwr.proto.Context context = 2;
     */
    context?: Context;
    /**
     * @generated from protobuf field: flwr.proto.Run run = 3;
     */
    run?: Run;
    /**
     * @generated from protobuf field: flwr.proto.Fab fab = 4;
     */
    fab?: Fab;
}
/**
 * @generated from protobuf message flwr.proto.PushClientAppOutputsRequest
 */
export interface PushClientAppOutputsRequest {
    /**
     * @generated from protobuf field: uint64 token = 1;
     */
    token: bigint;
    /**
     * @generated from protobuf field: flwr.proto.Message message = 2;
     */
    message?: Message;
    /**
     * @generated from protobuf field: flwr.proto.Context context = 3;
     */
    context?: Context;
}
/**
 * @generated from protobuf message flwr.proto.PushClientAppOutputsResponse
 */
export interface PushClientAppOutputsResponse {
    /**
     * @generated from protobuf field: flwr.proto.ClientAppOutputStatus status = 1;
     */
    status?: ClientAppOutputStatus;
}
/**
 * @generated from protobuf enum flwr.proto.ClientAppOutputCode
 */
export enum ClientAppOutputCode {
    /**
     * @generated from protobuf enum value: SUCCESS = 0;
     */
    SUCCESS = 0,
    /**
     * @generated from protobuf enum value: DEADLINE_EXCEEDED = 1;
     */
    DEADLINE_EXCEEDED = 1,
    /**
     * @generated from protobuf enum value: UNKNOWN_ERROR = 2;
     */
    UNKNOWN_ERROR = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientAppOutputStatus$Type extends MessageType<ClientAppOutputStatus> {
    constructor() {
        super("flwr.proto.ClientAppOutputStatus", [
            { no: 1, name: "code", kind: "enum", T: () => ["flwr.proto.ClientAppOutputCode", ClientAppOutputCode] },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientAppOutputStatus>): ClientAppOutputStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ClientAppOutputStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientAppOutputStatus): ClientAppOutputStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.ClientAppOutputCode code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientAppOutputStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.ClientAppOutputCode code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ClientAppOutputStatus
 */
export const ClientAppOutputStatus = new ClientAppOutputStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTokenRequest$Type extends MessageType<GetTokenRequest> {
    constructor() {
        super("flwr.proto.GetTokenRequest", []);
    }
    create(value?: PartialMessage<GetTokenRequest>): GetTokenRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTokenRequest): GetTokenRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.GetTokenRequest
 */
export const GetTokenRequest = new GetTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTokenResponse$Type extends MessageType<GetTokenResponse> {
    constructor() {
        super("flwr.proto.GetTokenResponse", [
            { no: 1, name: "token", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetTokenResponse>): GetTokenResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetTokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTokenResponse): GetTokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 token */ 1:
                    message.token = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 token = 1; */
        if (message.token !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.GetTokenResponse
 */
export const GetTokenResponse = new GetTokenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullClientAppInputsRequest$Type extends MessageType<PullClientAppInputsRequest> {
    constructor() {
        super("flwr.proto.PullClientAppInputsRequest", [
            { no: 1, name: "token", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PullClientAppInputsRequest>): PullClientAppInputsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = 0n;
        if (value !== undefined)
            reflectionMergePartial<PullClientAppInputsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PullClientAppInputsRequest): PullClientAppInputsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 token */ 1:
                    message.token = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PullClientAppInputsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 token = 1; */
        if (message.token !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PullClientAppInputsRequest
 */
export const PullClientAppInputsRequest = new PullClientAppInputsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullClientAppInputsResponse$Type extends MessageType<PullClientAppInputsResponse> {
    constructor() {
        super("flwr.proto.PullClientAppInputsResponse", [
            { no: 1, name: "message", kind: "message", T: () => Message },
            { no: 2, name: "context", kind: "message", T: () => Context },
            { no: 3, name: "run", kind: "message", T: () => Run },
            { no: 4, name: "fab", kind: "message", T: () => Fab }
        ]);
    }
    create(value?: PartialMessage<PullClientAppInputsResponse>): PullClientAppInputsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PullClientAppInputsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PullClientAppInputsResponse): PullClientAppInputsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Message message */ 1:
                    message.message = Message.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                case /* flwr.proto.Context context */ 2:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* flwr.proto.Run run */ 3:
                    message.run = Run.internalBinaryRead(reader, reader.uint32(), options, message.run);
                    break;
                case /* flwr.proto.Fab fab */ 4:
                    message.fab = Fab.internalBinaryRead(reader, reader.uint32(), options, message.fab);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PullClientAppInputsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Message message = 1; */
        if (message.message)
            Message.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.Context context = 2; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.Run run = 3; */
        if (message.run)
            Run.internalBinaryWrite(message.run, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.Fab fab = 4; */
        if (message.fab)
            Fab.internalBinaryWrite(message.fab, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PullClientAppInputsResponse
 */
export const PullClientAppInputsResponse = new PullClientAppInputsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushClientAppOutputsRequest$Type extends MessageType<PushClientAppOutputsRequest> {
    constructor() {
        super("flwr.proto.PushClientAppOutputsRequest", [
            { no: 1, name: "token", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "message", kind: "message", T: () => Message },
            { no: 3, name: "context", kind: "message", T: () => Context }
        ]);
    }
    create(value?: PartialMessage<PushClientAppOutputsRequest>): PushClientAppOutputsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = 0n;
        if (value !== undefined)
            reflectionMergePartial<PushClientAppOutputsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushClientAppOutputsRequest): PushClientAppOutputsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 token */ 1:
                    message.token = reader.uint64().toBigInt();
                    break;
                case /* flwr.proto.Message message */ 2:
                    message.message = Message.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                case /* flwr.proto.Context context */ 3:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushClientAppOutputsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 token = 1; */
        if (message.token !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.token);
        /* flwr.proto.Message message = 2; */
        if (message.message)
            Message.internalBinaryWrite(message.message, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.Context context = 3; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PushClientAppOutputsRequest
 */
export const PushClientAppOutputsRequest = new PushClientAppOutputsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushClientAppOutputsResponse$Type extends MessageType<PushClientAppOutputsResponse> {
    constructor() {
        super("flwr.proto.PushClientAppOutputsResponse", [
            { no: 1, name: "status", kind: "message", T: () => ClientAppOutputStatus }
        ]);
    }
    create(value?: PartialMessage<PushClientAppOutputsResponse>): PushClientAppOutputsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PushClientAppOutputsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushClientAppOutputsResponse): PushClientAppOutputsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.ClientAppOutputStatus status */ 1:
                    message.status = ClientAppOutputStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushClientAppOutputsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.ClientAppOutputStatus status = 1; */
        if (message.status)
            ClientAppOutputStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PushClientAppOutputsResponse
 */
export const PushClientAppOutputsResponse = new PushClientAppOutputsResponse$Type();
/**
 * @generated ServiceType for protobuf service flwr.proto.ClientAppIo
 */
export const ClientAppIo = new ServiceType("flwr.proto.ClientAppIo", [
    { name: "GetToken", options: {}, I: GetTokenRequest, O: GetTokenResponse },
    { name: "PullClientAppInputs", options: {}, I: PullClientAppInputsRequest, O: PullClientAppInputsResponse },
    { name: "PushClientAppOutputs", options: {}, I: PushClientAppOutputsRequest, O: PushClientAppOutputsResponse }
]);
