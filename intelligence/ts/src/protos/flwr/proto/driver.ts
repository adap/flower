// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/driver.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2022 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import { GetFabResponse } from "./fab";
import { GetFabRequest } from "./fab";
import { GetRunResponse } from "./run";
import { GetRunRequest } from "./run";
import { CreateRunResponse } from "./run";
import { CreateRunRequest } from "./run";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TaskRes } from "./task";
import { TaskIns } from "./task";
import { Node } from "./node";
/**
 * GetNodes messages
 *
 * @generated from protobuf message flwr.proto.GetNodesRequest
 */
export interface GetNodesRequest {
    /**
     * @generated from protobuf field: uint64 run_id = 1;
     */
    runId: bigint;
}
/**
 * @generated from protobuf message flwr.proto.GetNodesResponse
 */
export interface GetNodesResponse {
    /**
     * @generated from protobuf field: repeated flwr.proto.Node nodes = 1;
     */
    nodes: Node[];
}
/**
 * PushTaskIns messages
 *
 * @generated from protobuf message flwr.proto.PushTaskInsRequest
 */
export interface PushTaskInsRequest {
    /**
     * @generated from protobuf field: repeated flwr.proto.TaskIns task_ins_list = 1;
     */
    taskInsList: TaskIns[];
}
/**
 * @generated from protobuf message flwr.proto.PushTaskInsResponse
 */
export interface PushTaskInsResponse {
    /**
     * @generated from protobuf field: repeated string task_ids = 2;
     */
    taskIds: string[];
}
/**
 * PullTaskRes messages
 *
 * @generated from protobuf message flwr.proto.PullTaskResRequest
 */
export interface PullTaskResRequest {
    /**
     * @generated from protobuf field: flwr.proto.Node node = 1;
     */
    node?: Node;
    /**
     * @generated from protobuf field: repeated string task_ids = 2;
     */
    taskIds: string[];
}
/**
 * @generated from protobuf message flwr.proto.PullTaskResResponse
 */
export interface PullTaskResResponse {
    /**
     * @generated from protobuf field: repeated flwr.proto.TaskRes task_res_list = 1;
     */
    taskResList: TaskRes[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetNodesRequest$Type extends MessageType<GetNodesRequest> {
    constructor() {
        super("flwr.proto.GetNodesRequest", [
            { no: 1, name: "run_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetNodesRequest>): GetNodesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.runId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetNodesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNodesRequest): GetNodesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 run_id */ 1:
                    message.runId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNodesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 run_id = 1; */
        if (message.runId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.runId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.GetNodesRequest
 */
export const GetNodesRequest = new GetNodesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNodesResponse$Type extends MessageType<GetNodesResponse> {
    constructor() {
        super("flwr.proto.GetNodesResponse", [
            { no: 1, name: "nodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Node }
        ]);
    }
    create(value?: PartialMessage<GetNodesResponse>): GetNodesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodes = [];
        if (value !== undefined)
            reflectionMergePartial<GetNodesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNodesResponse): GetNodesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated flwr.proto.Node nodes */ 1:
                    message.nodes.push(Node.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNodesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated flwr.proto.Node nodes = 1; */
        for (let i = 0; i < message.nodes.length; i++)
            Node.internalBinaryWrite(message.nodes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.GetNodesResponse
 */
export const GetNodesResponse = new GetNodesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushTaskInsRequest$Type extends MessageType<PushTaskInsRequest> {
    constructor() {
        super("flwr.proto.PushTaskInsRequest", [
            { no: 1, name: "task_ins_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TaskIns }
        ]);
    }
    create(value?: PartialMessage<PushTaskInsRequest>): PushTaskInsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskInsList = [];
        if (value !== undefined)
            reflectionMergePartial<PushTaskInsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushTaskInsRequest): PushTaskInsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated flwr.proto.TaskIns task_ins_list */ 1:
                    message.taskInsList.push(TaskIns.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushTaskInsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated flwr.proto.TaskIns task_ins_list = 1; */
        for (let i = 0; i < message.taskInsList.length; i++)
            TaskIns.internalBinaryWrite(message.taskInsList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PushTaskInsRequest
 */
export const PushTaskInsRequest = new PushTaskInsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushTaskInsResponse$Type extends MessageType<PushTaskInsResponse> {
    constructor() {
        super("flwr.proto.PushTaskInsResponse", [
            { no: 2, name: "task_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PushTaskInsResponse>): PushTaskInsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskIds = [];
        if (value !== undefined)
            reflectionMergePartial<PushTaskInsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushTaskInsResponse): PushTaskInsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string task_ids */ 2:
                    message.taskIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushTaskInsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string task_ids = 2; */
        for (let i = 0; i < message.taskIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.taskIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PushTaskInsResponse
 */
export const PushTaskInsResponse = new PushTaskInsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullTaskResRequest$Type extends MessageType<PullTaskResRequest> {
    constructor() {
        super("flwr.proto.PullTaskResRequest", [
            { no: 1, name: "node", kind: "message", T: () => Node },
            { no: 2, name: "task_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PullTaskResRequest>): PullTaskResRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskIds = [];
        if (value !== undefined)
            reflectionMergePartial<PullTaskResRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PullTaskResRequest): PullTaskResRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* repeated string task_ids */ 2:
                    message.taskIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PullTaskResRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string task_ids = 2; */
        for (let i = 0; i < message.taskIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.taskIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PullTaskResRequest
 */
export const PullTaskResRequest = new PullTaskResRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullTaskResResponse$Type extends MessageType<PullTaskResResponse> {
    constructor() {
        super("flwr.proto.PullTaskResResponse", [
            { no: 1, name: "task_res_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TaskRes }
        ]);
    }
    create(value?: PartialMessage<PullTaskResResponse>): PullTaskResResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskResList = [];
        if (value !== undefined)
            reflectionMergePartial<PullTaskResResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PullTaskResResponse): PullTaskResResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated flwr.proto.TaskRes task_res_list */ 1:
                    message.taskResList.push(TaskRes.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PullTaskResResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated flwr.proto.TaskRes task_res_list = 1; */
        for (let i = 0; i < message.taskResList.length; i++)
            TaskRes.internalBinaryWrite(message.taskResList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PullTaskResResponse
 */
export const PullTaskResResponse = new PullTaskResResponse$Type();
/**
 * @generated ServiceType for protobuf service flwr.proto.Driver
 */
export const Driver = new ServiceType("flwr.proto.Driver", [
    { name: "CreateRun", options: {}, I: CreateRunRequest, O: CreateRunResponse },
    { name: "GetNodes", options: {}, I: GetNodesRequest, O: GetNodesResponse },
    { name: "PushTaskIns", options: {}, I: PushTaskInsRequest, O: PushTaskInsResponse },
    { name: "PullTaskRes", options: {}, I: PullTaskResRequest, O: PullTaskResResponse },
    { name: "GetRun", options: {}, I: GetRunRequest, O: GetRunResponse },
    { name: "GetFab", options: {}, I: GetFabRequest, O: GetFabResponse }
]);
