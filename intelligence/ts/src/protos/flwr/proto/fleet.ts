// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/fleet.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2022 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import { GetFabResponse } from "./fab";
import { GetFabRequest } from "./fab";
import { GetRunResponse } from "./run";
import { GetRunRequest } from "./run";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TaskRes } from "./task";
import { TaskIns } from "./task";
import { Node } from "./node";
/**
 * CreateNode messages
 *
 * @generated from protobuf message flwr.proto.CreateNodeRequest
 */
export interface CreateNodeRequest {
    /**
     * @generated from protobuf field: double ping_interval = 1;
     */
    pingInterval: number;
}
/**
 * @generated from protobuf message flwr.proto.CreateNodeResponse
 */
export interface CreateNodeResponse {
    /**
     * @generated from protobuf field: flwr.proto.Node node = 1;
     */
    node?: Node;
}
/**
 * DeleteNode messages
 *
 * @generated from protobuf message flwr.proto.DeleteNodeRequest
 */
export interface DeleteNodeRequest {
    /**
     * @generated from protobuf field: flwr.proto.Node node = 1;
     */
    node?: Node;
}
/**
 * @generated from protobuf message flwr.proto.DeleteNodeResponse
 */
export interface DeleteNodeResponse {
}
/**
 * Ping messages
 *
 * @generated from protobuf message flwr.proto.PingRequest
 */
export interface PingRequest {
    /**
     * @generated from protobuf field: flwr.proto.Node node = 1;
     */
    node?: Node;
    /**
     * @generated from protobuf field: double ping_interval = 2;
     */
    pingInterval: number;
}
/**
 * @generated from protobuf message flwr.proto.PingResponse
 */
export interface PingResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * PullTaskIns messages
 *
 * @generated from protobuf message flwr.proto.PullTaskInsRequest
 */
export interface PullTaskInsRequest {
    /**
     * @generated from protobuf field: flwr.proto.Node node = 1;
     */
    node?: Node;
    /**
     * @generated from protobuf field: repeated string task_ids = 2;
     */
    taskIds: string[];
}
/**
 * @generated from protobuf message flwr.proto.PullTaskInsResponse
 */
export interface PullTaskInsResponse {
    /**
     * @generated from protobuf field: flwr.proto.Reconnect reconnect = 1;
     */
    reconnect?: Reconnect;
    /**
     * @generated from protobuf field: repeated flwr.proto.TaskIns task_ins_list = 2;
     */
    taskInsList: TaskIns[];
}
/**
 * PushTaskRes messages
 *
 * @generated from protobuf message flwr.proto.PushTaskResRequest
 */
export interface PushTaskResRequest {
    /**
     * @generated from protobuf field: flwr.proto.Node node = 1;
     */
    node?: Node;
    /**
     * @generated from protobuf field: repeated flwr.proto.TaskRes task_res_list = 2;
     */
    taskResList: TaskRes[];
}
/**
 * @generated from protobuf message flwr.proto.PushTaskResResponse
 */
export interface PushTaskResResponse {
    /**
     * @generated from protobuf field: flwr.proto.Reconnect reconnect = 1;
     */
    reconnect?: Reconnect;
    /**
     * @generated from protobuf field: map<string, uint32> results = 2;
     */
    results: {
        [key: string]: number;
    };
}
/**
 * @generated from protobuf message flwr.proto.Reconnect
 */
export interface Reconnect {
    /**
     * @generated from protobuf field: uint64 reconnect = 1;
     */
    reconnect: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateNodeRequest$Type extends MessageType<CreateNodeRequest> {
    constructor() {
        super("flwr.proto.CreateNodeRequest", [
            { no: 1, name: "ping_interval", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<CreateNodeRequest>): CreateNodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pingInterval = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateNodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateNodeRequest): CreateNodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double ping_interval */ 1:
                    message.pingInterval = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateNodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double ping_interval = 1; */
        if (message.pingInterval !== 0)
            writer.tag(1, WireType.Bit64).double(message.pingInterval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.CreateNodeRequest
 */
export const CreateNodeRequest = new CreateNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateNodeResponse$Type extends MessageType<CreateNodeResponse> {
    constructor() {
        super("flwr.proto.CreateNodeResponse", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<CreateNodeResponse>): CreateNodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateNodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateNodeResponse): CreateNodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateNodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.CreateNodeResponse
 */
export const CreateNodeResponse = new CreateNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNodeRequest$Type extends MessageType<DeleteNodeRequest> {
    constructor() {
        super("flwr.proto.DeleteNodeRequest", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<DeleteNodeRequest>): DeleteNodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteNodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteNodeRequest): DeleteNodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteNodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.DeleteNodeRequest
 */
export const DeleteNodeRequest = new DeleteNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNodeResponse$Type extends MessageType<DeleteNodeResponse> {
    constructor() {
        super("flwr.proto.DeleteNodeResponse", []);
    }
    create(value?: PartialMessage<DeleteNodeResponse>): DeleteNodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteNodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteNodeResponse): DeleteNodeResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteNodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.DeleteNodeResponse
 */
export const DeleteNodeResponse = new DeleteNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingRequest$Type extends MessageType<PingRequest> {
    constructor() {
        super("flwr.proto.PingRequest", [
            { no: 1, name: "node", kind: "message", T: () => Node },
            { no: 2, name: "ping_interval", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<PingRequest>): PingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pingInterval = 0;
        if (value !== undefined)
            reflectionMergePartial<PingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingRequest): PingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* double ping_interval */ 2:
                    message.pingInterval = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* double ping_interval = 2; */
        if (message.pingInterval !== 0)
            writer.tag(2, WireType.Bit64).double(message.pingInterval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PingRequest
 */
export const PingRequest = new PingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingResponse$Type extends MessageType<PingResponse> {
    constructor() {
        super("flwr.proto.PingResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PingResponse>): PingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<PingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingResponse): PingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PingResponse
 */
export const PingResponse = new PingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullTaskInsRequest$Type extends MessageType<PullTaskInsRequest> {
    constructor() {
        super("flwr.proto.PullTaskInsRequest", [
            { no: 1, name: "node", kind: "message", T: () => Node },
            { no: 2, name: "task_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PullTaskInsRequest>): PullTaskInsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskIds = [];
        if (value !== undefined)
            reflectionMergePartial<PullTaskInsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PullTaskInsRequest): PullTaskInsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* repeated string task_ids */ 2:
                    message.taskIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PullTaskInsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string task_ids = 2; */
        for (let i = 0; i < message.taskIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.taskIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PullTaskInsRequest
 */
export const PullTaskInsRequest = new PullTaskInsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullTaskInsResponse$Type extends MessageType<PullTaskInsResponse> {
    constructor() {
        super("flwr.proto.PullTaskInsResponse", [
            { no: 1, name: "reconnect", kind: "message", T: () => Reconnect },
            { no: 2, name: "task_ins_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TaskIns }
        ]);
    }
    create(value?: PartialMessage<PullTaskInsResponse>): PullTaskInsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskInsList = [];
        if (value !== undefined)
            reflectionMergePartial<PullTaskInsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PullTaskInsResponse): PullTaskInsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Reconnect reconnect */ 1:
                    message.reconnect = Reconnect.internalBinaryRead(reader, reader.uint32(), options, message.reconnect);
                    break;
                case /* repeated flwr.proto.TaskIns task_ins_list */ 2:
                    message.taskInsList.push(TaskIns.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PullTaskInsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Reconnect reconnect = 1; */
        if (message.reconnect)
            Reconnect.internalBinaryWrite(message.reconnect, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated flwr.proto.TaskIns task_ins_list = 2; */
        for (let i = 0; i < message.taskInsList.length; i++)
            TaskIns.internalBinaryWrite(message.taskInsList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PullTaskInsResponse
 */
export const PullTaskInsResponse = new PullTaskInsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushTaskResRequest$Type extends MessageType<PushTaskResRequest> {
    constructor() {
        super("flwr.proto.PushTaskResRequest", [
            { no: 1, name: "node", kind: "message", T: () => Node },
            { no: 2, name: "task_res_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TaskRes }
        ]);
    }
    create(value?: PartialMessage<PushTaskResRequest>): PushTaskResRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskResList = [];
        if (value !== undefined)
            reflectionMergePartial<PushTaskResRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushTaskResRequest): PushTaskResRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* repeated flwr.proto.TaskRes task_res_list */ 2:
                    message.taskResList.push(TaskRes.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushTaskResRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated flwr.proto.TaskRes task_res_list = 2; */
        for (let i = 0; i < message.taskResList.length; i++)
            TaskRes.internalBinaryWrite(message.taskResList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PushTaskResRequest
 */
export const PushTaskResRequest = new PushTaskResRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushTaskResResponse$Type extends MessageType<PushTaskResResponse> {
    constructor() {
        super("flwr.proto.PushTaskResResponse", [
            { no: 1, name: "reconnect", kind: "message", T: () => Reconnect },
            { no: 2, name: "results", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<PushTaskResResponse>): PushTaskResResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.results = {};
        if (value !== undefined)
            reflectionMergePartial<PushTaskResResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushTaskResResponse): PushTaskResResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Reconnect reconnect */ 1:
                    message.reconnect = Reconnect.internalBinaryRead(reader, reader.uint32(), options, message.reconnect);
                    break;
                case /* map<string, uint32> results */ 2:
                    this.binaryReadMap2(message.results, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: PushTaskResResponse["results"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PushTaskResResponse["results"] | undefined, val: PushTaskResResponse["results"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.PushTaskResResponse.results");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: PushTaskResResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Reconnect reconnect = 1; */
        if (message.reconnect)
            Reconnect.internalBinaryWrite(message.reconnect, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, uint32> results = 2; */
        for (let k of globalThis.Object.keys(message.results))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).uint32(message.results[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.PushTaskResResponse
 */
export const PushTaskResResponse = new PushTaskResResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Reconnect$Type extends MessageType<Reconnect> {
    constructor() {
        super("flwr.proto.Reconnect", [
            { no: 1, name: "reconnect", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Reconnect>): Reconnect {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reconnect = 0n;
        if (value !== undefined)
            reflectionMergePartial<Reconnect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Reconnect): Reconnect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 reconnect */ 1:
                    message.reconnect = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Reconnect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 reconnect = 1; */
        if (message.reconnect !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.reconnect);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.Reconnect
 */
export const Reconnect = new Reconnect$Type();
/**
 * @generated ServiceType for protobuf service flwr.proto.Fleet
 */
export const Fleet = new ServiceType("flwr.proto.Fleet", [
    { name: "CreateNode", options: {}, I: CreateNodeRequest, O: CreateNodeResponse },
    { name: "DeleteNode", options: {}, I: DeleteNodeRequest, O: DeleteNodeResponse },
    { name: "Ping", options: {}, I: PingRequest, O: PingResponse },
    { name: "PullTaskIns", options: {}, I: PullTaskInsRequest, O: PullTaskInsResponse },
    { name: "PushTaskRes", options: {}, I: PushTaskResRequest, O: PushTaskResResponse },
    { name: "GetRun", options: {}, I: GetRunRequest, O: GetRunResponse },
    { name: "GetFab", options: {}, I: GetFabRequest, O: GetFabResponse }
]);
