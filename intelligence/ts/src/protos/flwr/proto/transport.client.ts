// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/transport.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2020 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { FlowerService } from "./transport";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ServerMessage } from "./transport";
import type { ClientMessage } from "./transport";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service flwr.proto.FlowerService
 */
export interface IFlowerServiceClient {
    /**
     * @generated from protobuf rpc: Join(stream flwr.proto.ClientMessage) returns (stream flwr.proto.ServerMessage);
     */
    join(options?: RpcOptions): DuplexStreamingCall<ClientMessage, ServerMessage>;
}
/**
 * @generated from protobuf service flwr.proto.FlowerService
 */
export class FlowerServiceClient implements IFlowerServiceClient, ServiceInfo {
    typeName = FlowerService.typeName;
    methods = FlowerService.methods;
    options = FlowerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Join(stream flwr.proto.ClientMessage) returns (stream flwr.proto.ServerMessage);
     */
    join(options?: RpcOptions): DuplexStreamingCall<ClientMessage, ServerMessage> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ClientMessage, ServerMessage>("duplex", this._transport, method, opt);
    }
}
