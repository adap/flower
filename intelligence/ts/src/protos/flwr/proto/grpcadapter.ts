// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/grpcadapter.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message flwr.proto.MessageContainer
 */
export interface MessageContainer {
    /**
     * @generated from protobuf field: map<string, string> metadata = 1;
     */
    metadata: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: string grpc_message_name = 2;
     */
    grpcMessageName: string;
    /**
     * @generated from protobuf field: bytes grpc_message_content = 3;
     */
    grpcMessageContent: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class MessageContainer$Type extends MessageType<MessageContainer> {
    constructor() {
        super("flwr.proto.MessageContainer", [
            { no: 1, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 2, name: "grpc_message_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "grpc_message_content", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<MessageContainer>): MessageContainer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.metadata = {};
        message.grpcMessageName = "";
        message.grpcMessageContent = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<MessageContainer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageContainer): MessageContainer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> metadata */ 1:
                    this.binaryReadMap1(message.metadata, reader, options);
                    break;
                case /* string grpc_message_name */ 2:
                    message.grpcMessageName = reader.string();
                    break;
                case /* bytes grpc_message_content */ 3:
                    message.grpcMessageContent = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: MessageContainer["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MessageContainer["metadata"] | undefined, val: MessageContainer["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.MessageContainer.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: MessageContainer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> metadata = 1; */
        for (let k of globalThis.Object.keys(message.metadata))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        /* string grpc_message_name = 2; */
        if (message.grpcMessageName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.grpcMessageName);
        /* bytes grpc_message_content = 3; */
        if (message.grpcMessageContent.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.grpcMessageContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.MessageContainer
 */
export const MessageContainer = new MessageContainer$Type();
/**
 * @generated ServiceType for protobuf service flwr.proto.GrpcAdapter
 */
export const GrpcAdapter = new ServiceType("flwr.proto.GrpcAdapter", [
    { name: "SendReceive", options: {}, I: MessageContainer, O: MessageContainer }
]);
