// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/run.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Node } from "./node";
import { Fab } from "./fab";
import { Scalar } from "./transport";
/**
 * @generated from protobuf message flwr.proto.Run
 */
export interface Run {
    /**
     * @generated from protobuf field: uint64 run_id = 1;
     */
    runId: bigint;
    /**
     * @generated from protobuf field: string fab_id = 2;
     */
    fabId: string;
    /**
     * @generated from protobuf field: string fab_version = 3;
     */
    fabVersion: string;
    /**
     * @generated from protobuf field: map<string, flwr.proto.Scalar> override_config = 4;
     */
    overrideConfig: {
        [key: string]: Scalar;
    };
    /**
     * @generated from protobuf field: string fab_hash = 5;
     */
    fabHash: string;
}
/**
 * @generated from protobuf message flwr.proto.RunStatus
 */
export interface RunStatus {
    /**
     * "starting", "running", "finished"
     *
     * @generated from protobuf field: string status = 1;
     */
    status: string;
    /**
     * "completed", "failed", "stopped" or "" (non-finished)
     *
     * @generated from protobuf field: string sub_status = 2;
     */
    subStatus: string;
    /**
     * failure details
     *
     * @generated from protobuf field: string details = 3;
     */
    details: string;
}
/**
 * CreateRun
 *
 * @generated from protobuf message flwr.proto.CreateRunRequest
 */
export interface CreateRunRequest {
    /**
     * @generated from protobuf field: string fab_id = 1;
     */
    fabId: string;
    /**
     * @generated from protobuf field: string fab_version = 2;
     */
    fabVersion: string;
    /**
     * @generated from protobuf field: map<string, flwr.proto.Scalar> override_config = 3;
     */
    overrideConfig: {
        [key: string]: Scalar;
    };
    /**
     * @generated from protobuf field: flwr.proto.Fab fab = 4;
     */
    fab?: Fab;
}
/**
 * @generated from protobuf message flwr.proto.CreateRunResponse
 */
export interface CreateRunResponse {
    /**
     * @generated from protobuf field: uint64 run_id = 1;
     */
    runId: bigint;
}
/**
 * GetRun
 *
 * @generated from protobuf message flwr.proto.GetRunRequest
 */
export interface GetRunRequest {
    /**
     * @generated from protobuf field: flwr.proto.Node node = 1;
     */
    node?: Node;
    /**
     * @generated from protobuf field: uint64 run_id = 2;
     */
    runId: bigint;
}
/**
 * @generated from protobuf message flwr.proto.GetRunResponse
 */
export interface GetRunResponse {
    /**
     * @generated from protobuf field: flwr.proto.Run run = 1;
     */
    run?: Run;
}
/**
 * UpdateRunStatus
 *
 * @generated from protobuf message flwr.proto.UpdateRunStatusRequest
 */
export interface UpdateRunStatusRequest {
    /**
     * @generated from protobuf field: uint64 run_id = 1;
     */
    runId: bigint;
    /**
     * @generated from protobuf field: flwr.proto.RunStatus run_status = 2;
     */
    runStatus?: RunStatus;
}
/**
 * @generated from protobuf message flwr.proto.UpdateRunStatusResponse
 */
export interface UpdateRunStatusResponse {
}
/**
 * GetRunStatus
 *
 * @generated from protobuf message flwr.proto.GetRunStatusRequest
 */
export interface GetRunStatusRequest {
    /**
     * @generated from protobuf field: flwr.proto.Node node = 1;
     */
    node?: Node;
    /**
     * @generated from protobuf field: repeated uint64 run_ids = 2;
     */
    runIds: bigint[];
}
/**
 * @generated from protobuf message flwr.proto.GetRunStatusResponse
 */
export interface GetRunStatusResponse {
    /**
     * @generated from protobuf field: map<uint64, flwr.proto.RunStatus> run_status_dict = 1;
     */
    runStatusDict: {
        [key: string]: RunStatus;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Run$Type extends MessageType<Run> {
    constructor() {
        super("flwr.proto.Run", [
            { no: 1, name: "run_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "fab_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fab_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "override_config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Scalar } },
            { no: 5, name: "fab_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Run>): Run {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.runId = 0n;
        message.fabId = "";
        message.fabVersion = "";
        message.overrideConfig = {};
        message.fabHash = "";
        if (value !== undefined)
            reflectionMergePartial<Run>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Run): Run {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 run_id */ 1:
                    message.runId = reader.uint64().toBigInt();
                    break;
                case /* string fab_id */ 2:
                    message.fabId = reader.string();
                    break;
                case /* string fab_version */ 3:
                    message.fabVersion = reader.string();
                    break;
                case /* map<string, flwr.proto.Scalar> override_config */ 4:
                    this.binaryReadMap4(message.overrideConfig, reader, options);
                    break;
                case /* string fab_hash */ 5:
                    message.fabHash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: Run["overrideConfig"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Run["overrideConfig"] | undefined, val: Run["overrideConfig"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.Run.override_config");
            }
        }
        map[key ?? ""] = val ?? Scalar.create();
    }
    internalBinaryWrite(message: Run, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 run_id = 1; */
        if (message.runId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.runId);
        /* string fab_id = 2; */
        if (message.fabId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fabId);
        /* string fab_version = 3; */
        if (message.fabVersion !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fabVersion);
        /* map<string, flwr.proto.Scalar> override_config = 4; */
        for (let k of globalThis.Object.keys(message.overrideConfig)) {
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Scalar.internalBinaryWrite(message.overrideConfig[k], writer, options);
            writer.join().join();
        }
        /* string fab_hash = 5; */
        if (message.fabHash !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fabHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.Run
 */
export const Run = new Run$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunStatus$Type extends MessageType<RunStatus> {
    constructor() {
        super("flwr.proto.RunStatus", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sub_status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "details", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RunStatus>): RunStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        message.subStatus = "";
        message.details = "";
        if (value !== undefined)
            reflectionMergePartial<RunStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunStatus): RunStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                case /* string sub_status */ 2:
                    message.subStatus = reader.string();
                    break;
                case /* string details */ 3:
                    message.details = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        /* string sub_status = 2; */
        if (message.subStatus !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.subStatus);
        /* string details = 3; */
        if (message.details !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.details);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.RunStatus
 */
export const RunStatus = new RunStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRunRequest$Type extends MessageType<CreateRunRequest> {
    constructor() {
        super("flwr.proto.CreateRunRequest", [
            { no: 1, name: "fab_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fab_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "override_config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Scalar } },
            { no: 4, name: "fab", kind: "message", T: () => Fab }
        ]);
    }
    create(value?: PartialMessage<CreateRunRequest>): CreateRunRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fabId = "";
        message.fabVersion = "";
        message.overrideConfig = {};
        if (value !== undefined)
            reflectionMergePartial<CreateRunRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRunRequest): CreateRunRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fab_id */ 1:
                    message.fabId = reader.string();
                    break;
                case /* string fab_version */ 2:
                    message.fabVersion = reader.string();
                    break;
                case /* map<string, flwr.proto.Scalar> override_config */ 3:
                    this.binaryReadMap3(message.overrideConfig, reader, options);
                    break;
                case /* flwr.proto.Fab fab */ 4:
                    message.fab = Fab.internalBinaryRead(reader, reader.uint32(), options, message.fab);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: CreateRunRequest["overrideConfig"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CreateRunRequest["overrideConfig"] | undefined, val: CreateRunRequest["overrideConfig"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.CreateRunRequest.override_config");
            }
        }
        map[key ?? ""] = val ?? Scalar.create();
    }
    internalBinaryWrite(message: CreateRunRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fab_id = 1; */
        if (message.fabId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fabId);
        /* string fab_version = 2; */
        if (message.fabVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fabVersion);
        /* map<string, flwr.proto.Scalar> override_config = 3; */
        for (let k of globalThis.Object.keys(message.overrideConfig)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Scalar.internalBinaryWrite(message.overrideConfig[k], writer, options);
            writer.join().join();
        }
        /* flwr.proto.Fab fab = 4; */
        if (message.fab)
            Fab.internalBinaryWrite(message.fab, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.CreateRunRequest
 */
export const CreateRunRequest = new CreateRunRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRunResponse$Type extends MessageType<CreateRunResponse> {
    constructor() {
        super("flwr.proto.CreateRunResponse", [
            { no: 1, name: "run_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CreateRunResponse>): CreateRunResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.runId = 0n;
        if (value !== undefined)
            reflectionMergePartial<CreateRunResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRunResponse): CreateRunResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 run_id */ 1:
                    message.runId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRunResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 run_id = 1; */
        if (message.runId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.runId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.CreateRunResponse
 */
export const CreateRunResponse = new CreateRunResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRunRequest$Type extends MessageType<GetRunRequest> {
    constructor() {
        super("flwr.proto.GetRunRequest", [
            { no: 1, name: "node", kind: "message", T: () => Node },
            { no: 2, name: "run_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetRunRequest>): GetRunRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.runId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetRunRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRunRequest): GetRunRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* uint64 run_id */ 2:
                    message.runId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRunRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 run_id = 2; */
        if (message.runId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.runId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.GetRunRequest
 */
export const GetRunRequest = new GetRunRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRunResponse$Type extends MessageType<GetRunResponse> {
    constructor() {
        super("flwr.proto.GetRunResponse", [
            { no: 1, name: "run", kind: "message", T: () => Run }
        ]);
    }
    create(value?: PartialMessage<GetRunResponse>): GetRunResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetRunResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRunResponse): GetRunResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Run run */ 1:
                    message.run = Run.internalBinaryRead(reader, reader.uint32(), options, message.run);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRunResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Run run = 1; */
        if (message.run)
            Run.internalBinaryWrite(message.run, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.GetRunResponse
 */
export const GetRunResponse = new GetRunResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRunStatusRequest$Type extends MessageType<UpdateRunStatusRequest> {
    constructor() {
        super("flwr.proto.UpdateRunStatusRequest", [
            { no: 1, name: "run_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "run_status", kind: "message", T: () => RunStatus }
        ]);
    }
    create(value?: PartialMessage<UpdateRunStatusRequest>): UpdateRunStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.runId = 0n;
        if (value !== undefined)
            reflectionMergePartial<UpdateRunStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRunStatusRequest): UpdateRunStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 run_id */ 1:
                    message.runId = reader.uint64().toBigInt();
                    break;
                case /* flwr.proto.RunStatus run_status */ 2:
                    message.runStatus = RunStatus.internalBinaryRead(reader, reader.uint32(), options, message.runStatus);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRunStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 run_id = 1; */
        if (message.runId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.runId);
        /* flwr.proto.RunStatus run_status = 2; */
        if (message.runStatus)
            RunStatus.internalBinaryWrite(message.runStatus, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.UpdateRunStatusRequest
 */
export const UpdateRunStatusRequest = new UpdateRunStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRunStatusResponse$Type extends MessageType<UpdateRunStatusResponse> {
    constructor() {
        super("flwr.proto.UpdateRunStatusResponse", []);
    }
    create(value?: PartialMessage<UpdateRunStatusResponse>): UpdateRunStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateRunStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRunStatusResponse): UpdateRunStatusResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateRunStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.UpdateRunStatusResponse
 */
export const UpdateRunStatusResponse = new UpdateRunStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRunStatusRequest$Type extends MessageType<GetRunStatusRequest> {
    constructor() {
        super("flwr.proto.GetRunStatusRequest", [
            { no: 1, name: "node", kind: "message", T: () => Node },
            { no: 2, name: "run_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetRunStatusRequest>): GetRunStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.runIds = [];
        if (value !== undefined)
            reflectionMergePartial<GetRunStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRunStatusRequest): GetRunStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* repeated uint64 run_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.runIds.push(reader.uint64().toBigInt());
                    else
                        message.runIds.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRunStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint64 run_ids = 2; */
        if (message.runIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.runIds.length; i++)
                writer.uint64(message.runIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.GetRunStatusRequest
 */
export const GetRunStatusRequest = new GetRunStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRunStatusResponse$Type extends MessageType<GetRunStatusResponse> {
    constructor() {
        super("flwr.proto.GetRunStatusResponse", [
            { no: 1, name: "run_status_dict", kind: "map", K: 4 /*ScalarType.UINT64*/, V: { kind: "message", T: () => RunStatus } }
        ]);
    }
    create(value?: PartialMessage<GetRunStatusResponse>): GetRunStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.runStatusDict = {};
        if (value !== undefined)
            reflectionMergePartial<GetRunStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRunStatusResponse): GetRunStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint64, flwr.proto.RunStatus> run_status_dict */ 1:
                    this.binaryReadMap1(message.runStatusDict, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: GetRunStatusResponse["runStatusDict"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetRunStatusResponse["runStatusDict"] | undefined, val: GetRunStatusResponse["runStatusDict"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint64().toString();
                    break;
                case 2:
                    val = RunStatus.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.GetRunStatusResponse.run_status_dict");
            }
        }
        map[key ?? "0"] = val ?? RunStatus.create();
    }
    internalBinaryWrite(message: GetRunStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint64, flwr.proto.RunStatus> run_status_dict = 1; */
        for (let k of globalThis.Object.keys(message.runStatusDict)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint64(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            RunStatus.internalBinaryWrite(message.runStatusDict[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.GetRunStatusResponse
 */
export const GetRunStatusResponse = new GetRunStatusResponse$Type();
