// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/exec.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Scalar } from "./transport";
import { Fab } from "./fab";
/**
 * @generated from protobuf message flwr.proto.StartRunRequest
 */
export interface StartRunRequest {
    /**
     * @generated from protobuf field: flwr.proto.Fab fab = 1;
     */
    fab?: Fab;
    /**
     * @generated from protobuf field: map<string, flwr.proto.Scalar> override_config = 2;
     */
    overrideConfig: {
        [key: string]: Scalar;
    };
    /**
     * @generated from protobuf field: map<string, flwr.proto.Scalar> federation_config = 3;
     */
    federationConfig: {
        [key: string]: Scalar;
    };
}
/**
 * @generated from protobuf message flwr.proto.StartRunResponse
 */
export interface StartRunResponse {
    /**
     * @generated from protobuf field: uint64 run_id = 1;
     */
    runId: bigint;
}
/**
 * @generated from protobuf message flwr.proto.StreamLogsRequest
 */
export interface StreamLogsRequest {
    /**
     * @generated from protobuf field: uint64 run_id = 1;
     */
    runId: bigint;
}
/**
 * @generated from protobuf message flwr.proto.StreamLogsResponse
 */
export interface StreamLogsResponse {
    /**
     * @generated from protobuf field: string log_output = 1;
     */
    logOutput: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class StartRunRequest$Type extends MessageType<StartRunRequest> {
    constructor() {
        super("flwr.proto.StartRunRequest", [
            { no: 1, name: "fab", kind: "message", T: () => Fab },
            { no: 2, name: "override_config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Scalar } },
            { no: 3, name: "federation_config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Scalar } }
        ]);
    }
    create(value?: PartialMessage<StartRunRequest>): StartRunRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.overrideConfig = {};
        message.federationConfig = {};
        if (value !== undefined)
            reflectionMergePartial<StartRunRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRunRequest): StartRunRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Fab fab */ 1:
                    message.fab = Fab.internalBinaryRead(reader, reader.uint32(), options, message.fab);
                    break;
                case /* map<string, flwr.proto.Scalar> override_config */ 2:
                    this.binaryReadMap2(message.overrideConfig, reader, options);
                    break;
                case /* map<string, flwr.proto.Scalar> federation_config */ 3:
                    this.binaryReadMap3(message.federationConfig, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: StartRunRequest["overrideConfig"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof StartRunRequest["overrideConfig"] | undefined, val: StartRunRequest["overrideConfig"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.StartRunRequest.override_config");
            }
        }
        map[key ?? ""] = val ?? Scalar.create();
    }
    private binaryReadMap3(map: StartRunRequest["federationConfig"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof StartRunRequest["federationConfig"] | undefined, val: StartRunRequest["federationConfig"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Scalar.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.StartRunRequest.federation_config");
            }
        }
        map[key ?? ""] = val ?? Scalar.create();
    }
    internalBinaryWrite(message: StartRunRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Fab fab = 1; */
        if (message.fab)
            Fab.internalBinaryWrite(message.fab, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, flwr.proto.Scalar> override_config = 2; */
        for (let k of globalThis.Object.keys(message.overrideConfig)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Scalar.internalBinaryWrite(message.overrideConfig[k], writer, options);
            writer.join().join();
        }
        /* map<string, flwr.proto.Scalar> federation_config = 3; */
        for (let k of globalThis.Object.keys(message.federationConfig)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Scalar.internalBinaryWrite(message.federationConfig[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.StartRunRequest
 */
export const StartRunRequest = new StartRunRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRunResponse$Type extends MessageType<StartRunResponse> {
    constructor() {
        super("flwr.proto.StartRunResponse", [
            { no: 1, name: "run_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<StartRunResponse>): StartRunResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.runId = 0n;
        if (value !== undefined)
            reflectionMergePartial<StartRunResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRunResponse): StartRunResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 run_id */ 1:
                    message.runId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRunResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 run_id = 1; */
        if (message.runId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.runId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.StartRunResponse
 */
export const StartRunResponse = new StartRunResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamLogsRequest$Type extends MessageType<StreamLogsRequest> {
    constructor() {
        super("flwr.proto.StreamLogsRequest", [
            { no: 1, name: "run_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<StreamLogsRequest>): StreamLogsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.runId = 0n;
        if (value !== undefined)
            reflectionMergePartial<StreamLogsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamLogsRequest): StreamLogsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 run_id */ 1:
                    message.runId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamLogsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 run_id = 1; */
        if (message.runId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.runId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.StreamLogsRequest
 */
export const StreamLogsRequest = new StreamLogsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamLogsResponse$Type extends MessageType<StreamLogsResponse> {
    constructor() {
        super("flwr.proto.StreamLogsResponse", [
            { no: 1, name: "log_output", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamLogsResponse>): StreamLogsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.logOutput = "";
        if (value !== undefined)
            reflectionMergePartial<StreamLogsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamLogsResponse): StreamLogsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string log_output */ 1:
                    message.logOutput = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamLogsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string log_output = 1; */
        if (message.logOutput !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.logOutput);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.StreamLogsResponse
 */
export const StreamLogsResponse = new StreamLogsResponse$Type();
/**
 * @generated ServiceType for protobuf service flwr.proto.Exec
 */
export const Exec = new ServiceType("flwr.proto.Exec", [
    { name: "StartRun", options: {}, I: StartRunRequest, O: StartRunResponse },
    { name: "StreamLogs", serverStreaming: true, options: {}, I: StreamLogsRequest, O: StreamLogsResponse }
]);
