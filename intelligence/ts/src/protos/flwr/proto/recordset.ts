// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/recordset.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message flwr.proto.DoubleList
 */
export interface DoubleList {
    /**
     * @generated from protobuf field: repeated double vals = 1;
     */
    vals: number[];
}
/**
 * @generated from protobuf message flwr.proto.SintList
 */
export interface SintList {
    /**
     * @generated from protobuf field: repeated sint64 vals = 1;
     */
    vals: bigint[];
}
/**
 * @generated from protobuf message flwr.proto.UintList
 */
export interface UintList {
    /**
     * @generated from protobuf field: repeated uint64 vals = 1;
     */
    vals: bigint[];
}
/**
 * @generated from protobuf message flwr.proto.BoolList
 */
export interface BoolList {
    /**
     * @generated from protobuf field: repeated bool vals = 1;
     */
    vals: boolean[];
}
/**
 * @generated from protobuf message flwr.proto.StringList
 */
export interface StringList {
    /**
     * @generated from protobuf field: repeated string vals = 1;
     */
    vals: string[];
}
/**
 * @generated from protobuf message flwr.proto.BytesList
 */
export interface BytesList {
    /**
     * @generated from protobuf field: repeated bytes vals = 1;
     */
    vals: Uint8Array[];
}
/**
 * @generated from protobuf message flwr.proto.Array
 */
export interface Array$ {
    /**
     * @generated from protobuf field: string dtype = 1;
     */
    dtype: string;
    /**
     * @generated from protobuf field: repeated int32 shape = 2;
     */
    shape: number[];
    /**
     * @generated from protobuf field: string stype = 3;
     */
    stype: string;
    /**
     * @generated from protobuf field: bytes data = 4;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message flwr.proto.MetricsRecordValue
 */
export interface MetricsRecordValue {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "double";
        /**
         * Single element
         *
         * @generated from protobuf field: double double = 1;
         */
        double: number;
    } | {
        oneofKind: "sint64";
        /**
         * @generated from protobuf field: sint64 sint64 = 2;
         */
        sint64: bigint;
    } | {
        oneofKind: "uint64";
        /**
         * @generated from protobuf field: uint64 uint64 = 3;
         */
        uint64: bigint;
    } | {
        oneofKind: "doubleList";
        /**
         * List types
         *
         * @generated from protobuf field: flwr.proto.DoubleList double_list = 21;
         */
        doubleList: DoubleList;
    } | {
        oneofKind: "sintList";
        /**
         * @generated from protobuf field: flwr.proto.SintList sint_list = 22;
         */
        sintList: SintList;
    } | {
        oneofKind: "uintList";
        /**
         * @generated from protobuf field: flwr.proto.UintList uint_list = 23;
         */
        uintList: UintList;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message flwr.proto.ConfigsRecordValue
 */
export interface ConfigsRecordValue {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "double";
        /**
         * Single element
         *
         * @generated from protobuf field: double double = 1;
         */
        double: number;
    } | {
        oneofKind: "sint64";
        /**
         * @generated from protobuf field: sint64 sint64 = 2;
         */
        sint64: bigint;
    } | {
        oneofKind: "uint64";
        /**
         * @generated from protobuf field: uint64 uint64 = 3;
         */
        uint64: bigint;
    } | {
        oneofKind: "bool";
        /**
         * @generated from protobuf field: bool bool = 4;
         */
        bool: boolean;
    } | {
        oneofKind: "string";
        /**
         * @generated from protobuf field: string string = 5;
         */
        string: string;
    } | {
        oneofKind: "bytes";
        /**
         * @generated from protobuf field: bytes bytes = 6;
         */
        bytes: Uint8Array;
    } | {
        oneofKind: "doubleList";
        /**
         * List types
         *
         * @generated from protobuf field: flwr.proto.DoubleList double_list = 21;
         */
        doubleList: DoubleList;
    } | {
        oneofKind: "sintList";
        /**
         * @generated from protobuf field: flwr.proto.SintList sint_list = 22;
         */
        sintList: SintList;
    } | {
        oneofKind: "uintList";
        /**
         * @generated from protobuf field: flwr.proto.UintList uint_list = 23;
         */
        uintList: UintList;
    } | {
        oneofKind: "boolList";
        /**
         * @generated from protobuf field: flwr.proto.BoolList bool_list = 24;
         */
        boolList: BoolList;
    } | {
        oneofKind: "stringList";
        /**
         * @generated from protobuf field: flwr.proto.StringList string_list = 25;
         */
        stringList: StringList;
    } | {
        oneofKind: "bytesList";
        /**
         * @generated from protobuf field: flwr.proto.BytesList bytes_list = 26;
         */
        bytesList: BytesList;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message flwr.proto.ParametersRecord
 */
export interface ParametersRecord {
    /**
     * @generated from protobuf field: repeated string data_keys = 1;
     */
    dataKeys: string[];
    /**
     * @generated from protobuf field: repeated flwr.proto.Array data_values = 2;
     */
    dataValues: Array$[];
}
/**
 * @generated from protobuf message flwr.proto.MetricsRecord
 */
export interface MetricsRecord {
    /**
     * @generated from protobuf field: map<string, flwr.proto.MetricsRecordValue> data = 1;
     */
    data: {
        [key: string]: MetricsRecordValue;
    };
}
/**
 * @generated from protobuf message flwr.proto.ConfigsRecord
 */
export interface ConfigsRecord {
    /**
     * @generated from protobuf field: map<string, flwr.proto.ConfigsRecordValue> data = 1;
     */
    data: {
        [key: string]: ConfigsRecordValue;
    };
}
/**
 * @generated from protobuf message flwr.proto.RecordSet
 */
export interface RecordSet {
    /**
     * @generated from protobuf field: map<string, flwr.proto.ParametersRecord> parameters = 1;
     */
    parameters: {
        [key: string]: ParametersRecord;
    };
    /**
     * @generated from protobuf field: map<string, flwr.proto.MetricsRecord> metrics = 2;
     */
    metrics: {
        [key: string]: MetricsRecord;
    };
    /**
     * @generated from protobuf field: map<string, flwr.proto.ConfigsRecord> configs = 3;
     */
    configs: {
        [key: string]: ConfigsRecord;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class DoubleList$Type extends MessageType<DoubleList> {
    constructor() {
        super("flwr.proto.DoubleList", [
            { no: 1, name: "vals", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<DoubleList>): DoubleList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vals = [];
        if (value !== undefined)
            reflectionMergePartial<DoubleList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoubleList): DoubleList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated double vals */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.vals.push(reader.double());
                    else
                        message.vals.push(reader.double());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoubleList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated double vals = 1; */
        if (message.vals.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.vals.length; i++)
                writer.double(message.vals[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.DoubleList
 */
export const DoubleList = new DoubleList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SintList$Type extends MessageType<SintList> {
    constructor() {
        super("flwr.proto.SintList", [
            { no: 1, name: "vals", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 18 /*ScalarType.SINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SintList>): SintList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vals = [];
        if (value !== undefined)
            reflectionMergePartial<SintList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SintList): SintList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sint64 vals */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.vals.push(reader.sint64().toBigInt());
                    else
                        message.vals.push(reader.sint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SintList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sint64 vals = 1; */
        if (message.vals.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.vals.length; i++)
                writer.sint64(message.vals[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.SintList
 */
export const SintList = new SintList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UintList$Type extends MessageType<UintList> {
    constructor() {
        super("flwr.proto.UintList", [
            { no: 1, name: "vals", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UintList>): UintList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vals = [];
        if (value !== undefined)
            reflectionMergePartial<UintList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UintList): UintList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 vals */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.vals.push(reader.uint64().toBigInt());
                    else
                        message.vals.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UintList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 vals = 1; */
        if (message.vals.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.vals.length; i++)
                writer.uint64(message.vals[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.UintList
 */
export const UintList = new UintList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BoolList$Type extends MessageType<BoolList> {
    constructor() {
        super("flwr.proto.BoolList", [
            { no: 1, name: "vals", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BoolList>): BoolList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vals = [];
        if (value !== undefined)
            reflectionMergePartial<BoolList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BoolList): BoolList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bool vals */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.vals.push(reader.bool());
                    else
                        message.vals.push(reader.bool());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BoolList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bool vals = 1; */
        if (message.vals.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.vals.length; i++)
                writer.bool(message.vals[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.BoolList
 */
export const BoolList = new BoolList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringList$Type extends MessageType<StringList> {
    constructor() {
        super("flwr.proto.StringList", [
            { no: 1, name: "vals", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StringList>): StringList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vals = [];
        if (value !== undefined)
            reflectionMergePartial<StringList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringList): StringList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string vals */ 1:
                    message.vals.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string vals = 1; */
        for (let i = 0; i < message.vals.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.vals[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.StringList
 */
export const StringList = new StringList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BytesList$Type extends MessageType<BytesList> {
    constructor() {
        super("flwr.proto.BytesList", [
            { no: 1, name: "vals", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<BytesList>): BytesList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vals = [];
        if (value !== undefined)
            reflectionMergePartial<BytesList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BytesList): BytesList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes vals */ 1:
                    message.vals.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BytesList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes vals = 1; */
        for (let i = 0; i < message.vals.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.vals[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.BytesList
 */
export const BytesList = new BytesList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Array$$Type extends MessageType<Array$> {
    constructor() {
        super("flwr.proto.Array", [
            { no: 1, name: "dtype", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "shape", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "stype", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Array$>): Array$ {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dtype = "";
        message.shape = [];
        message.stype = "";
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<Array$>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Array$): Array$ {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dtype */ 1:
                    message.dtype = reader.string();
                    break;
                case /* repeated int32 shape */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.shape.push(reader.int32());
                    else
                        message.shape.push(reader.int32());
                    break;
                case /* string stype */ 3:
                    message.stype = reader.string();
                    break;
                case /* bytes data */ 4:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Array$, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dtype = 1; */
        if (message.dtype !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dtype);
        /* repeated int32 shape = 2; */
        if (message.shape.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.shape.length; i++)
                writer.int32(message.shape[i]);
            writer.join();
        }
        /* string stype = 3; */
        if (message.stype !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.stype);
        /* bytes data = 4; */
        if (message.data.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.Array
 */
export const Array$ = new Array$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetricsRecordValue$Type extends MessageType<MetricsRecordValue> {
    constructor() {
        super("flwr.proto.MetricsRecordValue", [
            { no: 1, name: "double", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "sint64", kind: "scalar", oneof: "value", T: 18 /*ScalarType.SINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "uint64", kind: "scalar", oneof: "value", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "double_list", kind: "message", oneof: "value", T: () => DoubleList },
            { no: 22, name: "sint_list", kind: "message", oneof: "value", T: () => SintList },
            { no: 23, name: "uint_list", kind: "message", oneof: "value", T: () => UintList }
        ]);
    }
    create(value?: PartialMessage<MetricsRecordValue>): MetricsRecordValue {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MetricsRecordValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetricsRecordValue): MetricsRecordValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double double */ 1:
                    message.value = {
                        oneofKind: "double",
                        double: reader.double()
                    };
                    break;
                case /* sint64 sint64 */ 2:
                    message.value = {
                        oneofKind: "sint64",
                        sint64: reader.sint64().toBigInt()
                    };
                    break;
                case /* uint64 uint64 */ 3:
                    message.value = {
                        oneofKind: "uint64",
                        uint64: reader.uint64().toBigInt()
                    };
                    break;
                case /* flwr.proto.DoubleList double_list */ 21:
                    message.value = {
                        oneofKind: "doubleList",
                        doubleList: DoubleList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).doubleList)
                    };
                    break;
                case /* flwr.proto.SintList sint_list */ 22:
                    message.value = {
                        oneofKind: "sintList",
                        sintList: SintList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).sintList)
                    };
                    break;
                case /* flwr.proto.UintList uint_list */ 23:
                    message.value = {
                        oneofKind: "uintList",
                        uintList: UintList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).uintList)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetricsRecordValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double double = 1; */
        if (message.value.oneofKind === "double")
            writer.tag(1, WireType.Bit64).double(message.value.double);
        /* sint64 sint64 = 2; */
        if (message.value.oneofKind === "sint64")
            writer.tag(2, WireType.Varint).sint64(message.value.sint64);
        /* uint64 uint64 = 3; */
        if (message.value.oneofKind === "uint64")
            writer.tag(3, WireType.Varint).uint64(message.value.uint64);
        /* flwr.proto.DoubleList double_list = 21; */
        if (message.value.oneofKind === "doubleList")
            DoubleList.internalBinaryWrite(message.value.doubleList, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.SintList sint_list = 22; */
        if (message.value.oneofKind === "sintList")
            SintList.internalBinaryWrite(message.value.sintList, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.UintList uint_list = 23; */
        if (message.value.oneofKind === "uintList")
            UintList.internalBinaryWrite(message.value.uintList, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.MetricsRecordValue
 */
export const MetricsRecordValue = new MetricsRecordValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfigsRecordValue$Type extends MessageType<ConfigsRecordValue> {
    constructor() {
        super("flwr.proto.ConfigsRecordValue", [
            { no: 1, name: "double", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "sint64", kind: "scalar", oneof: "value", T: 18 /*ScalarType.SINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "uint64", kind: "scalar", oneof: "value", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "bool", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "string", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "bytes", kind: "scalar", oneof: "value", T: 12 /*ScalarType.BYTES*/ },
            { no: 21, name: "double_list", kind: "message", oneof: "value", T: () => DoubleList },
            { no: 22, name: "sint_list", kind: "message", oneof: "value", T: () => SintList },
            { no: 23, name: "uint_list", kind: "message", oneof: "value", T: () => UintList },
            { no: 24, name: "bool_list", kind: "message", oneof: "value", T: () => BoolList },
            { no: 25, name: "string_list", kind: "message", oneof: "value", T: () => StringList },
            { no: 26, name: "bytes_list", kind: "message", oneof: "value", T: () => BytesList }
        ]);
    }
    create(value?: PartialMessage<ConfigsRecordValue>): ConfigsRecordValue {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ConfigsRecordValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfigsRecordValue): ConfigsRecordValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double double */ 1:
                    message.value = {
                        oneofKind: "double",
                        double: reader.double()
                    };
                    break;
                case /* sint64 sint64 */ 2:
                    message.value = {
                        oneofKind: "sint64",
                        sint64: reader.sint64().toBigInt()
                    };
                    break;
                case /* uint64 uint64 */ 3:
                    message.value = {
                        oneofKind: "uint64",
                        uint64: reader.uint64().toBigInt()
                    };
                    break;
                case /* bool bool */ 4:
                    message.value = {
                        oneofKind: "bool",
                        bool: reader.bool()
                    };
                    break;
                case /* string string */ 5:
                    message.value = {
                        oneofKind: "string",
                        string: reader.string()
                    };
                    break;
                case /* bytes bytes */ 6:
                    message.value = {
                        oneofKind: "bytes",
                        bytes: reader.bytes()
                    };
                    break;
                case /* flwr.proto.DoubleList double_list */ 21:
                    message.value = {
                        oneofKind: "doubleList",
                        doubleList: DoubleList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).doubleList)
                    };
                    break;
                case /* flwr.proto.SintList sint_list */ 22:
                    message.value = {
                        oneofKind: "sintList",
                        sintList: SintList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).sintList)
                    };
                    break;
                case /* flwr.proto.UintList uint_list */ 23:
                    message.value = {
                        oneofKind: "uintList",
                        uintList: UintList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).uintList)
                    };
                    break;
                case /* flwr.proto.BoolList bool_list */ 24:
                    message.value = {
                        oneofKind: "boolList",
                        boolList: BoolList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).boolList)
                    };
                    break;
                case /* flwr.proto.StringList string_list */ 25:
                    message.value = {
                        oneofKind: "stringList",
                        stringList: StringList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).stringList)
                    };
                    break;
                case /* flwr.proto.BytesList bytes_list */ 26:
                    message.value = {
                        oneofKind: "bytesList",
                        bytesList: BytesList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).bytesList)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConfigsRecordValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double double = 1; */
        if (message.value.oneofKind === "double")
            writer.tag(1, WireType.Bit64).double(message.value.double);
        /* sint64 sint64 = 2; */
        if (message.value.oneofKind === "sint64")
            writer.tag(2, WireType.Varint).sint64(message.value.sint64);
        /* uint64 uint64 = 3; */
        if (message.value.oneofKind === "uint64")
            writer.tag(3, WireType.Varint).uint64(message.value.uint64);
        /* bool bool = 4; */
        if (message.value.oneofKind === "bool")
            writer.tag(4, WireType.Varint).bool(message.value.bool);
        /* string string = 5; */
        if (message.value.oneofKind === "string")
            writer.tag(5, WireType.LengthDelimited).string(message.value.string);
        /* bytes bytes = 6; */
        if (message.value.oneofKind === "bytes")
            writer.tag(6, WireType.LengthDelimited).bytes(message.value.bytes);
        /* flwr.proto.DoubleList double_list = 21; */
        if (message.value.oneofKind === "doubleList")
            DoubleList.internalBinaryWrite(message.value.doubleList, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.SintList sint_list = 22; */
        if (message.value.oneofKind === "sintList")
            SintList.internalBinaryWrite(message.value.sintList, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.UintList uint_list = 23; */
        if (message.value.oneofKind === "uintList")
            UintList.internalBinaryWrite(message.value.uintList, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.BoolList bool_list = 24; */
        if (message.value.oneofKind === "boolList")
            BoolList.internalBinaryWrite(message.value.boolList, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.StringList string_list = 25; */
        if (message.value.oneofKind === "stringList")
            StringList.internalBinaryWrite(message.value.stringList, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.BytesList bytes_list = 26; */
        if (message.value.oneofKind === "bytesList")
            BytesList.internalBinaryWrite(message.value.bytesList, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ConfigsRecordValue
 */
export const ConfigsRecordValue = new ConfigsRecordValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParametersRecord$Type extends MessageType<ParametersRecord> {
    constructor() {
        super("flwr.proto.ParametersRecord", [
            { no: 1, name: "data_keys", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data_values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Array$ }
        ]);
    }
    create(value?: PartialMessage<ParametersRecord>): ParametersRecord {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dataKeys = [];
        message.dataValues = [];
        if (value !== undefined)
            reflectionMergePartial<ParametersRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParametersRecord): ParametersRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string data_keys */ 1:
                    message.dataKeys.push(reader.string());
                    break;
                case /* repeated flwr.proto.Array data_values */ 2:
                    message.dataValues.push(Array$.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParametersRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string data_keys = 1; */
        for (let i = 0; i < message.dataKeys.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.dataKeys[i]);
        /* repeated flwr.proto.Array data_values = 2; */
        for (let i = 0; i < message.dataValues.length; i++)
            Array$.internalBinaryWrite(message.dataValues[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ParametersRecord
 */
export const ParametersRecord = new ParametersRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetricsRecord$Type extends MessageType<MetricsRecord> {
    constructor() {
        super("flwr.proto.MetricsRecord", [
            { no: 1, name: "data", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => MetricsRecordValue } }
        ]);
    }
    create(value?: PartialMessage<MetricsRecord>): MetricsRecord {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = {};
        if (value !== undefined)
            reflectionMergePartial<MetricsRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetricsRecord): MetricsRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, flwr.proto.MetricsRecordValue> data */ 1:
                    this.binaryReadMap1(message.data, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: MetricsRecord["data"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MetricsRecord["data"] | undefined, val: MetricsRecord["data"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = MetricsRecordValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.MetricsRecord.data");
            }
        }
        map[key ?? ""] = val ?? MetricsRecordValue.create();
    }
    internalBinaryWrite(message: MetricsRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, flwr.proto.MetricsRecordValue> data = 1; */
        for (let k of globalThis.Object.keys(message.data)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            MetricsRecordValue.internalBinaryWrite(message.data[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.MetricsRecord
 */
export const MetricsRecord = new MetricsRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfigsRecord$Type extends MessageType<ConfigsRecord> {
    constructor() {
        super("flwr.proto.ConfigsRecord", [
            { no: 1, name: "data", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ConfigsRecordValue } }
        ]);
    }
    create(value?: PartialMessage<ConfigsRecord>): ConfigsRecord {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = {};
        if (value !== undefined)
            reflectionMergePartial<ConfigsRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfigsRecord): ConfigsRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, flwr.proto.ConfigsRecordValue> data */ 1:
                    this.binaryReadMap1(message.data, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ConfigsRecord["data"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ConfigsRecord["data"] | undefined, val: ConfigsRecord["data"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ConfigsRecordValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.ConfigsRecord.data");
            }
        }
        map[key ?? ""] = val ?? ConfigsRecordValue.create();
    }
    internalBinaryWrite(message: ConfigsRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, flwr.proto.ConfigsRecordValue> data = 1; */
        for (let k of globalThis.Object.keys(message.data)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ConfigsRecordValue.internalBinaryWrite(message.data[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.ConfigsRecord
 */
export const ConfigsRecord = new ConfigsRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecordSet$Type extends MessageType<RecordSet> {
    constructor() {
        super("flwr.proto.RecordSet", [
            { no: 1, name: "parameters", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ParametersRecord } },
            { no: 2, name: "metrics", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => MetricsRecord } },
            { no: 3, name: "configs", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ConfigsRecord } }
        ]);
    }
    create(value?: PartialMessage<RecordSet>): RecordSet {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.parameters = {};
        message.metrics = {};
        message.configs = {};
        if (value !== undefined)
            reflectionMergePartial<RecordSet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecordSet): RecordSet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, flwr.proto.ParametersRecord> parameters */ 1:
                    this.binaryReadMap1(message.parameters, reader, options);
                    break;
                case /* map<string, flwr.proto.MetricsRecord> metrics */ 2:
                    this.binaryReadMap2(message.metrics, reader, options);
                    break;
                case /* map<string, flwr.proto.ConfigsRecord> configs */ 3:
                    this.binaryReadMap3(message.configs, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: RecordSet["parameters"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RecordSet["parameters"] | undefined, val: RecordSet["parameters"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ParametersRecord.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.RecordSet.parameters");
            }
        }
        map[key ?? ""] = val ?? ParametersRecord.create();
    }
    private binaryReadMap2(map: RecordSet["metrics"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RecordSet["metrics"] | undefined, val: RecordSet["metrics"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = MetricsRecord.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.RecordSet.metrics");
            }
        }
        map[key ?? ""] = val ?? MetricsRecord.create();
    }
    private binaryReadMap3(map: RecordSet["configs"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RecordSet["configs"] | undefined, val: RecordSet["configs"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ConfigsRecord.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field flwr.proto.RecordSet.configs");
            }
        }
        map[key ?? ""] = val ?? ConfigsRecord.create();
    }
    internalBinaryWrite(message: RecordSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, flwr.proto.ParametersRecord> parameters = 1; */
        for (let k of globalThis.Object.keys(message.parameters)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ParametersRecord.internalBinaryWrite(message.parameters[k], writer, options);
            writer.join().join();
        }
        /* map<string, flwr.proto.MetricsRecord> metrics = 2; */
        for (let k of globalThis.Object.keys(message.metrics)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            MetricsRecord.internalBinaryWrite(message.metrics[k], writer, options);
            writer.join().join();
        }
        /* map<string, flwr.proto.ConfigsRecord> configs = 3; */
        for (let k of globalThis.Object.keys(message.configs)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ConfigsRecord.internalBinaryWrite(message.configs[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.RecordSet
 */
export const RecordSet = new RecordSet$Type();
