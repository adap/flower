// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/clientappio.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ClientAppIo } from "./clientappio";
import type { PushClientAppOutputsResponse } from "./clientappio";
import type { PushClientAppOutputsRequest } from "./clientappio";
import type { PullClientAppInputsResponse } from "./clientappio";
import type { PullClientAppInputsRequest } from "./clientappio";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetTokenResponse } from "./clientappio";
import type { GetTokenRequest } from "./clientappio";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service flwr.proto.ClientAppIo
 */
export interface IClientAppIoClient {
    /**
     * Get token
     *
     * @generated from protobuf rpc: GetToken(flwr.proto.GetTokenRequest) returns (flwr.proto.GetTokenResponse);
     */
    getToken(input: GetTokenRequest, options?: RpcOptions): UnaryCall<GetTokenRequest, GetTokenResponse>;
    /**
     * Get Message, Context, and Run
     *
     * @generated from protobuf rpc: PullClientAppInputs(flwr.proto.PullClientAppInputsRequest) returns (flwr.proto.PullClientAppInputsResponse);
     */
    pullClientAppInputs(input: PullClientAppInputsRequest, options?: RpcOptions): UnaryCall<PullClientAppInputsRequest, PullClientAppInputsResponse>;
    /**
     * Send updated Message and Context
     *
     * @generated from protobuf rpc: PushClientAppOutputs(flwr.proto.PushClientAppOutputsRequest) returns (flwr.proto.PushClientAppOutputsResponse);
     */
    pushClientAppOutputs(input: PushClientAppOutputsRequest, options?: RpcOptions): UnaryCall<PushClientAppOutputsRequest, PushClientAppOutputsResponse>;
}
/**
 * @generated from protobuf service flwr.proto.ClientAppIo
 */
export class ClientAppIoClient implements IClientAppIoClient, ServiceInfo {
    typeName = ClientAppIo.typeName;
    methods = ClientAppIo.methods;
    options = ClientAppIo.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Get token
     *
     * @generated from protobuf rpc: GetToken(flwr.proto.GetTokenRequest) returns (flwr.proto.GetTokenResponse);
     */
    getToken(input: GetTokenRequest, options?: RpcOptions): UnaryCall<GetTokenRequest, GetTokenResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTokenRequest, GetTokenResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get Message, Context, and Run
     *
     * @generated from protobuf rpc: PullClientAppInputs(flwr.proto.PullClientAppInputsRequest) returns (flwr.proto.PullClientAppInputsResponse);
     */
    pullClientAppInputs(input: PullClientAppInputsRequest, options?: RpcOptions): UnaryCall<PullClientAppInputsRequest, PullClientAppInputsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PullClientAppInputsRequest, PullClientAppInputsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Send updated Message and Context
     *
     * @generated from protobuf rpc: PushClientAppOutputs(flwr.proto.PushClientAppOutputsRequest) returns (flwr.proto.PushClientAppOutputsResponse);
     */
    pushClientAppOutputs(input: PushClientAppOutputsRequest, options?: RpcOptions): UnaryCall<PushClientAppOutputsRequest, PushClientAppOutputsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PushClientAppOutputsRequest, PushClientAppOutputsResponse>("unary", this._transport, method, opt, input);
    }
}
