// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flwr/proto/task.proto" (package "flwr.proto", syntax proto3)
// tslint:disable
//
// Copyright 2022 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Error } from "./error";
import { RecordSet } from "./recordset";
import { Node } from "./node";
/**
 * @generated from protobuf message flwr.proto.Task
 */
export interface Task {
    /**
     * @generated from protobuf field: flwr.proto.Node producer = 1;
     */
    producer?: Node;
    /**
     * @generated from protobuf field: flwr.proto.Node consumer = 2;
     */
    consumer?: Node;
    /**
     * @generated from protobuf field: double created_at = 3;
     */
    createdAt: number;
    /**
     * @generated from protobuf field: string delivered_at = 4;
     */
    deliveredAt: string;
    /**
     * @generated from protobuf field: double pushed_at = 5;
     */
    pushedAt: number;
    /**
     * @generated from protobuf field: double ttl = 6;
     */
    ttl: number;
    /**
     * @generated from protobuf field: repeated string ancestry = 7;
     */
    ancestry: string[];
    /**
     * @generated from protobuf field: string task_type = 8;
     */
    taskType: string;
    /**
     * @generated from protobuf field: flwr.proto.RecordSet recordset = 9;
     */
    recordset?: RecordSet;
    /**
     * @generated from protobuf field: flwr.proto.Error error = 10;
     */
    error?: Error;
}
/**
 * @generated from protobuf message flwr.proto.TaskIns
 */
export interface TaskIns {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
    /**
     * @generated from protobuf field: string group_id = 2;
     */
    groupId: string;
    /**
     * @generated from protobuf field: uint64 run_id = 3;
     */
    runId: bigint;
    /**
     * @generated from protobuf field: flwr.proto.Task task = 4;
     */
    task?: Task;
}
/**
 * @generated from protobuf message flwr.proto.TaskRes
 */
export interface TaskRes {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
    /**
     * @generated from protobuf field: string group_id = 2;
     */
    groupId: string;
    /**
     * @generated from protobuf field: uint64 run_id = 3;
     */
    runId: bigint;
    /**
     * @generated from protobuf field: flwr.proto.Task task = 4;
     */
    task?: Task;
}
// @generated message type with reflection information, may provide speed optimized methods
class Task$Type extends MessageType<Task> {
    constructor() {
        super("flwr.proto.Task", [
            { no: 1, name: "producer", kind: "message", T: () => Node },
            { no: 2, name: "consumer", kind: "message", T: () => Node },
            { no: 3, name: "created_at", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "delivered_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pushed_at", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "ttl", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "ancestry", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "task_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "recordset", kind: "message", T: () => RecordSet },
            { no: 10, name: "error", kind: "message", T: () => Error }
        ]);
    }
    create(value?: PartialMessage<Task>): Task {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.createdAt = 0;
        message.deliveredAt = "";
        message.pushedAt = 0;
        message.ttl = 0;
        message.ancestry = [];
        message.taskType = "";
        if (value !== undefined)
            reflectionMergePartial<Task>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Task): Task {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* flwr.proto.Node producer */ 1:
                    message.producer = Node.internalBinaryRead(reader, reader.uint32(), options, message.producer);
                    break;
                case /* flwr.proto.Node consumer */ 2:
                    message.consumer = Node.internalBinaryRead(reader, reader.uint32(), options, message.consumer);
                    break;
                case /* double created_at */ 3:
                    message.createdAt = reader.double();
                    break;
                case /* string delivered_at */ 4:
                    message.deliveredAt = reader.string();
                    break;
                case /* double pushed_at */ 5:
                    message.pushedAt = reader.double();
                    break;
                case /* double ttl */ 6:
                    message.ttl = reader.double();
                    break;
                case /* repeated string ancestry */ 7:
                    message.ancestry.push(reader.string());
                    break;
                case /* string task_type */ 8:
                    message.taskType = reader.string();
                    break;
                case /* flwr.proto.RecordSet recordset */ 9:
                    message.recordset = RecordSet.internalBinaryRead(reader, reader.uint32(), options, message.recordset);
                    break;
                case /* flwr.proto.Error error */ 10:
                    message.error = Error.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Task, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* flwr.proto.Node producer = 1; */
        if (message.producer)
            Node.internalBinaryWrite(message.producer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.Node consumer = 2; */
        if (message.consumer)
            Node.internalBinaryWrite(message.consumer, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* double created_at = 3; */
        if (message.createdAt !== 0)
            writer.tag(3, WireType.Bit64).double(message.createdAt);
        /* string delivered_at = 4; */
        if (message.deliveredAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deliveredAt);
        /* double pushed_at = 5; */
        if (message.pushedAt !== 0)
            writer.tag(5, WireType.Bit64).double(message.pushedAt);
        /* double ttl = 6; */
        if (message.ttl !== 0)
            writer.tag(6, WireType.Bit64).double(message.ttl);
        /* repeated string ancestry = 7; */
        for (let i = 0; i < message.ancestry.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.ancestry[i]);
        /* string task_type = 8; */
        if (message.taskType !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.taskType);
        /* flwr.proto.RecordSet recordset = 9; */
        if (message.recordset)
            RecordSet.internalBinaryWrite(message.recordset, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* flwr.proto.Error error = 10; */
        if (message.error)
            Error.internalBinaryWrite(message.error, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.Task
 */
export const Task = new Task$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskIns$Type extends MessageType<TaskIns> {
    constructor() {
        super("flwr.proto.TaskIns", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "group_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "run_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "task", kind: "message", T: () => Task }
        ]);
    }
    create(value?: PartialMessage<TaskIns>): TaskIns {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        message.groupId = "";
        message.runId = 0n;
        if (value !== undefined)
            reflectionMergePartial<TaskIns>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskIns): TaskIns {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                case /* string group_id */ 2:
                    message.groupId = reader.string();
                    break;
                case /* uint64 run_id */ 3:
                    message.runId = reader.uint64().toBigInt();
                    break;
                case /* flwr.proto.Task task */ 4:
                    message.task = Task.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskIns, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        /* string group_id = 2; */
        if (message.groupId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupId);
        /* uint64 run_id = 3; */
        if (message.runId !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.runId);
        /* flwr.proto.Task task = 4; */
        if (message.task)
            Task.internalBinaryWrite(message.task, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.TaskIns
 */
export const TaskIns = new TaskIns$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskRes$Type extends MessageType<TaskRes> {
    constructor() {
        super("flwr.proto.TaskRes", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "group_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "run_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "task", kind: "message", T: () => Task }
        ]);
    }
    create(value?: PartialMessage<TaskRes>): TaskRes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        message.groupId = "";
        message.runId = 0n;
        if (value !== undefined)
            reflectionMergePartial<TaskRes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskRes): TaskRes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                case /* string group_id */ 2:
                    message.groupId = reader.string();
                    break;
                case /* uint64 run_id */ 3:
                    message.runId = reader.uint64().toBigInt();
                    break;
                case /* flwr.proto.Task task */ 4:
                    message.task = Task.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskRes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        /* string group_id = 2; */
        if (message.groupId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupId);
        /* uint64 run_id = 3; */
        if (message.runId !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.runId);
        /* flwr.proto.Task task = 4; */
        if (message.task)
            Task.internalBinaryWrite(message.task, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message flwr.proto.TaskRes
 */
export const TaskRes = new TaskRes$Type();
