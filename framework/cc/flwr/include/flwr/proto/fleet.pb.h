// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/fleet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2ffleet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2ffleet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "flwr/proto/node.pb.h"
#include "flwr/proto/run.pb.h"
#include "flwr/proto/fab.pb.h"
#include "flwr/proto/message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flwr_2fproto_2ffleet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flwr_2fproto_2ffleet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flwr_2fproto_2ffleet_2eproto;
namespace flwr {
namespace proto {
class CreateNodeRequest;
struct CreateNodeRequestDefaultTypeInternal;
extern CreateNodeRequestDefaultTypeInternal _CreateNodeRequest_default_instance_;
class CreateNodeResponse;
struct CreateNodeResponseDefaultTypeInternal;
extern CreateNodeResponseDefaultTypeInternal _CreateNodeResponse_default_instance_;
class DeleteNodeRequest;
struct DeleteNodeRequestDefaultTypeInternal;
extern DeleteNodeRequestDefaultTypeInternal _DeleteNodeRequest_default_instance_;
class DeleteNodeResponse;
struct DeleteNodeResponseDefaultTypeInternal;
extern DeleteNodeResponseDefaultTypeInternal _DeleteNodeResponse_default_instance_;
class PingRequest;
struct PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResponse;
struct PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class PullMessagesRequest;
struct PullMessagesRequestDefaultTypeInternal;
extern PullMessagesRequestDefaultTypeInternal _PullMessagesRequest_default_instance_;
class PullMessagesResponse;
struct PullMessagesResponseDefaultTypeInternal;
extern PullMessagesResponseDefaultTypeInternal _PullMessagesResponse_default_instance_;
class PushMessagesRequest;
struct PushMessagesRequestDefaultTypeInternal;
extern PushMessagesRequestDefaultTypeInternal _PushMessagesRequest_default_instance_;
class PushMessagesResponse;
struct PushMessagesResponseDefaultTypeInternal;
extern PushMessagesResponseDefaultTypeInternal _PushMessagesResponse_default_instance_;
class PushMessagesResponse_ResultsEntry_DoNotUse;
struct PushMessagesResponse_ResultsEntry_DoNotUseDefaultTypeInternal;
extern PushMessagesResponse_ResultsEntry_DoNotUseDefaultTypeInternal _PushMessagesResponse_ResultsEntry_DoNotUse_default_instance_;
class Reconnect;
struct ReconnectDefaultTypeInternal;
extern ReconnectDefaultTypeInternal _Reconnect_default_instance_;
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> ::flwr::proto::CreateNodeRequest* Arena::CreateMaybeMessage<::flwr::proto::CreateNodeRequest>(Arena*);
template<> ::flwr::proto::CreateNodeResponse* Arena::CreateMaybeMessage<::flwr::proto::CreateNodeResponse>(Arena*);
template<> ::flwr::proto::DeleteNodeRequest* Arena::CreateMaybeMessage<::flwr::proto::DeleteNodeRequest>(Arena*);
template<> ::flwr::proto::DeleteNodeResponse* Arena::CreateMaybeMessage<::flwr::proto::DeleteNodeResponse>(Arena*);
template<> ::flwr::proto::PingRequest* Arena::CreateMaybeMessage<::flwr::proto::PingRequest>(Arena*);
template<> ::flwr::proto::PingResponse* Arena::CreateMaybeMessage<::flwr::proto::PingResponse>(Arena*);
template<> ::flwr::proto::PullMessagesRequest* Arena::CreateMaybeMessage<::flwr::proto::PullMessagesRequest>(Arena*);
template<> ::flwr::proto::PullMessagesResponse* Arena::CreateMaybeMessage<::flwr::proto::PullMessagesResponse>(Arena*);
template<> ::flwr::proto::PushMessagesRequest* Arena::CreateMaybeMessage<::flwr::proto::PushMessagesRequest>(Arena*);
template<> ::flwr::proto::PushMessagesResponse* Arena::CreateMaybeMessage<::flwr::proto::PushMessagesResponse>(Arena*);
template<> ::flwr::proto::PushMessagesResponse_ResultsEntry_DoNotUse* Arena::CreateMaybeMessage<::flwr::proto::PushMessagesResponse_ResultsEntry_DoNotUse>(Arena*);
template<> ::flwr::proto::Reconnect* Arena::CreateMaybeMessage<::flwr::proto::Reconnect>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flwr {
namespace proto {

// ===================================================================

class CreateNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.CreateNodeRequest) */ {
 public:
  inline CreateNodeRequest() : CreateNodeRequest(nullptr) {}
  ~CreateNodeRequest() override;
  explicit constexpr CreateNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNodeRequest(const CreateNodeRequest& from);
  CreateNodeRequest(CreateNodeRequest&& from) noexcept
    : CreateNodeRequest() {
    *this = ::std::move(from);
  }

  inline CreateNodeRequest& operator=(const CreateNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNodeRequest& operator=(CreateNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNodeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNodeRequest*>(
               &_CreateNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateNodeRequest& a, CreateNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNodeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNodeRequest* New() const final {
    return new CreateNodeRequest();
  }

  CreateNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.CreateNodeRequest";
  }
  protected:
  explicit CreateNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingIntervalFieldNumber = 1,
  };
  // double ping_interval = 1;
  void clear_ping_interval();
  double ping_interval() const;
  void set_ping_interval(double value);
  private:
  double _internal_ping_interval() const;
  void _internal_set_ping_interval(double value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.CreateNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double ping_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffleet_2eproto;
};
// -------------------------------------------------------------------

class CreateNodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.CreateNodeResponse) */ {
 public:
  inline CreateNodeResponse() : CreateNodeResponse(nullptr) {}
  ~CreateNodeResponse() override;
  explicit constexpr CreateNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNodeResponse(const CreateNodeResponse& from);
  CreateNodeResponse(CreateNodeResponse&& from) noexcept
    : CreateNodeResponse() {
    *this = ::std::move(from);
  }

  inline CreateNodeResponse& operator=(const CreateNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNodeResponse& operator=(CreateNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNodeResponse* internal_default_instance() {
    return reinterpret_cast<const CreateNodeResponse*>(
               &_CreateNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateNodeResponse& a, CreateNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNodeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNodeResponse* New() const final {
    return new CreateNodeResponse();
  }

  CreateNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNodeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.CreateNodeResponse";
  }
  protected:
  explicit CreateNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .flwr.proto.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::flwr::proto::Node& node() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Node* release_node();
  ::flwr::proto::Node* mutable_node();
  void set_allocated_node(::flwr::proto::Node* node);
  private:
  const ::flwr::proto::Node& _internal_node() const;
  ::flwr::proto::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::flwr::proto::Node* node);
  ::flwr::proto::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:flwr.proto.CreateNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flwr::proto::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffleet_2eproto;
};
// -------------------------------------------------------------------

class DeleteNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.DeleteNodeRequest) */ {
 public:
  inline DeleteNodeRequest() : DeleteNodeRequest(nullptr) {}
  ~DeleteNodeRequest() override;
  explicit constexpr DeleteNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNodeRequest(const DeleteNodeRequest& from);
  DeleteNodeRequest(DeleteNodeRequest&& from) noexcept
    : DeleteNodeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNodeRequest& operator=(const DeleteNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNodeRequest& operator=(DeleteNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNodeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNodeRequest*>(
               &_DeleteNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteNodeRequest& a, DeleteNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNodeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteNodeRequest* New() const final {
    return new DeleteNodeRequest();
  }

  DeleteNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteNodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.DeleteNodeRequest";
  }
  protected:
  explicit DeleteNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .flwr.proto.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::flwr::proto::Node& node() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Node* release_node();
  ::flwr::proto::Node* mutable_node();
  void set_allocated_node(::flwr::proto::Node* node);
  private:
  const ::flwr::proto::Node& _internal_node() const;
  ::flwr::proto::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::flwr::proto::Node* node);
  ::flwr::proto::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:flwr.proto.DeleteNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flwr::proto::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffleet_2eproto;
};
// -------------------------------------------------------------------

class DeleteNodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flwr.proto.DeleteNodeResponse) */ {
 public:
  inline DeleteNodeResponse() : DeleteNodeResponse(nullptr) {}
  explicit constexpr DeleteNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNodeResponse(const DeleteNodeResponse& from);
  DeleteNodeResponse(DeleteNodeResponse&& from) noexcept
    : DeleteNodeResponse() {
    *this = ::std::move(from);
  }

  inline DeleteNodeResponse& operator=(const DeleteNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNodeResponse& operator=(DeleteNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNodeResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteNodeResponse*>(
               &_DeleteNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteNodeResponse& a, DeleteNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNodeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteNodeResponse* New() const final {
    return new DeleteNodeResponse();
  }

  DeleteNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteNodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteNodeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteNodeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.DeleteNodeResponse";
  }
  protected:
  explicit DeleteNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flwr.proto.DeleteNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffleet_2eproto;
};
// -------------------------------------------------------------------

class PingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  ~PingRequest() override;
  explicit constexpr PingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const final {
    return new PingRequest();
  }

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PingRequest";
  }
  protected:
  explicit PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kPingIntervalFieldNumber = 2,
  };
  // .flwr.proto.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::flwr::proto::Node& node() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Node* release_node();
  ::flwr::proto::Node* mutable_node();
  void set_allocated_node(::flwr::proto::Node* node);
  private:
  const ::flwr::proto::Node& _internal_node() const;
  ::flwr::proto::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::flwr::proto::Node* node);
  ::flwr::proto::Node* unsafe_arena_release_node();

  // double ping_interval = 2;
  void clear_ping_interval();
  double ping_interval() const;
  void set_ping_interval(double value);
  private:
  double _internal_ping_interval() const;
  void _internal_set_ping_interval(double value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flwr::proto::Node* node_;
  double ping_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffleet_2eproto;
};
// -------------------------------------------------------------------

class PingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PingResponse) */ {
 public:
  inline PingResponse() : PingResponse(nullptr) {}
  ~PingResponse() override;
  explicit constexpr PingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingResponse(const PingResponse& from);
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingResponse* New() const final {
    return new PingResponse();
  }

  PingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PingResponse";
  }
  protected:
  explicit PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.PingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffleet_2eproto;
};
// -------------------------------------------------------------------

class PullMessagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PullMessagesRequest) */ {
 public:
  inline PullMessagesRequest() : PullMessagesRequest(nullptr) {}
  ~PullMessagesRequest() override;
  explicit constexpr PullMessagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullMessagesRequest(const PullMessagesRequest& from);
  PullMessagesRequest(PullMessagesRequest&& from) noexcept
    : PullMessagesRequest() {
    *this = ::std::move(from);
  }

  inline PullMessagesRequest& operator=(const PullMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullMessagesRequest& operator=(PullMessagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullMessagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const PullMessagesRequest*>(
               &_PullMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PullMessagesRequest& a, PullMessagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullMessagesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullMessagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullMessagesRequest* New() const final {
    return new PullMessagesRequest();
  }

  PullMessagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullMessagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullMessagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullMessagesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullMessagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PullMessagesRequest";
  }
  protected:
  explicit PullMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdsFieldNumber = 2,
    kNodeFieldNumber = 1,
  };
  // repeated string message_ids = 2;
  int message_ids_size() const;
  private:
  int _internal_message_ids_size() const;
  public:
  void clear_message_ids();
  const std::string& message_ids(int index) const;
  std::string* mutable_message_ids(int index);
  void set_message_ids(int index, const std::string& value);
  void set_message_ids(int index, std::string&& value);
  void set_message_ids(int index, const char* value);
  void set_message_ids(int index, const char* value, size_t size);
  std::string* add_message_ids();
  void add_message_ids(const std::string& value);
  void add_message_ids(std::string&& value);
  void add_message_ids(const char* value);
  void add_message_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& message_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_message_ids();
  private:
  const std::string& _internal_message_ids(int index) const;
  std::string* _internal_add_message_ids();
  public:

  // .flwr.proto.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::flwr::proto::Node& node() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Node* release_node();
  ::flwr::proto::Node* mutable_node();
  void set_allocated_node(::flwr::proto::Node* node);
  private:
  const ::flwr::proto::Node& _internal_node() const;
  ::flwr::proto::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::flwr::proto::Node* node);
  ::flwr::proto::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:flwr.proto.PullMessagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> message_ids_;
  ::flwr::proto::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffleet_2eproto;
};
// -------------------------------------------------------------------

class PullMessagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PullMessagesResponse) */ {
 public:
  inline PullMessagesResponse() : PullMessagesResponse(nullptr) {}
  ~PullMessagesResponse() override;
  explicit constexpr PullMessagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullMessagesResponse(const PullMessagesResponse& from);
  PullMessagesResponse(PullMessagesResponse&& from) noexcept
    : PullMessagesResponse() {
    *this = ::std::move(from);
  }

  inline PullMessagesResponse& operator=(const PullMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullMessagesResponse& operator=(PullMessagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullMessagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const PullMessagesResponse*>(
               &_PullMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PullMessagesResponse& a, PullMessagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullMessagesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullMessagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullMessagesResponse* New() const final {
    return new PullMessagesResponse();
  }

  PullMessagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullMessagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullMessagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullMessagesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullMessagesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PullMessagesResponse";
  }
  protected:
  explicit PullMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesListFieldNumber = 2,
    kReconnectFieldNumber = 1,
  };
  // repeated .flwr.proto.Message messages_list = 2;
  int messages_list_size() const;
  private:
  int _internal_messages_list_size() const;
  public:
  void clear_messages_list();
  ::flwr::proto::Message* mutable_messages_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Message >*
      mutable_messages_list();
  private:
  const ::flwr::proto::Message& _internal_messages_list(int index) const;
  ::flwr::proto::Message* _internal_add_messages_list();
  public:
  const ::flwr::proto::Message& messages_list(int index) const;
  ::flwr::proto::Message* add_messages_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Message >&
      messages_list() const;

  // .flwr.proto.Reconnect reconnect = 1;
  bool has_reconnect() const;
  private:
  bool _internal_has_reconnect() const;
  public:
  void clear_reconnect();
  const ::flwr::proto::Reconnect& reconnect() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Reconnect* release_reconnect();
  ::flwr::proto::Reconnect* mutable_reconnect();
  void set_allocated_reconnect(::flwr::proto::Reconnect* reconnect);
  private:
  const ::flwr::proto::Reconnect& _internal_reconnect() const;
  ::flwr::proto::Reconnect* _internal_mutable_reconnect();
  public:
  void unsafe_arena_set_allocated_reconnect(
      ::flwr::proto::Reconnect* reconnect);
  ::flwr::proto::Reconnect* unsafe_arena_release_reconnect();

  // @@protoc_insertion_point(class_scope:flwr.proto.PullMessagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Message > messages_list_;
  ::flwr::proto::Reconnect* reconnect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffleet_2eproto;
};
// -------------------------------------------------------------------

class PushMessagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PushMessagesRequest) */ {
 public:
  inline PushMessagesRequest() : PushMessagesRequest(nullptr) {}
  ~PushMessagesRequest() override;
  explicit constexpr PushMessagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushMessagesRequest(const PushMessagesRequest& from);
  PushMessagesRequest(PushMessagesRequest&& from) noexcept
    : PushMessagesRequest() {
    *this = ::std::move(from);
  }

  inline PushMessagesRequest& operator=(const PushMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushMessagesRequest& operator=(PushMessagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushMessagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const PushMessagesRequest*>(
               &_PushMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PushMessagesRequest& a, PushMessagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PushMessagesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushMessagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushMessagesRequest* New() const final {
    return new PushMessagesRequest();
  }

  PushMessagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushMessagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushMessagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PushMessagesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushMessagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PushMessagesRequest";
  }
  protected:
  explicit PushMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesListFieldNumber = 2,
    kNodeFieldNumber = 1,
  };
  // repeated .flwr.proto.Message messages_list = 2;
  int messages_list_size() const;
  private:
  int _internal_messages_list_size() const;
  public:
  void clear_messages_list();
  ::flwr::proto::Message* mutable_messages_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Message >*
      mutable_messages_list();
  private:
  const ::flwr::proto::Message& _internal_messages_list(int index) const;
  ::flwr::proto::Message* _internal_add_messages_list();
  public:
  const ::flwr::proto::Message& messages_list(int index) const;
  ::flwr::proto::Message* add_messages_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Message >&
      messages_list() const;

  // .flwr.proto.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::flwr::proto::Node& node() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Node* release_node();
  ::flwr::proto::Node* mutable_node();
  void set_allocated_node(::flwr::proto::Node* node);
  private:
  const ::flwr::proto::Node& _internal_node() const;
  ::flwr::proto::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::flwr::proto::Node* node);
  ::flwr::proto::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:flwr.proto.PushMessagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Message > messages_list_;
  ::flwr::proto::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffleet_2eproto;
};
// -------------------------------------------------------------------

class PushMessagesResponse_ResultsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PushMessagesResponse_ResultsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PushMessagesResponse_ResultsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  PushMessagesResponse_ResultsEntry_DoNotUse();
  explicit constexpr PushMessagesResponse_ResultsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PushMessagesResponse_ResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PushMessagesResponse_ResultsEntry_DoNotUse& other);
  static const PushMessagesResponse_ResultsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PushMessagesResponse_ResultsEntry_DoNotUse*>(&_PushMessagesResponse_ResultsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.PushMessagesResponse.ResultsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PushMessagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PushMessagesResponse) */ {
 public:
  inline PushMessagesResponse() : PushMessagesResponse(nullptr) {}
  ~PushMessagesResponse() override;
  explicit constexpr PushMessagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushMessagesResponse(const PushMessagesResponse& from);
  PushMessagesResponse(PushMessagesResponse&& from) noexcept
    : PushMessagesResponse() {
    *this = ::std::move(from);
  }

  inline PushMessagesResponse& operator=(const PushMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushMessagesResponse& operator=(PushMessagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushMessagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const PushMessagesResponse*>(
               &_PushMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PushMessagesResponse& a, PushMessagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PushMessagesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushMessagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushMessagesResponse* New() const final {
    return new PushMessagesResponse();
  }

  PushMessagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushMessagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushMessagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PushMessagesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushMessagesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PushMessagesResponse";
  }
  protected:
  explicit PushMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kReconnectFieldNumber = 1,
  };
  // map<string, uint32> results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_results();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_results();

  // .flwr.proto.Reconnect reconnect = 1;
  bool has_reconnect() const;
  private:
  bool _internal_has_reconnect() const;
  public:
  void clear_reconnect();
  const ::flwr::proto::Reconnect& reconnect() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Reconnect* release_reconnect();
  ::flwr::proto::Reconnect* mutable_reconnect();
  void set_allocated_reconnect(::flwr::proto::Reconnect* reconnect);
  private:
  const ::flwr::proto::Reconnect& _internal_reconnect() const;
  ::flwr::proto::Reconnect* _internal_mutable_reconnect();
  public:
  void unsafe_arena_set_allocated_reconnect(
      ::flwr::proto::Reconnect* reconnect);
  ::flwr::proto::Reconnect* unsafe_arena_release_reconnect();

  // @@protoc_insertion_point(class_scope:flwr.proto.PushMessagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PushMessagesResponse_ResultsEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> results_;
  ::flwr::proto::Reconnect* reconnect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffleet_2eproto;
};
// -------------------------------------------------------------------

class Reconnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.Reconnect) */ {
 public:
  inline Reconnect() : Reconnect(nullptr) {}
  ~Reconnect() override;
  explicit constexpr Reconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reconnect(const Reconnect& from);
  Reconnect(Reconnect&& from) noexcept
    : Reconnect() {
    *this = ::std::move(from);
  }

  inline Reconnect& operator=(const Reconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reconnect& operator=(Reconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reconnect* internal_default_instance() {
    return reinterpret_cast<const Reconnect*>(
               &_Reconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Reconnect& a, Reconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(Reconnect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reconnect* New() const final {
    return new Reconnect();
  }

  Reconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Reconnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Reconnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.Reconnect";
  }
  protected:
  explicit Reconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconnectFieldNumber = 1,
  };
  // uint64 reconnect = 1;
  void clear_reconnect();
  ::PROTOBUF_NAMESPACE_ID::uint64 reconnect() const;
  void set_reconnect(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reconnect() const;
  void _internal_set_reconnect(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.Reconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reconnect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffleet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateNodeRequest

// double ping_interval = 1;
inline void CreateNodeRequest::clear_ping_interval() {
  ping_interval_ = 0;
}
inline double CreateNodeRequest::_internal_ping_interval() const {
  return ping_interval_;
}
inline double CreateNodeRequest::ping_interval() const {
  // @@protoc_insertion_point(field_get:flwr.proto.CreateNodeRequest.ping_interval)
  return _internal_ping_interval();
}
inline void CreateNodeRequest::_internal_set_ping_interval(double value) {
  
  ping_interval_ = value;
}
inline void CreateNodeRequest::set_ping_interval(double value) {
  _internal_set_ping_interval(value);
  // @@protoc_insertion_point(field_set:flwr.proto.CreateNodeRequest.ping_interval)
}

// -------------------------------------------------------------------

// CreateNodeResponse

// .flwr.proto.Node node = 1;
inline bool CreateNodeResponse::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool CreateNodeResponse::has_node() const {
  return _internal_has_node();
}
inline const ::flwr::proto::Node& CreateNodeResponse::_internal_node() const {
  const ::flwr::proto::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Node&>(
      ::flwr::proto::_Node_default_instance_);
}
inline const ::flwr::proto::Node& CreateNodeResponse::node() const {
  // @@protoc_insertion_point(field_get:flwr.proto.CreateNodeResponse.node)
  return _internal_node();
}
inline void CreateNodeResponse::unsafe_arena_set_allocated_node(
    ::flwr::proto::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.CreateNodeResponse.node)
}
inline ::flwr::proto::Node* CreateNodeResponse::release_node() {
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Node* CreateNodeResponse::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:flwr.proto.CreateNodeResponse.node)
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::flwr::proto::Node* CreateNodeResponse::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::flwr::proto::Node* CreateNodeResponse::mutable_node() {
  ::flwr::proto::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:flwr.proto.CreateNodeResponse.node)
  return _msg;
}
inline void CreateNodeResponse::set_allocated_node(::flwr::proto::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.CreateNodeResponse.node)
}

// -------------------------------------------------------------------

// DeleteNodeRequest

// .flwr.proto.Node node = 1;
inline bool DeleteNodeRequest::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool DeleteNodeRequest::has_node() const {
  return _internal_has_node();
}
inline const ::flwr::proto::Node& DeleteNodeRequest::_internal_node() const {
  const ::flwr::proto::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Node&>(
      ::flwr::proto::_Node_default_instance_);
}
inline const ::flwr::proto::Node& DeleteNodeRequest::node() const {
  // @@protoc_insertion_point(field_get:flwr.proto.DeleteNodeRequest.node)
  return _internal_node();
}
inline void DeleteNodeRequest::unsafe_arena_set_allocated_node(
    ::flwr::proto::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.DeleteNodeRequest.node)
}
inline ::flwr::proto::Node* DeleteNodeRequest::release_node() {
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Node* DeleteNodeRequest::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:flwr.proto.DeleteNodeRequest.node)
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::flwr::proto::Node* DeleteNodeRequest::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::flwr::proto::Node* DeleteNodeRequest::mutable_node() {
  ::flwr::proto::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:flwr.proto.DeleteNodeRequest.node)
  return _msg;
}
inline void DeleteNodeRequest::set_allocated_node(::flwr::proto::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.DeleteNodeRequest.node)
}

// -------------------------------------------------------------------

// DeleteNodeResponse

// -------------------------------------------------------------------

// PingRequest

// .flwr.proto.Node node = 1;
inline bool PingRequest::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool PingRequest::has_node() const {
  return _internal_has_node();
}
inline const ::flwr::proto::Node& PingRequest::_internal_node() const {
  const ::flwr::proto::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Node&>(
      ::flwr::proto::_Node_default_instance_);
}
inline const ::flwr::proto::Node& PingRequest::node() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PingRequest.node)
  return _internal_node();
}
inline void PingRequest::unsafe_arena_set_allocated_node(
    ::flwr::proto::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PingRequest.node)
}
inline ::flwr::proto::Node* PingRequest::release_node() {
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Node* PingRequest::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:flwr.proto.PingRequest.node)
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::flwr::proto::Node* PingRequest::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::flwr::proto::Node* PingRequest::mutable_node() {
  ::flwr::proto::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PingRequest.node)
  return _msg;
}
inline void PingRequest::set_allocated_node(::flwr::proto::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PingRequest.node)
}

// double ping_interval = 2;
inline void PingRequest::clear_ping_interval() {
  ping_interval_ = 0;
}
inline double PingRequest::_internal_ping_interval() const {
  return ping_interval_;
}
inline double PingRequest::ping_interval() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PingRequest.ping_interval)
  return _internal_ping_interval();
}
inline void PingRequest::_internal_set_ping_interval(double value) {
  
  ping_interval_ = value;
}
inline void PingRequest::set_ping_interval(double value) {
  _internal_set_ping_interval(value);
  // @@protoc_insertion_point(field_set:flwr.proto.PingRequest.ping_interval)
}

// -------------------------------------------------------------------

// PingResponse

// bool success = 1;
inline void PingResponse::clear_success() {
  success_ = false;
}
inline bool PingResponse::_internal_success() const {
  return success_;
}
inline bool PingResponse::success() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PingResponse.success)
  return _internal_success();
}
inline void PingResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void PingResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:flwr.proto.PingResponse.success)
}

// -------------------------------------------------------------------

// PullMessagesRequest

// .flwr.proto.Node node = 1;
inline bool PullMessagesRequest::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool PullMessagesRequest::has_node() const {
  return _internal_has_node();
}
inline const ::flwr::proto::Node& PullMessagesRequest::_internal_node() const {
  const ::flwr::proto::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Node&>(
      ::flwr::proto::_Node_default_instance_);
}
inline const ::flwr::proto::Node& PullMessagesRequest::node() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullMessagesRequest.node)
  return _internal_node();
}
inline void PullMessagesRequest::unsafe_arena_set_allocated_node(
    ::flwr::proto::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PullMessagesRequest.node)
}
inline ::flwr::proto::Node* PullMessagesRequest::release_node() {
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Node* PullMessagesRequest::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:flwr.proto.PullMessagesRequest.node)
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::flwr::proto::Node* PullMessagesRequest::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::flwr::proto::Node* PullMessagesRequest::mutable_node() {
  ::flwr::proto::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PullMessagesRequest.node)
  return _msg;
}
inline void PullMessagesRequest::set_allocated_node(::flwr::proto::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PullMessagesRequest.node)
}

// repeated string message_ids = 2;
inline int PullMessagesRequest::_internal_message_ids_size() const {
  return message_ids_.size();
}
inline int PullMessagesRequest::message_ids_size() const {
  return _internal_message_ids_size();
}
inline void PullMessagesRequest::clear_message_ids() {
  message_ids_.Clear();
}
inline std::string* PullMessagesRequest::add_message_ids() {
  std::string* _s = _internal_add_message_ids();
  // @@protoc_insertion_point(field_add_mutable:flwr.proto.PullMessagesRequest.message_ids)
  return _s;
}
inline const std::string& PullMessagesRequest::_internal_message_ids(int index) const {
  return message_ids_.Get(index);
}
inline const std::string& PullMessagesRequest::message_ids(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullMessagesRequest.message_ids)
  return _internal_message_ids(index);
}
inline std::string* PullMessagesRequest::mutable_message_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.PullMessagesRequest.message_ids)
  return message_ids_.Mutable(index);
}
inline void PullMessagesRequest::set_message_ids(int index, const std::string& value) {
  message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flwr.proto.PullMessagesRequest.message_ids)
}
inline void PullMessagesRequest::set_message_ids(int index, std::string&& value) {
  message_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flwr.proto.PullMessagesRequest.message_ids)
}
inline void PullMessagesRequest::set_message_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flwr.proto.PullMessagesRequest.message_ids)
}
inline void PullMessagesRequest::set_message_ids(int index, const char* value, size_t size) {
  message_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flwr.proto.PullMessagesRequest.message_ids)
}
inline std::string* PullMessagesRequest::_internal_add_message_ids() {
  return message_ids_.Add();
}
inline void PullMessagesRequest::add_message_ids(const std::string& value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flwr.proto.PullMessagesRequest.message_ids)
}
inline void PullMessagesRequest::add_message_ids(std::string&& value) {
  message_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flwr.proto.PullMessagesRequest.message_ids)
}
inline void PullMessagesRequest::add_message_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flwr.proto.PullMessagesRequest.message_ids)
}
inline void PullMessagesRequest::add_message_ids(const char* value, size_t size) {
  message_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flwr.proto.PullMessagesRequest.message_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PullMessagesRequest::message_ids() const {
  // @@protoc_insertion_point(field_list:flwr.proto.PullMessagesRequest.message_ids)
  return message_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PullMessagesRequest::mutable_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.PullMessagesRequest.message_ids)
  return &message_ids_;
}

// -------------------------------------------------------------------

// PullMessagesResponse

// .flwr.proto.Reconnect reconnect = 1;
inline bool PullMessagesResponse::_internal_has_reconnect() const {
  return this != internal_default_instance() && reconnect_ != nullptr;
}
inline bool PullMessagesResponse::has_reconnect() const {
  return _internal_has_reconnect();
}
inline void PullMessagesResponse::clear_reconnect() {
  if (GetArenaForAllocation() == nullptr && reconnect_ != nullptr) {
    delete reconnect_;
  }
  reconnect_ = nullptr;
}
inline const ::flwr::proto::Reconnect& PullMessagesResponse::_internal_reconnect() const {
  const ::flwr::proto::Reconnect* p = reconnect_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Reconnect&>(
      ::flwr::proto::_Reconnect_default_instance_);
}
inline const ::flwr::proto::Reconnect& PullMessagesResponse::reconnect() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullMessagesResponse.reconnect)
  return _internal_reconnect();
}
inline void PullMessagesResponse::unsafe_arena_set_allocated_reconnect(
    ::flwr::proto::Reconnect* reconnect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reconnect_);
  }
  reconnect_ = reconnect;
  if (reconnect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PullMessagesResponse.reconnect)
}
inline ::flwr::proto::Reconnect* PullMessagesResponse::release_reconnect() {
  
  ::flwr::proto::Reconnect* temp = reconnect_;
  reconnect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Reconnect* PullMessagesResponse::unsafe_arena_release_reconnect() {
  // @@protoc_insertion_point(field_release:flwr.proto.PullMessagesResponse.reconnect)
  
  ::flwr::proto::Reconnect* temp = reconnect_;
  reconnect_ = nullptr;
  return temp;
}
inline ::flwr::proto::Reconnect* PullMessagesResponse::_internal_mutable_reconnect() {
  
  if (reconnect_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Reconnect>(GetArenaForAllocation());
    reconnect_ = p;
  }
  return reconnect_;
}
inline ::flwr::proto::Reconnect* PullMessagesResponse::mutable_reconnect() {
  ::flwr::proto::Reconnect* _msg = _internal_mutable_reconnect();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PullMessagesResponse.reconnect)
  return _msg;
}
inline void PullMessagesResponse::set_allocated_reconnect(::flwr::proto::Reconnect* reconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reconnect_;
  }
  if (reconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::Reconnect>::GetOwningArena(reconnect);
    if (message_arena != submessage_arena) {
      reconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconnect, submessage_arena);
    }
    
  } else {
    
  }
  reconnect_ = reconnect;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PullMessagesResponse.reconnect)
}

// repeated .flwr.proto.Message messages_list = 2;
inline int PullMessagesResponse::_internal_messages_list_size() const {
  return messages_list_.size();
}
inline int PullMessagesResponse::messages_list_size() const {
  return _internal_messages_list_size();
}
inline ::flwr::proto::Message* PullMessagesResponse::mutable_messages_list(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.PullMessagesResponse.messages_list)
  return messages_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Message >*
PullMessagesResponse::mutable_messages_list() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.PullMessagesResponse.messages_list)
  return &messages_list_;
}
inline const ::flwr::proto::Message& PullMessagesResponse::_internal_messages_list(int index) const {
  return messages_list_.Get(index);
}
inline const ::flwr::proto::Message& PullMessagesResponse::messages_list(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullMessagesResponse.messages_list)
  return _internal_messages_list(index);
}
inline ::flwr::proto::Message* PullMessagesResponse::_internal_add_messages_list() {
  return messages_list_.Add();
}
inline ::flwr::proto::Message* PullMessagesResponse::add_messages_list() {
  ::flwr::proto::Message* _add = _internal_add_messages_list();
  // @@protoc_insertion_point(field_add:flwr.proto.PullMessagesResponse.messages_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Message >&
PullMessagesResponse::messages_list() const {
  // @@protoc_insertion_point(field_list:flwr.proto.PullMessagesResponse.messages_list)
  return messages_list_;
}

// -------------------------------------------------------------------

// PushMessagesRequest

// .flwr.proto.Node node = 1;
inline bool PushMessagesRequest::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool PushMessagesRequest::has_node() const {
  return _internal_has_node();
}
inline const ::flwr::proto::Node& PushMessagesRequest::_internal_node() const {
  const ::flwr::proto::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Node&>(
      ::flwr::proto::_Node_default_instance_);
}
inline const ::flwr::proto::Node& PushMessagesRequest::node() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PushMessagesRequest.node)
  return _internal_node();
}
inline void PushMessagesRequest::unsafe_arena_set_allocated_node(
    ::flwr::proto::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PushMessagesRequest.node)
}
inline ::flwr::proto::Node* PushMessagesRequest::release_node() {
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Node* PushMessagesRequest::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:flwr.proto.PushMessagesRequest.node)
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::flwr::proto::Node* PushMessagesRequest::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::flwr::proto::Node* PushMessagesRequest::mutable_node() {
  ::flwr::proto::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PushMessagesRequest.node)
  return _msg;
}
inline void PushMessagesRequest::set_allocated_node(::flwr::proto::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PushMessagesRequest.node)
}

// repeated .flwr.proto.Message messages_list = 2;
inline int PushMessagesRequest::_internal_messages_list_size() const {
  return messages_list_.size();
}
inline int PushMessagesRequest::messages_list_size() const {
  return _internal_messages_list_size();
}
inline ::flwr::proto::Message* PushMessagesRequest::mutable_messages_list(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.PushMessagesRequest.messages_list)
  return messages_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Message >*
PushMessagesRequest::mutable_messages_list() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.PushMessagesRequest.messages_list)
  return &messages_list_;
}
inline const ::flwr::proto::Message& PushMessagesRequest::_internal_messages_list(int index) const {
  return messages_list_.Get(index);
}
inline const ::flwr::proto::Message& PushMessagesRequest::messages_list(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.PushMessagesRequest.messages_list)
  return _internal_messages_list(index);
}
inline ::flwr::proto::Message* PushMessagesRequest::_internal_add_messages_list() {
  return messages_list_.Add();
}
inline ::flwr::proto::Message* PushMessagesRequest::add_messages_list() {
  ::flwr::proto::Message* _add = _internal_add_messages_list();
  // @@protoc_insertion_point(field_add:flwr.proto.PushMessagesRequest.messages_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Message >&
PushMessagesRequest::messages_list() const {
  // @@protoc_insertion_point(field_list:flwr.proto.PushMessagesRequest.messages_list)
  return messages_list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PushMessagesResponse

// .flwr.proto.Reconnect reconnect = 1;
inline bool PushMessagesResponse::_internal_has_reconnect() const {
  return this != internal_default_instance() && reconnect_ != nullptr;
}
inline bool PushMessagesResponse::has_reconnect() const {
  return _internal_has_reconnect();
}
inline void PushMessagesResponse::clear_reconnect() {
  if (GetArenaForAllocation() == nullptr && reconnect_ != nullptr) {
    delete reconnect_;
  }
  reconnect_ = nullptr;
}
inline const ::flwr::proto::Reconnect& PushMessagesResponse::_internal_reconnect() const {
  const ::flwr::proto::Reconnect* p = reconnect_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Reconnect&>(
      ::flwr::proto::_Reconnect_default_instance_);
}
inline const ::flwr::proto::Reconnect& PushMessagesResponse::reconnect() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PushMessagesResponse.reconnect)
  return _internal_reconnect();
}
inline void PushMessagesResponse::unsafe_arena_set_allocated_reconnect(
    ::flwr::proto::Reconnect* reconnect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reconnect_);
  }
  reconnect_ = reconnect;
  if (reconnect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PushMessagesResponse.reconnect)
}
inline ::flwr::proto::Reconnect* PushMessagesResponse::release_reconnect() {
  
  ::flwr::proto::Reconnect* temp = reconnect_;
  reconnect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Reconnect* PushMessagesResponse::unsafe_arena_release_reconnect() {
  // @@protoc_insertion_point(field_release:flwr.proto.PushMessagesResponse.reconnect)
  
  ::flwr::proto::Reconnect* temp = reconnect_;
  reconnect_ = nullptr;
  return temp;
}
inline ::flwr::proto::Reconnect* PushMessagesResponse::_internal_mutable_reconnect() {
  
  if (reconnect_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Reconnect>(GetArenaForAllocation());
    reconnect_ = p;
  }
  return reconnect_;
}
inline ::flwr::proto::Reconnect* PushMessagesResponse::mutable_reconnect() {
  ::flwr::proto::Reconnect* _msg = _internal_mutable_reconnect();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PushMessagesResponse.reconnect)
  return _msg;
}
inline void PushMessagesResponse::set_allocated_reconnect(::flwr::proto::Reconnect* reconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reconnect_;
  }
  if (reconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::Reconnect>::GetOwningArena(reconnect);
    if (message_arena != submessage_arena) {
      reconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconnect, submessage_arena);
    }
    
  } else {
    
  }
  reconnect_ = reconnect;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PushMessagesResponse.reconnect)
}

// map<string, uint32> results = 2;
inline int PushMessagesResponse::_internal_results_size() const {
  return results_.size();
}
inline int PushMessagesResponse::results_size() const {
  return _internal_results_size();
}
inline void PushMessagesResponse::clear_results() {
  results_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
PushMessagesResponse::_internal_results() const {
  return results_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
PushMessagesResponse::results() const {
  // @@protoc_insertion_point(field_map:flwr.proto.PushMessagesResponse.results)
  return _internal_results();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
PushMessagesResponse::_internal_mutable_results() {
  return results_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
PushMessagesResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_map:flwr.proto.PushMessagesResponse.results)
  return _internal_mutable_results();
}

// -------------------------------------------------------------------

// Reconnect

// uint64 reconnect = 1;
inline void Reconnect::clear_reconnect() {
  reconnect_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Reconnect::_internal_reconnect() const {
  return reconnect_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Reconnect::reconnect() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Reconnect.reconnect)
  return _internal_reconnect();
}
inline void Reconnect::_internal_set_reconnect(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reconnect_ = value;
}
inline void Reconnect::set_reconnect(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reconnect(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Reconnect.reconnect)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flwr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2ffleet_2eproto
