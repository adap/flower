// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/recorddict.proto

#include "flwr/proto/recorddict.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flwr {
namespace proto {
constexpr DoubleList::DoubleList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vals_(){}
struct DoubleListDefaultTypeInternal {
  constexpr DoubleListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoubleListDefaultTypeInternal() {}
  union {
    DoubleList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoubleListDefaultTypeInternal _DoubleList_default_instance_;
constexpr SintList::SintList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vals_()
  , _vals_cached_byte_size_(0){}
struct SintListDefaultTypeInternal {
  constexpr SintListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SintListDefaultTypeInternal() {}
  union {
    SintList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SintListDefaultTypeInternal _SintList_default_instance_;
constexpr UintList::UintList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vals_()
  , _vals_cached_byte_size_(0){}
struct UintListDefaultTypeInternal {
  constexpr UintListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UintListDefaultTypeInternal() {}
  union {
    UintList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UintListDefaultTypeInternal _UintList_default_instance_;
constexpr BoolList::BoolList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vals_(){}
struct BoolListDefaultTypeInternal {
  constexpr BoolListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoolListDefaultTypeInternal() {}
  union {
    BoolList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoolListDefaultTypeInternal _BoolList_default_instance_;
constexpr StringList::StringList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vals_(){}
struct StringListDefaultTypeInternal {
  constexpr StringListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringListDefaultTypeInternal() {}
  union {
    StringList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringListDefaultTypeInternal _StringList_default_instance_;
constexpr BytesList::BytesList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vals_(){}
struct BytesListDefaultTypeInternal {
  constexpr BytesListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BytesListDefaultTypeInternal() {}
  union {
    BytesList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BytesListDefaultTypeInternal _BytesList_default_instance_;
constexpr Array::Array(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_(0)
  , dtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ArrayDefaultTypeInternal {
  constexpr ArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArrayDefaultTypeInternal() {}
  union {
    Array _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArrayDefaultTypeInternal _Array_default_instance_;
constexpr MetricRecordValue::MetricRecordValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MetricRecordValueDefaultTypeInternal {
  constexpr MetricRecordValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricRecordValueDefaultTypeInternal() {}
  union {
    MetricRecordValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricRecordValueDefaultTypeInternal _MetricRecordValue_default_instance_;
constexpr ConfigRecordValue::ConfigRecordValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ConfigRecordValueDefaultTypeInternal {
  constexpr ConfigRecordValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigRecordValueDefaultTypeInternal() {}
  union {
    ConfigRecordValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigRecordValueDefaultTypeInternal _ConfigRecordValue_default_instance_;
constexpr ArrayRecord::ArrayRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_keys_()
  , data_values_(){}
struct ArrayRecordDefaultTypeInternal {
  constexpr ArrayRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArrayRecordDefaultTypeInternal() {}
  union {
    ArrayRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArrayRecordDefaultTypeInternal _ArrayRecord_default_instance_;
constexpr MetricRecord_DataEntry_DoNotUse::MetricRecord_DataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MetricRecord_DataEntry_DoNotUseDefaultTypeInternal {
  constexpr MetricRecord_DataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricRecord_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MetricRecord_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricRecord_DataEntry_DoNotUseDefaultTypeInternal _MetricRecord_DataEntry_DoNotUse_default_instance_;
constexpr MetricRecord::MetricRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct MetricRecordDefaultTypeInternal {
  constexpr MetricRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricRecordDefaultTypeInternal() {}
  union {
    MetricRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricRecordDefaultTypeInternal _MetricRecord_default_instance_;
constexpr ConfigRecord_DataEntry_DoNotUse::ConfigRecord_DataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ConfigRecord_DataEntry_DoNotUseDefaultTypeInternal {
  constexpr ConfigRecord_DataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigRecord_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ConfigRecord_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigRecord_DataEntry_DoNotUseDefaultTypeInternal _ConfigRecord_DataEntry_DoNotUse_default_instance_;
constexpr ConfigRecord::ConfigRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ConfigRecordDefaultTypeInternal {
  constexpr ConfigRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigRecordDefaultTypeInternal() {}
  union {
    ConfigRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigRecordDefaultTypeInternal _ConfigRecord_default_instance_;
constexpr RecordDict_ArraysEntry_DoNotUse::RecordDict_ArraysEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RecordDict_ArraysEntry_DoNotUseDefaultTypeInternal {
  constexpr RecordDict_ArraysEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordDict_ArraysEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RecordDict_ArraysEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordDict_ArraysEntry_DoNotUseDefaultTypeInternal _RecordDict_ArraysEntry_DoNotUse_default_instance_;
constexpr RecordDict_MetricsEntry_DoNotUse::RecordDict_MetricsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RecordDict_MetricsEntry_DoNotUseDefaultTypeInternal {
  constexpr RecordDict_MetricsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordDict_MetricsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RecordDict_MetricsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordDict_MetricsEntry_DoNotUseDefaultTypeInternal _RecordDict_MetricsEntry_DoNotUse_default_instance_;
constexpr RecordDict_ConfigsEntry_DoNotUse::RecordDict_ConfigsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RecordDict_ConfigsEntry_DoNotUseDefaultTypeInternal {
  constexpr RecordDict_ConfigsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordDict_ConfigsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RecordDict_ConfigsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordDict_ConfigsEntry_DoNotUseDefaultTypeInternal _RecordDict_ConfigsEntry_DoNotUse_default_instance_;
constexpr RecordDict::RecordDict(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arrays_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , metrics_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , configs_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct RecordDictDefaultTypeInternal {
  constexpr RecordDictDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordDictDefaultTypeInternal() {}
  union {
    RecordDict _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordDictDefaultTypeInternal _RecordDict_default_instance_;
}  // namespace proto
}  // namespace flwr
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flwr_2fproto_2frecorddict_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flwr_2fproto_2frecorddict_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flwr_2fproto_2frecorddict_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flwr_2fproto_2frecorddict_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::DoubleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::DoubleList, vals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::SintList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::SintList, vals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::UintList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::UintList, vals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::BoolList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::BoolList, vals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StringList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StringList, vals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::BytesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::BytesList, vals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Array, dtype_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Array, shape_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Array, stype_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Array, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::MetricRecordValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::MetricRecordValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flwr::proto::MetricRecordValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ConfigRecordValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ConfigRecordValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ConfigRecordValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ArrayRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ArrayRecord, data_keys_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ArrayRecord, data_values_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::MetricRecord_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::MetricRecord_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::MetricRecord_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::MetricRecord_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::MetricRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::MetricRecord, data_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ConfigRecord_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ConfigRecord_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ConfigRecord_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ConfigRecord_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ConfigRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::ConfigRecord, data_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_ArraysEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_ArraysEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_ArraysEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_ArraysEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_MetricsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_MetricsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_MetricsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_MetricsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_ConfigsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_ConfigsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_ConfigsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict_ConfigsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict, arrays_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict, metrics_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RecordDict, configs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flwr::proto::DoubleList)},
  { 7, -1, -1, sizeof(::flwr::proto::SintList)},
  { 14, -1, -1, sizeof(::flwr::proto::UintList)},
  { 21, -1, -1, sizeof(::flwr::proto::BoolList)},
  { 28, -1, -1, sizeof(::flwr::proto::StringList)},
  { 35, -1, -1, sizeof(::flwr::proto::BytesList)},
  { 42, -1, -1, sizeof(::flwr::proto::Array)},
  { 52, -1, -1, sizeof(::flwr::proto::MetricRecordValue)},
  { 65, -1, -1, sizeof(::flwr::proto::ConfigRecordValue)},
  { 84, -1, -1, sizeof(::flwr::proto::ArrayRecord)},
  { 92, 100, -1, sizeof(::flwr::proto::MetricRecord_DataEntry_DoNotUse)},
  { 102, -1, -1, sizeof(::flwr::proto::MetricRecord)},
  { 109, 117, -1, sizeof(::flwr::proto::ConfigRecord_DataEntry_DoNotUse)},
  { 119, -1, -1, sizeof(::flwr::proto::ConfigRecord)},
  { 126, 134, -1, sizeof(::flwr::proto::RecordDict_ArraysEntry_DoNotUse)},
  { 136, 144, -1, sizeof(::flwr::proto::RecordDict_MetricsEntry_DoNotUse)},
  { 146, 154, -1, sizeof(::flwr::proto::RecordDict_ConfigsEntry_DoNotUse)},
  { 156, -1, -1, sizeof(::flwr::proto::RecordDict)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_DoubleList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_SintList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_UintList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_BoolList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_StringList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_BytesList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_Array_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_MetricRecordValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_ConfigRecordValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_ArrayRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_MetricRecord_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_MetricRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_ConfigRecord_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_ConfigRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_RecordDict_ArraysEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_RecordDict_MetricsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_RecordDict_ConfigsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_RecordDict_default_instance_),
};

const char descriptor_table_protodef_flwr_2fproto_2frecorddict_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033flwr/proto/recorddict.proto\022\nflwr.prot"
  "o\"\032\n\nDoubleList\022\014\n\004vals\030\001 \003(\001\"\030\n\010SintLis"
  "t\022\014\n\004vals\030\001 \003(\022\"\030\n\010UintList\022\014\n\004vals\030\001 \003("
  "\004\"\030\n\010BoolList\022\014\n\004vals\030\001 \003(\010\"\032\n\nStringLis"
  "t\022\014\n\004vals\030\001 \003(\t\"\031\n\tBytesList\022\014\n\004vals\030\001 \003"
  "(\014\"B\n\005Array\022\r\n\005dtype\030\001 \001(\t\022\r\n\005shape\030\002 \003("
  "\005\022\r\n\005stype\030\003 \001(\t\022\014\n\004data\030\004 \001(\014\"\327\001\n\021Metri"
  "cRecordValue\022\020\n\006double\030\001 \001(\001H\000\022\020\n\006sint64"
  "\030\002 \001(\022H\000\022\020\n\006uint64\030\003 \001(\004H\000\022-\n\013double_lis"
  "t\030\025 \001(\0132\026.flwr.proto.DoubleListH\000\022)\n\tsin"
  "t_list\030\026 \001(\0132\024.flwr.proto.SintListH\000\022)\n\t"
  "uint_list\030\027 \001(\0132\024.flwr.proto.UintListH\000B"
  "\007\n\005value\"\221\003\n\021ConfigRecordValue\022\020\n\006double"
  "\030\001 \001(\001H\000\022\020\n\006sint64\030\002 \001(\022H\000\022\020\n\006uint64\030\003 \001"
  "(\004H\000\022\016\n\004bool\030\004 \001(\010H\000\022\020\n\006string\030\005 \001(\tH\000\022\017"
  "\n\005bytes\030\006 \001(\014H\000\022-\n\013double_list\030\025 \001(\0132\026.f"
  "lwr.proto.DoubleListH\000\022)\n\tsint_list\030\026 \001("
  "\0132\024.flwr.proto.SintListH\000\022)\n\tuint_list\030\027"
  " \001(\0132\024.flwr.proto.UintListH\000\022)\n\tbool_lis"
  "t\030\030 \001(\0132\024.flwr.proto.BoolListH\000\022-\n\013strin"
  "g_list\030\031 \001(\0132\026.flwr.proto.StringListH\000\022+"
  "\n\nbytes_list\030\032 \001(\0132\025.flwr.proto.BytesLis"
  "tH\000B\007\n\005value\"H\n\013ArrayRecord\022\021\n\tdata_keys"
  "\030\001 \003(\t\022&\n\013data_values\030\002 \003(\0132\021.flwr.proto"
  ".Array\"\214\001\n\014MetricRecord\0220\n\004data\030\001 \003(\0132\"."
  "flwr.proto.MetricRecord.DataEntry\032J\n\tDat"
  "aEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.flw"
  "r.proto.MetricRecordValue:\0028\001\"\214\001\n\014Config"
  "Record\0220\n\004data\030\001 \003(\0132\".flwr.proto.Config"
  "Record.DataEntry\032J\n\tDataEntry\022\013\n\003key\030\001 \001"
  "(\t\022,\n\005value\030\002 \001(\0132\035.flwr.proto.ConfigRec"
  "ordValue:\0028\001\"\210\003\n\nRecordDict\0222\n\006arrays\030\001 "
  "\003(\0132\".flwr.proto.RecordDict.ArraysEntry\022"
  "4\n\007metrics\030\002 \003(\0132#.flwr.proto.RecordDict"
  ".MetricsEntry\0224\n\007configs\030\003 \003(\0132#.flwr.pr"
  "oto.RecordDict.ConfigsEntry\032F\n\013ArraysEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.flwr.pr"
  "oto.ArrayRecord:\0028\001\032H\n\014MetricsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\'\n\005value\030\002 \001(\0132\030.flwr.proto.Met"
  "ricRecord:\0028\001\032H\n\014ConfigsEntry\022\013\n\003key\030\001 \001"
  "(\t\022\'\n\005value\030\002 \001(\0132\030.flwr.proto.ConfigRec"
  "ord:\0028\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flwr_2fproto_2frecorddict_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flwr_2fproto_2frecorddict_2eproto = {
  false, false, 1655, descriptor_table_protodef_flwr_2fproto_2frecorddict_2eproto, "flwr/proto/recorddict.proto", 
  &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once, nullptr, 0, 18,
  schemas, file_default_instances, TableStruct_flwr_2fproto_2frecorddict_2eproto::offsets,
  file_level_metadata_flwr_2fproto_2frecorddict_2eproto, file_level_enum_descriptors_flwr_2fproto_2frecorddict_2eproto, file_level_service_descriptors_flwr_2fproto_2frecorddict_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter() {
  return &descriptor_table_flwr_2fproto_2frecorddict_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flwr_2fproto_2frecorddict_2eproto(&descriptor_table_flwr_2fproto_2frecorddict_2eproto);
namespace flwr {
namespace proto {

// ===================================================================

class DoubleList::_Internal {
 public:
};

DoubleList::DoubleList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.DoubleList)
}
DoubleList::DoubleList(const DoubleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vals_(from.vals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.DoubleList)
}

void DoubleList::SharedCtor() {
}

DoubleList::~DoubleList() {
  // @@protoc_insertion_point(destructor:flwr.proto.DoubleList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DoubleList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DoubleList::ArenaDtor(void* object) {
  DoubleList* _this = reinterpret_cast< DoubleList* >(object);
  (void)_this;
}
void DoubleList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoubleList::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.DoubleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.DoubleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double vals = 1;
  if (this->_internal_vals_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.DoubleList)
  return target;
}

size_t DoubleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.DoubleList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double vals = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vals_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DoubleList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleList::GetClassData() const { return &_class_data_; }

void DoubleList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DoubleList *>(to)->MergeFrom(
      static_cast<const DoubleList &>(from));
}


void DoubleList::MergeFrom(const DoubleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.DoubleList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vals_.MergeFrom(from.vals_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleList::CopyFrom(const DoubleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.DoubleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleList::IsInitialized() const {
  return true;
}

void DoubleList::InternalSwap(DoubleList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vals_.InternalSwap(&other->vals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[0]);
}

// ===================================================================

class SintList::_Internal {
 public:
};

SintList::SintList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.SintList)
}
SintList::SintList(const SintList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vals_(from.vals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.SintList)
}

void SintList::SharedCtor() {
}

SintList::~SintList() {
  // @@protoc_insertion_point(destructor:flwr.proto.SintList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SintList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SintList::ArenaDtor(void* object) {
  SintList* _this = reinterpret_cast< SintList* >(object);
  (void)_this;
}
void SintList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SintList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SintList::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.SintList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SintList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated sint64 vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SintList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.SintList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint64 vals = 1;
  {
    int byte_size = _vals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          1, _internal_vals(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.SintList)
  return target;
}

size_t SintList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.SintList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint64 vals = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->vals_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SintList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SintList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SintList::GetClassData() const { return &_class_data_; }

void SintList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SintList *>(to)->MergeFrom(
      static_cast<const SintList &>(from));
}


void SintList::MergeFrom(const SintList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.SintList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vals_.MergeFrom(from.vals_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SintList::CopyFrom(const SintList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.SintList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SintList::IsInitialized() const {
  return true;
}

void SintList::InternalSwap(SintList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vals_.InternalSwap(&other->vals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SintList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[1]);
}

// ===================================================================

class UintList::_Internal {
 public:
};

UintList::UintList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.UintList)
}
UintList::UintList(const UintList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vals_(from.vals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.UintList)
}

void UintList::SharedCtor() {
}

UintList::~UintList() {
  // @@protoc_insertion_point(destructor:flwr.proto.UintList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UintList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UintList::ArenaDtor(void* object) {
  UintList* _this = reinterpret_cast< UintList* >(object);
  (void)_this;
}
void UintList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UintList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UintList::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.UintList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UintList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UintList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.UintList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 vals = 1;
  {
    int byte_size = _vals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_vals(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.UintList)
  return target;
}

size_t UintList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.UintList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 vals = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->vals_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UintList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UintList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UintList::GetClassData() const { return &_class_data_; }

void UintList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UintList *>(to)->MergeFrom(
      static_cast<const UintList &>(from));
}


void UintList::MergeFrom(const UintList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.UintList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vals_.MergeFrom(from.vals_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UintList::CopyFrom(const UintList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.UintList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UintList::IsInitialized() const {
  return true;
}

void UintList::InternalSwap(UintList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vals_.InternalSwap(&other->vals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UintList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[2]);
}

// ===================================================================

class BoolList::_Internal {
 public:
};

BoolList::BoolList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.BoolList)
}
BoolList::BoolList(const BoolList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vals_(from.vals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.BoolList)
}

void BoolList::SharedCtor() {
}

BoolList::~BoolList() {
  // @@protoc_insertion_point(destructor:flwr.proto.BoolList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoolList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoolList::ArenaDtor(void* object) {
  BoolList* _this = reinterpret_cast< BoolList* >(object);
  (void)_this;
}
void BoolList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoolList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoolList::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.BoolList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.BoolList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool vals = 1;
  if (this->_internal_vals_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.BoolList)
  return target;
}

size_t BoolList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.BoolList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool vals = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vals_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoolList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoolList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoolList::GetClassData() const { return &_class_data_; }

void BoolList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoolList *>(to)->MergeFrom(
      static_cast<const BoolList &>(from));
}


void BoolList::MergeFrom(const BoolList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.BoolList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vals_.MergeFrom(from.vals_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoolList::CopyFrom(const BoolList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.BoolList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolList::IsInitialized() const {
  return true;
}

void BoolList::InternalSwap(BoolList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vals_.InternalSwap(&other->vals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[3]);
}

// ===================================================================

class StringList::_Internal {
 public:
};

StringList::StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.StringList)
}
StringList::StringList(const StringList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vals_(from.vals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.StringList)
}

void StringList::SharedCtor() {
}

StringList::~StringList() {
  // @@protoc_insertion_point(destructor:flwr.proto.StringList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StringList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StringList::ArenaDtor(void* object) {
  StringList* _this = reinterpret_cast< StringList* >(object);
  (void)_this;
}
void StringList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringList::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.StringList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vals();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flwr.proto.StringList.vals"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.StringList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string vals = 1;
  for (int i = 0, n = this->_internal_vals_size(); i < n; i++) {
    const auto& s = this->_internal_vals(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.StringList.vals");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.StringList)
  return target;
}

size_t StringList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.StringList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string vals = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(vals_.size());
  for (int i = 0, n = vals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      vals_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StringList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringList::GetClassData() const { return &_class_data_; }

void StringList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StringList *>(to)->MergeFrom(
      static_cast<const StringList &>(from));
}


void StringList::MergeFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.StringList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vals_.MergeFrom(from.vals_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringList::CopyFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.StringList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringList::IsInitialized() const {
  return true;
}

void StringList::InternalSwap(StringList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vals_.InternalSwap(&other->vals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[4]);
}

// ===================================================================

class BytesList::_Internal {
 public:
};

BytesList::BytesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.BytesList)
}
BytesList::BytesList(const BytesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vals_(from.vals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.BytesList)
}

void BytesList::SharedCtor() {
}

BytesList::~BytesList() {
  // @@protoc_insertion_point(destructor:flwr.proto.BytesList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BytesList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BytesList::ArenaDtor(void* object) {
  BytesList* _this = reinterpret_cast< BytesList* >(object);
  (void)_this;
}
void BytesList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BytesList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BytesList::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.BytesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BytesList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vals();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BytesList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.BytesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes vals = 1;
  for (int i = 0, n = this->_internal_vals_size(); i < n; i++) {
    const auto& s = this->_internal_vals(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.BytesList)
  return target;
}

size_t BytesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.BytesList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes vals = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(vals_.size());
  for (int i = 0, n = vals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      vals_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BytesList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BytesList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BytesList::GetClassData() const { return &_class_data_; }

void BytesList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BytesList *>(to)->MergeFrom(
      static_cast<const BytesList &>(from));
}


void BytesList::MergeFrom(const BytesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.BytesList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vals_.MergeFrom(from.vals_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BytesList::CopyFrom(const BytesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.BytesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytesList::IsInitialized() const {
  return true;
}

void BytesList::InternalSwap(BytesList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vals_.InternalSwap(&other->vals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BytesList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[5]);
}

// ===================================================================

class Array::_Internal {
 public:
};

Array::Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.Array)
}
Array::Array(const Array& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dtype().empty()) {
    dtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dtype(), 
      GetArenaForAllocation());
  }
  stype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stype().empty()) {
    stype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stype(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flwr.proto.Array)
}

void Array::SharedCtor() {
dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:flwr.proto.Array)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Array::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Array::ArenaDtor(void* object) {
  Array* _this = reinterpret_cast< Array* >(object);
  (void)_this;
}
void Array::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Array::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Array::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.Array)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  dtype_.ClearToEmpty();
  stype_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Array::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flwr.proto.Array.dtype"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_stype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flwr.proto.Array.stype"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Array::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.Array)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dtype = 1;
  if (!this->_internal_dtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.Array.dtype");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dtype(), target);
  }

  // repeated int32 shape = 2;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_shape(), byte_size, target);
    }
  }

  // string stype = 3;
  if (!this->_internal_stype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stype().data(), static_cast<int>(this->_internal_stype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.Array.stype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stype(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.Array)
  return target;
}

size_t Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.Array)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string dtype = 1;
  if (!this->_internal_dtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dtype());
  }

  // string stype = 3;
  if (!this->_internal_stype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stype());
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Array::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Array::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Array::GetClassData() const { return &_class_data_; }

void Array::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Array *>(to)->MergeFrom(
      static_cast<const Array &>(from));
}


void Array::MergeFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.Array)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  if (!from._internal_dtype().empty()) {
    _internal_set_dtype(from._internal_dtype());
  }
  if (!from._internal_stype().empty()) {
    _internal_set_stype(from._internal_stype());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Array::CopyFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  return true;
}

void Array::InternalSwap(Array* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dtype_, lhs_arena,
      &other->dtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stype_, lhs_arena,
      &other->stype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Array::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[6]);
}

// ===================================================================

class MetricRecordValue::_Internal {
 public:
  static const ::flwr::proto::DoubleList& double_list(const MetricRecordValue* msg);
  static const ::flwr::proto::SintList& sint_list(const MetricRecordValue* msg);
  static const ::flwr::proto::UintList& uint_list(const MetricRecordValue* msg);
};

const ::flwr::proto::DoubleList&
MetricRecordValue::_Internal::double_list(const MetricRecordValue* msg) {
  return *msg->value_.double_list_;
}
const ::flwr::proto::SintList&
MetricRecordValue::_Internal::sint_list(const MetricRecordValue* msg) {
  return *msg->value_.sint_list_;
}
const ::flwr::proto::UintList&
MetricRecordValue::_Internal::uint_list(const MetricRecordValue* msg) {
  return *msg->value_.uint_list_;
}
void MetricRecordValue::set_allocated_double_list(::flwr::proto::DoubleList* double_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (double_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::DoubleList>::GetOwningArena(double_list);
    if (message_arena != submessage_arena) {
      double_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_list, submessage_arena);
    }
    set_has_double_list();
    value_.double_list_ = double_list;
  }
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.MetricRecordValue.double_list)
}
void MetricRecordValue::set_allocated_sint_list(::flwr::proto::SintList* sint_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sint_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::SintList>::GetOwningArena(sint_list);
    if (message_arena != submessage_arena) {
      sint_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sint_list, submessage_arena);
    }
    set_has_sint_list();
    value_.sint_list_ = sint_list;
  }
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.MetricRecordValue.sint_list)
}
void MetricRecordValue::set_allocated_uint_list(::flwr::proto::UintList* uint_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uint_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::UintList>::GetOwningArena(uint_list);
    if (message_arena != submessage_arena) {
      uint_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint_list, submessage_arena);
    }
    set_has_uint_list();
    value_.uint_list_ = uint_list;
  }
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.MetricRecordValue.uint_list)
}
MetricRecordValue::MetricRecordValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.MetricRecordValue)
}
MetricRecordValue::MetricRecordValue(const MetricRecordValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kSint64: {
      _internal_set_sint64(from._internal_sint64());
      break;
    }
    case kUint64: {
      _internal_set_uint64(from._internal_uint64());
      break;
    }
    case kDoubleList: {
      _internal_mutable_double_list()->::flwr::proto::DoubleList::MergeFrom(from._internal_double_list());
      break;
    }
    case kSintList: {
      _internal_mutable_sint_list()->::flwr::proto::SintList::MergeFrom(from._internal_sint_list());
      break;
    }
    case kUintList: {
      _internal_mutable_uint_list()->::flwr::proto::UintList::MergeFrom(from._internal_uint_list());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flwr.proto.MetricRecordValue)
}

void MetricRecordValue::SharedCtor() {
clear_has_value();
}

MetricRecordValue::~MetricRecordValue() {
  // @@protoc_insertion_point(destructor:flwr.proto.MetricRecordValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricRecordValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void MetricRecordValue::ArenaDtor(void* object) {
  MetricRecordValue* _this = reinterpret_cast< MetricRecordValue* >(object);
  (void)_this;
}
void MetricRecordValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricRecordValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricRecordValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:flwr.proto.MetricRecordValue)
  switch (value_case()) {
    case kDouble: {
      // No need to clear
      break;
    }
    case kSint64: {
      // No need to clear
      break;
    }
    case kUint64: {
      // No need to clear
      break;
    }
    case kDoubleList: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.double_list_;
      }
      break;
    }
    case kSintList: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.sint_list_;
      }
      break;
    }
    case kUintList: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.uint_list_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void MetricRecordValue::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.MetricRecordValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricRecordValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _internal_set_double_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // sint64 sint64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uint64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.DoubleList double_list = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.SintList sint_list = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_sint_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.UintList uint_list = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_uint_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricRecordValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.MetricRecordValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double double = 1;
  if (_internal_has_double_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_(), target);
  }

  // sint64 sint64 = 2;
  if (_internal_has_sint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_sint64(), target);
  }

  // uint64 uint64 = 3;
  if (_internal_has_uint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_uint64(), target);
  }

  // .flwr.proto.DoubleList double_list = 21;
  if (_internal_has_double_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::double_list(this), target, stream);
  }

  // .flwr.proto.SintList sint_list = 22;
  if (_internal_has_sint_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::sint_list(this), target, stream);
  }

  // .flwr.proto.UintList uint_list = 23;
  if (_internal_has_uint_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::uint_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.MetricRecordValue)
  return target;
}

size_t MetricRecordValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.MetricRecordValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // double double = 1;
    case kDouble: {
      total_size += 1 + 8;
      break;
    }
    // sint64 sint64 = 2;
    case kSint64: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_sint64());
      break;
    }
    // uint64 uint64 = 3;
    case kUint64: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_uint64());
      break;
    }
    // .flwr.proto.DoubleList double_list = 21;
    case kDoubleList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.double_list_);
      break;
    }
    // .flwr.proto.SintList sint_list = 22;
    case kSintList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.sint_list_);
      break;
    }
    // .flwr.proto.UintList uint_list = 23;
    case kUintList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uint_list_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricRecordValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricRecordValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricRecordValue::GetClassData() const { return &_class_data_; }

void MetricRecordValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MetricRecordValue *>(to)->MergeFrom(
      static_cast<const MetricRecordValue &>(from));
}


void MetricRecordValue::MergeFrom(const MetricRecordValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.MetricRecordValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kSint64: {
      _internal_set_sint64(from._internal_sint64());
      break;
    }
    case kUint64: {
      _internal_set_uint64(from._internal_uint64());
      break;
    }
    case kDoubleList: {
      _internal_mutable_double_list()->::flwr::proto::DoubleList::MergeFrom(from._internal_double_list());
      break;
    }
    case kSintList: {
      _internal_mutable_sint_list()->::flwr::proto::SintList::MergeFrom(from._internal_sint_list());
      break;
    }
    case kUintList: {
      _internal_mutable_uint_list()->::flwr::proto::UintList::MergeFrom(from._internal_uint_list());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricRecordValue::CopyFrom(const MetricRecordValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.MetricRecordValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricRecordValue::IsInitialized() const {
  return true;
}

void MetricRecordValue::InternalSwap(MetricRecordValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricRecordValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[7]);
}

// ===================================================================

class ConfigRecordValue::_Internal {
 public:
  static const ::flwr::proto::DoubleList& double_list(const ConfigRecordValue* msg);
  static const ::flwr::proto::SintList& sint_list(const ConfigRecordValue* msg);
  static const ::flwr::proto::UintList& uint_list(const ConfigRecordValue* msg);
  static const ::flwr::proto::BoolList& bool_list(const ConfigRecordValue* msg);
  static const ::flwr::proto::StringList& string_list(const ConfigRecordValue* msg);
  static const ::flwr::proto::BytesList& bytes_list(const ConfigRecordValue* msg);
};

const ::flwr::proto::DoubleList&
ConfigRecordValue::_Internal::double_list(const ConfigRecordValue* msg) {
  return *msg->value_.double_list_;
}
const ::flwr::proto::SintList&
ConfigRecordValue::_Internal::sint_list(const ConfigRecordValue* msg) {
  return *msg->value_.sint_list_;
}
const ::flwr::proto::UintList&
ConfigRecordValue::_Internal::uint_list(const ConfigRecordValue* msg) {
  return *msg->value_.uint_list_;
}
const ::flwr::proto::BoolList&
ConfigRecordValue::_Internal::bool_list(const ConfigRecordValue* msg) {
  return *msg->value_.bool_list_;
}
const ::flwr::proto::StringList&
ConfigRecordValue::_Internal::string_list(const ConfigRecordValue* msg) {
  return *msg->value_.string_list_;
}
const ::flwr::proto::BytesList&
ConfigRecordValue::_Internal::bytes_list(const ConfigRecordValue* msg) {
  return *msg->value_.bytes_list_;
}
void ConfigRecordValue::set_allocated_double_list(::flwr::proto::DoubleList* double_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (double_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::DoubleList>::GetOwningArena(double_list);
    if (message_arena != submessage_arena) {
      double_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_list, submessage_arena);
    }
    set_has_double_list();
    value_.double_list_ = double_list;
  }
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.ConfigRecordValue.double_list)
}
void ConfigRecordValue::set_allocated_sint_list(::flwr::proto::SintList* sint_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sint_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::SintList>::GetOwningArena(sint_list);
    if (message_arena != submessage_arena) {
      sint_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sint_list, submessage_arena);
    }
    set_has_sint_list();
    value_.sint_list_ = sint_list;
  }
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.ConfigRecordValue.sint_list)
}
void ConfigRecordValue::set_allocated_uint_list(::flwr::proto::UintList* uint_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uint_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::UintList>::GetOwningArena(uint_list);
    if (message_arena != submessage_arena) {
      uint_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint_list, submessage_arena);
    }
    set_has_uint_list();
    value_.uint_list_ = uint_list;
  }
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.ConfigRecordValue.uint_list)
}
void ConfigRecordValue::set_allocated_bool_list(::flwr::proto::BoolList* bool_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (bool_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::BoolList>::GetOwningArena(bool_list);
    if (message_arena != submessage_arena) {
      bool_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_list, submessage_arena);
    }
    set_has_bool_list();
    value_.bool_list_ = bool_list;
  }
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.ConfigRecordValue.bool_list)
}
void ConfigRecordValue::set_allocated_string_list(::flwr::proto::StringList* string_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (string_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::StringList>::GetOwningArena(string_list);
    if (message_arena != submessage_arena) {
      string_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_list, submessage_arena);
    }
    set_has_string_list();
    value_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.ConfigRecordValue.string_list)
}
void ConfigRecordValue::set_allocated_bytes_list(::flwr::proto::BytesList* bytes_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (bytes_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::BytesList>::GetOwningArena(bytes_list);
    if (message_arena != submessage_arena) {
      bytes_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes_list, submessage_arena);
    }
    set_has_bytes_list();
    value_.bytes_list_ = bytes_list;
  }
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.ConfigRecordValue.bytes_list)
}
ConfigRecordValue::ConfigRecordValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.ConfigRecordValue)
}
ConfigRecordValue::ConfigRecordValue(const ConfigRecordValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kSint64: {
      _internal_set_sint64(from._internal_sint64());
      break;
    }
    case kUint64: {
      _internal_set_uint64(from._internal_uint64());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kBytes: {
      _internal_set_bytes(from._internal_bytes());
      break;
    }
    case kDoubleList: {
      _internal_mutable_double_list()->::flwr::proto::DoubleList::MergeFrom(from._internal_double_list());
      break;
    }
    case kSintList: {
      _internal_mutable_sint_list()->::flwr::proto::SintList::MergeFrom(from._internal_sint_list());
      break;
    }
    case kUintList: {
      _internal_mutable_uint_list()->::flwr::proto::UintList::MergeFrom(from._internal_uint_list());
      break;
    }
    case kBoolList: {
      _internal_mutable_bool_list()->::flwr::proto::BoolList::MergeFrom(from._internal_bool_list());
      break;
    }
    case kStringList: {
      _internal_mutable_string_list()->::flwr::proto::StringList::MergeFrom(from._internal_string_list());
      break;
    }
    case kBytesList: {
      _internal_mutable_bytes_list()->::flwr::proto::BytesList::MergeFrom(from._internal_bytes_list());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flwr.proto.ConfigRecordValue)
}

void ConfigRecordValue::SharedCtor() {
clear_has_value();
}

ConfigRecordValue::~ConfigRecordValue() {
  // @@protoc_insertion_point(destructor:flwr.proto.ConfigRecordValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigRecordValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void ConfigRecordValue::ArenaDtor(void* object) {
  ConfigRecordValue* _this = reinterpret_cast< ConfigRecordValue* >(object);
  (void)_this;
}
void ConfigRecordValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigRecordValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigRecordValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:flwr.proto.ConfigRecordValue)
  switch (value_case()) {
    case kDouble: {
      // No need to clear
      break;
    }
    case kSint64: {
      // No need to clear
      break;
    }
    case kUint64: {
      // No need to clear
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kString: {
      value_.string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kBytes: {
      value_.bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kDoubleList: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.double_list_;
      }
      break;
    }
    case kSintList: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.sint_list_;
      }
      break;
    }
    case kUintList: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.uint_list_;
      }
      break;
    }
    case kBoolList: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.bool_list_;
      }
      break;
    }
    case kStringList: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.string_list_;
      }
      break;
    }
    case kBytesList: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.bytes_list_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ConfigRecordValue::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.ConfigRecordValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigRecordValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _internal_set_double_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // sint64 sint64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uint64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flwr.proto.ConfigRecordValue.string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.DoubleList double_list = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.SintList sint_list = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_sint_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.UintList uint_list = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_uint_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.BoolList bool_list = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.StringList string_list = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.BytesList bytes_list = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_bytes_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigRecordValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.ConfigRecordValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double double = 1;
  if (_internal_has_double_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_(), target);
  }

  // sint64 sint64 = 2;
  if (_internal_has_sint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_sint64(), target);
  }

  // uint64 uint64 = 3;
  if (_internal_has_uint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_uint64(), target);
  }

  // bool bool = 4;
  if (_internal_has_bool_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bool_(), target);
  }

  // string string = 5;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.ConfigRecordValue.string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_string(), target);
  }

  // bytes bytes = 6;
  if (_internal_has_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_bytes(), target);
  }

  // .flwr.proto.DoubleList double_list = 21;
  if (_internal_has_double_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::double_list(this), target, stream);
  }

  // .flwr.proto.SintList sint_list = 22;
  if (_internal_has_sint_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::sint_list(this), target, stream);
  }

  // .flwr.proto.UintList uint_list = 23;
  if (_internal_has_uint_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::uint_list(this), target, stream);
  }

  // .flwr.proto.BoolList bool_list = 24;
  if (_internal_has_bool_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::bool_list(this), target, stream);
  }

  // .flwr.proto.StringList string_list = 25;
  if (_internal_has_string_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::string_list(this), target, stream);
  }

  // .flwr.proto.BytesList bytes_list = 26;
  if (_internal_has_bytes_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::bytes_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.ConfigRecordValue)
  return target;
}

size_t ConfigRecordValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.ConfigRecordValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // double double = 1;
    case kDouble: {
      total_size += 1 + 8;
      break;
    }
    // sint64 sint64 = 2;
    case kSint64: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_sint64());
      break;
    }
    // uint64 uint64 = 3;
    case kUint64: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_uint64());
      break;
    }
    // bool bool = 4;
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // string string = 5;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    // bytes bytes = 6;
    case kBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes());
      break;
    }
    // .flwr.proto.DoubleList double_list = 21;
    case kDoubleList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.double_list_);
      break;
    }
    // .flwr.proto.SintList sint_list = 22;
    case kSintList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.sint_list_);
      break;
    }
    // .flwr.proto.UintList uint_list = 23;
    case kUintList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uint_list_);
      break;
    }
    // .flwr.proto.BoolList bool_list = 24;
    case kBoolList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.bool_list_);
      break;
    }
    // .flwr.proto.StringList string_list = 25;
    case kStringList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.string_list_);
      break;
    }
    // .flwr.proto.BytesList bytes_list = 26;
    case kBytesList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.bytes_list_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigRecordValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigRecordValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigRecordValue::GetClassData() const { return &_class_data_; }

void ConfigRecordValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigRecordValue *>(to)->MergeFrom(
      static_cast<const ConfigRecordValue &>(from));
}


void ConfigRecordValue::MergeFrom(const ConfigRecordValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.ConfigRecordValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kSint64: {
      _internal_set_sint64(from._internal_sint64());
      break;
    }
    case kUint64: {
      _internal_set_uint64(from._internal_uint64());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kBytes: {
      _internal_set_bytes(from._internal_bytes());
      break;
    }
    case kDoubleList: {
      _internal_mutable_double_list()->::flwr::proto::DoubleList::MergeFrom(from._internal_double_list());
      break;
    }
    case kSintList: {
      _internal_mutable_sint_list()->::flwr::proto::SintList::MergeFrom(from._internal_sint_list());
      break;
    }
    case kUintList: {
      _internal_mutable_uint_list()->::flwr::proto::UintList::MergeFrom(from._internal_uint_list());
      break;
    }
    case kBoolList: {
      _internal_mutable_bool_list()->::flwr::proto::BoolList::MergeFrom(from._internal_bool_list());
      break;
    }
    case kStringList: {
      _internal_mutable_string_list()->::flwr::proto::StringList::MergeFrom(from._internal_string_list());
      break;
    }
    case kBytesList: {
      _internal_mutable_bytes_list()->::flwr::proto::BytesList::MergeFrom(from._internal_bytes_list());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigRecordValue::CopyFrom(const ConfigRecordValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.ConfigRecordValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRecordValue::IsInitialized() const {
  return true;
}

void ConfigRecordValue::InternalSwap(ConfigRecordValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigRecordValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[8]);
}

// ===================================================================

class ArrayRecord::_Internal {
 public:
};

ArrayRecord::ArrayRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_keys_(arena),
  data_values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.ArrayRecord)
}
ArrayRecord::ArrayRecord(const ArrayRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_keys_(from.data_keys_),
      data_values_(from.data_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.ArrayRecord)
}

void ArrayRecord::SharedCtor() {
}

ArrayRecord::~ArrayRecord() {
  // @@protoc_insertion_point(destructor:flwr.proto.ArrayRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ArrayRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ArrayRecord::ArenaDtor(void* object) {
  ArrayRecord* _this = reinterpret_cast< ArrayRecord* >(object);
  (void)_this;
}
void ArrayRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArrayRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.ArrayRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_keys_.Clear();
  data_values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string data_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flwr.proto.ArrayRecord.data_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .flwr.proto.Array data_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.ArrayRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data_keys = 1;
  for (int i = 0, n = this->_internal_data_keys_size(); i < n; i++) {
    const auto& s = this->_internal_data_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.ArrayRecord.data_keys");
    target = stream->WriteString(1, s, target);
  }

  // repeated .flwr.proto.Array data_values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.ArrayRecord)
  return target;
}

size_t ArrayRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.ArrayRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data_keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_keys_.size());
  for (int i = 0, n = data_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      data_keys_.Get(i));
  }

  // repeated .flwr.proto.Array data_values = 2;
  total_size += 1UL * this->_internal_data_values_size();
  for (const auto& msg : this->data_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArrayRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ArrayRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArrayRecord::GetClassData() const { return &_class_data_; }

void ArrayRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ArrayRecord *>(to)->MergeFrom(
      static_cast<const ArrayRecord &>(from));
}


void ArrayRecord::MergeFrom(const ArrayRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.ArrayRecord)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_keys_.MergeFrom(from.data_keys_);
  data_values_.MergeFrom(from.data_values_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArrayRecord::CopyFrom(const ArrayRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.ArrayRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayRecord::IsInitialized() const {
  return true;
}

void ArrayRecord::InternalSwap(ArrayRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_keys_.InternalSwap(&other->data_keys_);
  data_values_.InternalSwap(&other->data_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[9]);
}

// ===================================================================

MetricRecord_DataEntry_DoNotUse::MetricRecord_DataEntry_DoNotUse() {}
MetricRecord_DataEntry_DoNotUse::MetricRecord_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetricRecord_DataEntry_DoNotUse::MergeFrom(const MetricRecord_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetricRecord_DataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[10]);
}

// ===================================================================

class MetricRecord::_Internal {
 public:
};

MetricRecord::MetricRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.MetricRecord)
}
MetricRecord::MetricRecord(const MetricRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.MetricRecord)
}

void MetricRecord::SharedCtor() {
}

MetricRecord::~MetricRecord() {
  // @@protoc_insertion_point(destructor:flwr.proto.MetricRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetricRecord::ArenaDtor(void* object) {
  MetricRecord* _this = reinterpret_cast< MetricRecord* >(object);
  (void)_this;
  _this->data_. ~MapField();
}
inline void MetricRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &MetricRecord::ArenaDtor);
  }
}
void MetricRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.MetricRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .flwr.proto.MetricRecordValue> data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.MetricRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .flwr.proto.MetricRecordValue> data = 1;
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "flwr.proto.MetricRecord.DataEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MetricRecord_DataEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = MetricRecord_DataEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.MetricRecord)
  return target;
}

size_t MetricRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.MetricRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flwr.proto.MetricRecordValue> data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += MetricRecord_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricRecord::GetClassData() const { return &_class_data_; }

void MetricRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MetricRecord *>(to)->MergeFrom(
      static_cast<const MetricRecord &>(from));
}


void MetricRecord::MergeFrom(const MetricRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.MetricRecord)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricRecord::CopyFrom(const MetricRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.MetricRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricRecord::IsInitialized() const {
  return true;
}

void MetricRecord::InternalSwap(MetricRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[11]);
}

// ===================================================================

ConfigRecord_DataEntry_DoNotUse::ConfigRecord_DataEntry_DoNotUse() {}
ConfigRecord_DataEntry_DoNotUse::ConfigRecord_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ConfigRecord_DataEntry_DoNotUse::MergeFrom(const ConfigRecord_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ConfigRecord_DataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[12]);
}

// ===================================================================

class ConfigRecord::_Internal {
 public:
};

ConfigRecord::ConfigRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.ConfigRecord)
}
ConfigRecord::ConfigRecord(const ConfigRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.ConfigRecord)
}

void ConfigRecord::SharedCtor() {
}

ConfigRecord::~ConfigRecord() {
  // @@protoc_insertion_point(destructor:flwr.proto.ConfigRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigRecord::ArenaDtor(void* object) {
  ConfigRecord* _this = reinterpret_cast< ConfigRecord* >(object);
  (void)_this;
  _this->data_. ~MapField();
}
inline void ConfigRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ConfigRecord::ArenaDtor);
  }
}
void ConfigRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.ConfigRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .flwr.proto.ConfigRecordValue> data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.ConfigRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .flwr.proto.ConfigRecordValue> data = 1;
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "flwr.proto.ConfigRecord.DataEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ConfigRecord_DataEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = ConfigRecord_DataEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.ConfigRecord)
  return target;
}

size_t ConfigRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.ConfigRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flwr.proto.ConfigRecordValue> data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += ConfigRecord_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigRecord::GetClassData() const { return &_class_data_; }

void ConfigRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigRecord *>(to)->MergeFrom(
      static_cast<const ConfigRecord &>(from));
}


void ConfigRecord::MergeFrom(const ConfigRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.ConfigRecord)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigRecord::CopyFrom(const ConfigRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.ConfigRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRecord::IsInitialized() const {
  return true;
}

void ConfigRecord::InternalSwap(ConfigRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[13]);
}

// ===================================================================

RecordDict_ArraysEntry_DoNotUse::RecordDict_ArraysEntry_DoNotUse() {}
RecordDict_ArraysEntry_DoNotUse::RecordDict_ArraysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RecordDict_ArraysEntry_DoNotUse::MergeFrom(const RecordDict_ArraysEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RecordDict_ArraysEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[14]);
}

// ===================================================================

RecordDict_MetricsEntry_DoNotUse::RecordDict_MetricsEntry_DoNotUse() {}
RecordDict_MetricsEntry_DoNotUse::RecordDict_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RecordDict_MetricsEntry_DoNotUse::MergeFrom(const RecordDict_MetricsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RecordDict_MetricsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[15]);
}

// ===================================================================

RecordDict_ConfigsEntry_DoNotUse::RecordDict_ConfigsEntry_DoNotUse() {}
RecordDict_ConfigsEntry_DoNotUse::RecordDict_ConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RecordDict_ConfigsEntry_DoNotUse::MergeFrom(const RecordDict_ConfigsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RecordDict_ConfigsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[16]);
}

// ===================================================================

class RecordDict::_Internal {
 public:
};

RecordDict::RecordDict(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arrays_(arena),
  metrics_(arena),
  configs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.RecordDict)
}
RecordDict::RecordDict(const RecordDict& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  arrays_.MergeFrom(from.arrays_);
  metrics_.MergeFrom(from.metrics_);
  configs_.MergeFrom(from.configs_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.RecordDict)
}

void RecordDict::SharedCtor() {
}

RecordDict::~RecordDict() {
  // @@protoc_insertion_point(destructor:flwr.proto.RecordDict)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordDict::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordDict::ArenaDtor(void* object) {
  RecordDict* _this = reinterpret_cast< RecordDict* >(object);
  (void)_this;
  _this->arrays_. ~MapField();
  _this->metrics_. ~MapField();
  _this->configs_. ~MapField();
}
inline void RecordDict::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &RecordDict::ArenaDtor);
  }
}
void RecordDict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordDict::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.RecordDict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arrays_.Clear();
  metrics_.Clear();
  configs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordDict::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .flwr.proto.ArrayRecord> arrays = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&arrays_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .flwr.proto.MetricRecord> metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metrics_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .flwr.proto.ConfigRecord> configs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&configs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordDict::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.RecordDict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .flwr.proto.ArrayRecord> arrays = 1;
  if (!this->_internal_arrays().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "flwr.proto.RecordDict.ArraysEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_arrays().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_arrays().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >::const_iterator
          it = this->_internal_arrays().begin();
          it != this->_internal_arrays().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RecordDict_ArraysEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >::const_iterator
          it = this->_internal_arrays().begin();
          it != this->_internal_arrays().end(); ++it) {
        target = RecordDict_ArraysEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .flwr.proto.MetricRecord> metrics = 2;
  if (!this->_internal_metrics().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "flwr.proto.RecordDict.MetricsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metrics().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metrics().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >::const_iterator
          it = this->_internal_metrics().begin();
          it != this->_internal_metrics().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RecordDict_MetricsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >::const_iterator
          it = this->_internal_metrics().begin();
          it != this->_internal_metrics().end(); ++it) {
        target = RecordDict_MetricsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .flwr.proto.ConfigRecord> configs = 3;
  if (!this->_internal_configs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "flwr.proto.RecordDict.ConfigsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_configs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_configs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >::const_iterator
          it = this->_internal_configs().begin();
          it != this->_internal_configs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RecordDict_ConfigsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >::const_iterator
          it = this->_internal_configs().begin();
          it != this->_internal_configs().end(); ++it) {
        target = RecordDict_ConfigsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.RecordDict)
  return target;
}

size_t RecordDict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.RecordDict)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flwr.proto.ArrayRecord> arrays = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_arrays_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >::const_iterator
      it = this->_internal_arrays().begin();
      it != this->_internal_arrays().end(); ++it) {
    total_size += RecordDict_ArraysEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .flwr.proto.MetricRecord> metrics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metrics_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >::const_iterator
      it = this->_internal_metrics().begin();
      it != this->_internal_metrics().end(); ++it) {
    total_size += RecordDict_MetricsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .flwr.proto.ConfigRecord> configs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >::const_iterator
      it = this->_internal_configs().begin();
      it != this->_internal_configs().end(); ++it) {
    total_size += RecordDict_ConfigsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordDict::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordDict::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordDict::GetClassData() const { return &_class_data_; }

void RecordDict::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordDict *>(to)->MergeFrom(
      static_cast<const RecordDict &>(from));
}


void RecordDict::MergeFrom(const RecordDict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.RecordDict)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arrays_.MergeFrom(from.arrays_);
  metrics_.MergeFrom(from.metrics_);
  configs_.MergeFrom(from.configs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordDict::CopyFrom(const RecordDict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.RecordDict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordDict::IsInitialized() const {
  return true;
}

void RecordDict::InternalSwap(RecordDict* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arrays_.InternalSwap(&other->arrays_);
  metrics_.InternalSwap(&other->metrics_);
  configs_.InternalSwap(&other->configs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordDict::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frecorddict_2eproto_getter, &descriptor_table_flwr_2fproto_2frecorddict_2eproto_once,
      file_level_metadata_flwr_2fproto_2frecorddict_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flwr::proto::DoubleList* Arena::CreateMaybeMessage< ::flwr::proto::DoubleList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::DoubleList >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::SintList* Arena::CreateMaybeMessage< ::flwr::proto::SintList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::SintList >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::UintList* Arena::CreateMaybeMessage< ::flwr::proto::UintList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::UintList >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::BoolList* Arena::CreateMaybeMessage< ::flwr::proto::BoolList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::BoolList >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::StringList* Arena::CreateMaybeMessage< ::flwr::proto::StringList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::StringList >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::BytesList* Arena::CreateMaybeMessage< ::flwr::proto::BytesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::BytesList >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::Array* Arena::CreateMaybeMessage< ::flwr::proto::Array >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::Array >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::MetricRecordValue* Arena::CreateMaybeMessage< ::flwr::proto::MetricRecordValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::MetricRecordValue >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::ConfigRecordValue* Arena::CreateMaybeMessage< ::flwr::proto::ConfigRecordValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::ConfigRecordValue >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::ArrayRecord* Arena::CreateMaybeMessage< ::flwr::proto::ArrayRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::ArrayRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::MetricRecord_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::flwr::proto::MetricRecord_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::MetricRecord_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::MetricRecord* Arena::CreateMaybeMessage< ::flwr::proto::MetricRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::MetricRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::ConfigRecord_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::flwr::proto::ConfigRecord_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::ConfigRecord_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::ConfigRecord* Arena::CreateMaybeMessage< ::flwr::proto::ConfigRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::ConfigRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::RecordDict_ArraysEntry_DoNotUse* Arena::CreateMaybeMessage< ::flwr::proto::RecordDict_ArraysEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::RecordDict_ArraysEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::RecordDict_MetricsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flwr::proto::RecordDict_MetricsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::RecordDict_MetricsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::RecordDict_ConfigsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flwr::proto::RecordDict_ConfigsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::RecordDict_ConfigsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::RecordDict* Arena::CreateMaybeMessage< ::flwr::proto::RecordDict >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::RecordDict >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
