// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "flwr/proto/error.pb.h"
#include "flwr/proto/recorddict.pb.h"
#include "flwr/proto/transport.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flwr_2fproto_2fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flwr_2fproto_2fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flwr_2fproto_2fmessage_2eproto;
namespace flwr {
namespace proto {
class Context;
struct ContextDefaultTypeInternal;
extern ContextDefaultTypeInternal _Context_default_instance_;
class Context_NodeConfigEntry_DoNotUse;
struct Context_NodeConfigEntry_DoNotUseDefaultTypeInternal;
extern Context_NodeConfigEntry_DoNotUseDefaultTypeInternal _Context_NodeConfigEntry_DoNotUse_default_instance_;
class Context_RunConfigEntry_DoNotUse;
struct Context_RunConfigEntry_DoNotUseDefaultTypeInternal;
extern Context_RunConfigEntry_DoNotUseDefaultTypeInternal _Context_RunConfigEntry_DoNotUse_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> ::flwr::proto::Context* Arena::CreateMaybeMessage<::flwr::proto::Context>(Arena*);
template<> ::flwr::proto::Context_NodeConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::flwr::proto::Context_NodeConfigEntry_DoNotUse>(Arena*);
template<> ::flwr::proto::Context_RunConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::flwr::proto::Context_RunConfigEntry_DoNotUse>(Arena*);
template<> ::flwr::proto::Message* Arena::CreateMaybeMessage<::flwr::proto::Message>(Arena*);
template<> ::flwr::proto::Metadata* Arena::CreateMaybeMessage<::flwr::proto::Metadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flwr {
namespace proto {

// ===================================================================

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return new Message();
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kContentFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // .flwr.proto.Metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::flwr::proto::Metadata& metadata() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Metadata* release_metadata();
  ::flwr::proto::Metadata* mutable_metadata();
  void set_allocated_metadata(::flwr::proto::Metadata* metadata);
  private:
  const ::flwr::proto::Metadata& _internal_metadata() const;
  ::flwr::proto::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::flwr::proto::Metadata* metadata);
  ::flwr::proto::Metadata* unsafe_arena_release_metadata();

  // .flwr.proto.RecordDict content = 2;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const ::flwr::proto::RecordDict& content() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::RecordDict* release_content();
  ::flwr::proto::RecordDict* mutable_content();
  void set_allocated_content(::flwr::proto::RecordDict* content);
  private:
  const ::flwr::proto::RecordDict& _internal_content() const;
  ::flwr::proto::RecordDict* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      ::flwr::proto::RecordDict* content);
  ::flwr::proto::RecordDict* unsafe_arena_release_content();

  // .flwr.proto.Error error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::flwr::proto::Error& error() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Error* release_error();
  ::flwr::proto::Error* mutable_error();
  void set_allocated_error(::flwr::proto::Error* error);
  private:
  const ::flwr::proto::Error& _internal_error() const;
  ::flwr::proto::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::flwr::proto::Error* error);
  ::flwr::proto::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:flwr.proto.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flwr::proto::Metadata* metadata_;
  ::flwr::proto::RecordDict* content_;
  ::flwr::proto::Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class Context_NodeConfigEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Context_NodeConfigEntry_DoNotUse, 
    std::string, ::flwr::proto::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Context_NodeConfigEntry_DoNotUse, 
    std::string, ::flwr::proto::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Context_NodeConfigEntry_DoNotUse();
  explicit constexpr Context_NodeConfigEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Context_NodeConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Context_NodeConfigEntry_DoNotUse& other);
  static const Context_NodeConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Context_NodeConfigEntry_DoNotUse*>(&_Context_NodeConfigEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.Context.NodeConfigEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Context_RunConfigEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Context_RunConfigEntry_DoNotUse, 
    std::string, ::flwr::proto::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Context_RunConfigEntry_DoNotUse, 
    std::string, ::flwr::proto::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Context_RunConfigEntry_DoNotUse();
  explicit constexpr Context_RunConfigEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Context_RunConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Context_RunConfigEntry_DoNotUse& other);
  static const Context_RunConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Context_RunConfigEntry_DoNotUse*>(&_Context_RunConfigEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.Context.RunConfigEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Context final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.Context) */ {
 public:
  inline Context() : Context(nullptr) {}
  ~Context() override;
  explicit constexpr Context(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Context(const Context& from);
  Context(Context&& from) noexcept
    : Context() {
    *this = ::std::move(from);
  }

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }
  inline Context& operator=(Context&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Context& default_instance() {
    return *internal_default_instance();
  }
  static inline const Context* internal_default_instance() {
    return reinterpret_cast<const Context*>(
               &_Context_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Context& a, Context& b) {
    a.Swap(&b);
  }
  inline void Swap(Context* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Context* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Context* New() const final {
    return new Context();
  }

  Context* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Context>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Context& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Context& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Context* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.Context";
  }
  protected:
  explicit Context(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNodeConfigFieldNumber = 3,
    kRunConfigFieldNumber = 5,
    kStateFieldNumber = 4,
    kRunIdFieldNumber = 1,
    kNodeIdFieldNumber = 2,
  };
  // map<string, .flwr.proto.Scalar> node_config = 3;
  int node_config_size() const;
  private:
  int _internal_node_config_size() const;
  public:
  void clear_node_config();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
      _internal_node_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
      _internal_mutable_node_config();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
      node_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
      mutable_node_config();

  // map<string, .flwr.proto.Scalar> run_config = 5;
  int run_config_size() const;
  private:
  int _internal_run_config_size() const;
  public:
  void clear_run_config();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
      _internal_run_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
      _internal_mutable_run_config();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
      run_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
      mutable_run_config();

  // .flwr.proto.RecordDict state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::flwr::proto::RecordDict& state() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::RecordDict* release_state();
  ::flwr::proto::RecordDict* mutable_state();
  void set_allocated_state(::flwr::proto::RecordDict* state);
  private:
  const ::flwr::proto::RecordDict& _internal_state() const;
  ::flwr::proto::RecordDict* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::flwr::proto::RecordDict* state);
  ::flwr::proto::RecordDict* unsafe_arena_release_state();

  // uint64 run_id = 1;
  void clear_run_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 run_id() const;
  void set_run_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_run_id() const;
  void _internal_set_run_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 node_id = 2;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.Context)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Context_NodeConfigEntry_DoNotUse,
      std::string, ::flwr::proto::Scalar,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> node_config_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Context_RunConfigEntry_DoNotUse,
      std::string, ::flwr::proto::Scalar,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> run_config_;
  ::flwr::proto::RecordDict* state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 run_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit constexpr Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return new Metadata();
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 2,
    kReplyToMessageIdFieldNumber = 5,
    kGroupIdFieldNumber = 6,
    kMessageTypeFieldNumber = 8,
    kRunIdFieldNumber = 1,
    kSrcNodeIdFieldNumber = 3,
    kDstNodeIdFieldNumber = 4,
    kTtlFieldNumber = 7,
    kCreatedAtFieldNumber = 9,
  };
  // string message_id = 2;
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // string reply_to_message_id = 5;
  void clear_reply_to_message_id();
  const std::string& reply_to_message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_to_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_to_message_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_reply_to_message_id();
  void set_allocated_reply_to_message_id(std::string* reply_to_message_id);
  private:
  const std::string& _internal_reply_to_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_message_id(const std::string& value);
  std::string* _internal_mutable_reply_to_message_id();
  public:

  // string group_id = 6;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string message_type = 8;
  void clear_message_type();
  const std::string& message_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // uint64 run_id = 1;
  void clear_run_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 run_id() const;
  void set_run_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_run_id() const;
  void _internal_set_run_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 src_node_id = 3;
  void clear_src_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 src_node_id() const;
  void set_src_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_src_node_id() const;
  void _internal_set_src_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 dst_node_id = 4;
  void clear_dst_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 dst_node_id() const;
  void set_dst_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dst_node_id() const;
  void _internal_set_dst_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double ttl = 7;
  void clear_ttl();
  double ttl() const;
  void set_ttl(double value);
  private:
  double _internal_ttl() const;
  void _internal_set_ttl(double value);
  public:

  // double created_at = 9;
  void clear_created_at();
  double created_at() const;
  void set_created_at(double value);
  private:
  double _internal_created_at() const;
  void _internal_set_created_at(double value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_to_message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 run_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 src_node_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dst_node_id_;
  double ttl_;
  double created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// .flwr.proto.Metadata metadata = 1;
inline bool Message::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Message::has_metadata() const {
  return _internal_has_metadata();
}
inline void Message::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::flwr::proto::Metadata& Message::_internal_metadata() const {
  const ::flwr::proto::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Metadata&>(
      ::flwr::proto::_Metadata_default_instance_);
}
inline const ::flwr::proto::Metadata& Message::metadata() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Message.metadata)
  return _internal_metadata();
}
inline void Message::unsafe_arena_set_allocated_metadata(
    ::flwr::proto::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.Message.metadata)
}
inline ::flwr::proto::Metadata* Message::release_metadata() {
  
  ::flwr::proto::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Metadata* Message::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:flwr.proto.Message.metadata)
  
  ::flwr::proto::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::flwr::proto::Metadata* Message::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::flwr::proto::Metadata* Message::mutable_metadata() {
  ::flwr::proto::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Message.metadata)
  return _msg;
}
inline void Message::set_allocated_metadata(::flwr::proto::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::Metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Message.metadata)
}

// .flwr.proto.RecordDict content = 2;
inline bool Message::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool Message::has_content() const {
  return _internal_has_content();
}
inline const ::flwr::proto::RecordDict& Message::_internal_content() const {
  const ::flwr::proto::RecordDict* p = content_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::RecordDict&>(
      ::flwr::proto::_RecordDict_default_instance_);
}
inline const ::flwr::proto::RecordDict& Message::content() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Message.content)
  return _internal_content();
}
inline void Message::unsafe_arena_set_allocated_content(
    ::flwr::proto::RecordDict* content) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.Message.content)
}
inline ::flwr::proto::RecordDict* Message::release_content() {
  
  ::flwr::proto::RecordDict* temp = content_;
  content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::RecordDict* Message::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:flwr.proto.Message.content)
  
  ::flwr::proto::RecordDict* temp = content_;
  content_ = nullptr;
  return temp;
}
inline ::flwr::proto::RecordDict* Message::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::RecordDict>(GetArenaForAllocation());
    content_ = p;
  }
  return content_;
}
inline ::flwr::proto::RecordDict* Message::mutable_content() {
  ::flwr::proto::RecordDict* _msg = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Message.content)
  return _msg;
}
inline void Message::set_allocated_content(::flwr::proto::RecordDict* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content));
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Message.content)
}

// .flwr.proto.Error error = 3;
inline bool Message::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool Message::has_error() const {
  return _internal_has_error();
}
inline const ::flwr::proto::Error& Message::_internal_error() const {
  const ::flwr::proto::Error* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Error&>(
      ::flwr::proto::_Error_default_instance_);
}
inline const ::flwr::proto::Error& Message::error() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Message.error)
  return _internal_error();
}
inline void Message::unsafe_arena_set_allocated_error(
    ::flwr::proto::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.Message.error)
}
inline ::flwr::proto::Error* Message::release_error() {
  
  ::flwr::proto::Error* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Error* Message::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:flwr.proto.Message.error)
  
  ::flwr::proto::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::flwr::proto::Error* Message::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Error>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::flwr::proto::Error* Message::mutable_error() {
  ::flwr::proto::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Message.error)
  return _msg;
}
inline void Message::set_allocated_error(::flwr::proto::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Message.error)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Context

// uint64 run_id = 1;
inline void Context::clear_run_id() {
  run_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Context::_internal_run_id() const {
  return run_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Context::run_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Context.run_id)
  return _internal_run_id();
}
inline void Context::_internal_set_run_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  run_id_ = value;
}
inline void Context::set_run_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_run_id(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Context.run_id)
}

// uint64 node_id = 2;
inline void Context::clear_node_id() {
  node_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Context::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Context::node_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Context.node_id)
  return _internal_node_id();
}
inline void Context::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  node_id_ = value;
}
inline void Context::set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Context.node_id)
}

// map<string, .flwr.proto.Scalar> node_config = 3;
inline int Context::_internal_node_config_size() const {
  return node_config_.size();
}
inline int Context::node_config_size() const {
  return _internal_node_config_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
Context::_internal_node_config() const {
  return node_config_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
Context::node_config() const {
  // @@protoc_insertion_point(field_map:flwr.proto.Context.node_config)
  return _internal_node_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
Context::_internal_mutable_node_config() {
  return node_config_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
Context::mutable_node_config() {
  // @@protoc_insertion_point(field_mutable_map:flwr.proto.Context.node_config)
  return _internal_mutable_node_config();
}

// .flwr.proto.RecordDict state = 4;
inline bool Context::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Context::has_state() const {
  return _internal_has_state();
}
inline const ::flwr::proto::RecordDict& Context::_internal_state() const {
  const ::flwr::proto::RecordDict* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::RecordDict&>(
      ::flwr::proto::_RecordDict_default_instance_);
}
inline const ::flwr::proto::RecordDict& Context::state() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Context.state)
  return _internal_state();
}
inline void Context::unsafe_arena_set_allocated_state(
    ::flwr::proto::RecordDict* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.Context.state)
}
inline ::flwr::proto::RecordDict* Context::release_state() {
  
  ::flwr::proto::RecordDict* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::RecordDict* Context::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:flwr.proto.Context.state)
  
  ::flwr::proto::RecordDict* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::flwr::proto::RecordDict* Context::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::RecordDict>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::flwr::proto::RecordDict* Context::mutable_state() {
  ::flwr::proto::RecordDict* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Context.state)
  return _msg;
}
inline void Context::set_allocated_state(::flwr::proto::RecordDict* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Context.state)
}

// map<string, .flwr.proto.Scalar> run_config = 5;
inline int Context::_internal_run_config_size() const {
  return run_config_.size();
}
inline int Context::run_config_size() const {
  return _internal_run_config_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
Context::_internal_run_config() const {
  return run_config_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
Context::run_config() const {
  // @@protoc_insertion_point(field_map:flwr.proto.Context.run_config)
  return _internal_run_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
Context::_internal_mutable_run_config() {
  return run_config_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
Context::mutable_run_config() {
  // @@protoc_insertion_point(field_mutable_map:flwr.proto.Context.run_config)
  return _internal_mutable_run_config();
}

// -------------------------------------------------------------------

// Metadata

// uint64 run_id = 1;
inline void Metadata::clear_run_id() {
  run_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::_internal_run_id() const {
  return run_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::run_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Metadata.run_id)
  return _internal_run_id();
}
inline void Metadata::_internal_set_run_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  run_id_ = value;
}
inline void Metadata::set_run_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_run_id(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Metadata.run_id)
}

// string message_id = 2;
inline void Metadata::clear_message_id() {
  message_id_.ClearToEmpty();
}
inline const std::string& Metadata::message_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Metadata.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_message_id(ArgT0&& arg0, ArgT... args) {
 
 message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.Metadata.message_id)
}
inline std::string* Metadata::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Metadata.message_id)
  return _s;
}
inline const std::string& Metadata::_internal_message_id() const {
  return message_id_.Get();
}
inline void Metadata::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_message_id() {
  
  return message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_message_id() {
  // @@protoc_insertion_point(field_release:flwr.proto.Metadata.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Metadata.message_id)
}

// uint64 src_node_id = 3;
inline void Metadata::clear_src_node_id() {
  src_node_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::_internal_src_node_id() const {
  return src_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::src_node_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Metadata.src_node_id)
  return _internal_src_node_id();
}
inline void Metadata::_internal_set_src_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  src_node_id_ = value;
}
inline void Metadata::set_src_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_src_node_id(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Metadata.src_node_id)
}

// uint64 dst_node_id = 4;
inline void Metadata::clear_dst_node_id() {
  dst_node_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::_internal_dst_node_id() const {
  return dst_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::dst_node_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Metadata.dst_node_id)
  return _internal_dst_node_id();
}
inline void Metadata::_internal_set_dst_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dst_node_id_ = value;
}
inline void Metadata::set_dst_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dst_node_id(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Metadata.dst_node_id)
}

// string reply_to_message_id = 5;
inline void Metadata::clear_reply_to_message_id() {
  reply_to_message_id_.ClearToEmpty();
}
inline const std::string& Metadata::reply_to_message_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Metadata.reply_to_message_id)
  return _internal_reply_to_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_reply_to_message_id(ArgT0&& arg0, ArgT... args) {
 
 reply_to_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.Metadata.reply_to_message_id)
}
inline std::string* Metadata::mutable_reply_to_message_id() {
  std::string* _s = _internal_mutable_reply_to_message_id();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Metadata.reply_to_message_id)
  return _s;
}
inline const std::string& Metadata::_internal_reply_to_message_id() const {
  return reply_to_message_id_.Get();
}
inline void Metadata::_internal_set_reply_to_message_id(const std::string& value) {
  
  reply_to_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_reply_to_message_id() {
  
  return reply_to_message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_reply_to_message_id() {
  // @@protoc_insertion_point(field_release:flwr.proto.Metadata.reply_to_message_id)
  return reply_to_message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_reply_to_message_id(std::string* reply_to_message_id) {
  if (reply_to_message_id != nullptr) {
    
  } else {
    
  }
  reply_to_message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply_to_message_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Metadata.reply_to_message_id)
}

// string group_id = 6;
inline void Metadata::clear_group_id() {
  group_id_.ClearToEmpty();
}
inline const std::string& Metadata::group_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Metadata.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.Metadata.group_id)
}
inline std::string* Metadata::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Metadata.group_id)
  return _s;
}
inline const std::string& Metadata::_internal_group_id() const {
  return group_id_.Get();
}
inline void Metadata::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_group_id() {
  
  return group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_group_id() {
  // @@protoc_insertion_point(field_release:flwr.proto.Metadata.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Metadata.group_id)
}

// double ttl = 7;
inline void Metadata::clear_ttl() {
  ttl_ = 0;
}
inline double Metadata::_internal_ttl() const {
  return ttl_;
}
inline double Metadata::ttl() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Metadata.ttl)
  return _internal_ttl();
}
inline void Metadata::_internal_set_ttl(double value) {
  
  ttl_ = value;
}
inline void Metadata::set_ttl(double value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Metadata.ttl)
}

// string message_type = 8;
inline void Metadata::clear_message_type() {
  message_type_.ClearToEmpty();
}
inline const std::string& Metadata::message_type() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Metadata.message_type)
  return _internal_message_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_message_type(ArgT0&& arg0, ArgT... args) {
 
 message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.Metadata.message_type)
}
inline std::string* Metadata::mutable_message_type() {
  std::string* _s = _internal_mutable_message_type();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Metadata.message_type)
  return _s;
}
inline const std::string& Metadata::_internal_message_type() const {
  return message_type_.Get();
}
inline void Metadata::_internal_set_message_type(const std::string& value) {
  
  message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_message_type() {
  
  return message_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_message_type() {
  // @@protoc_insertion_point(field_release:flwr.proto.Metadata.message_type)
  return message_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Metadata.message_type)
}

// double created_at = 9;
inline void Metadata::clear_created_at() {
  created_at_ = 0;
}
inline double Metadata::_internal_created_at() const {
  return created_at_;
}
inline double Metadata::created_at() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Metadata.created_at)
  return _internal_created_at();
}
inline void Metadata::_internal_set_created_at(double value) {
  
  created_at_ = value;
}
inline void Metadata::set_created_at(double value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:flwr.proto.Metadata.created_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flwr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fmessage_2eproto
