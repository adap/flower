// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/fab.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2ffab_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2ffab_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flwr/proto/node.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flwr_2fproto_2ffab_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flwr_2fproto_2ffab_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flwr_2fproto_2ffab_2eproto;
namespace flwr {
namespace proto {
class Fab;
struct FabDefaultTypeInternal;
extern FabDefaultTypeInternal _Fab_default_instance_;
class GetFabRequest;
struct GetFabRequestDefaultTypeInternal;
extern GetFabRequestDefaultTypeInternal _GetFabRequest_default_instance_;
class GetFabResponse;
struct GetFabResponseDefaultTypeInternal;
extern GetFabResponseDefaultTypeInternal _GetFabResponse_default_instance_;
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> ::flwr::proto::Fab* Arena::CreateMaybeMessage<::flwr::proto::Fab>(Arena*);
template<> ::flwr::proto::GetFabRequest* Arena::CreateMaybeMessage<::flwr::proto::GetFabRequest>(Arena*);
template<> ::flwr::proto::GetFabResponse* Arena::CreateMaybeMessage<::flwr::proto::GetFabResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flwr {
namespace proto {

// ===================================================================

class Fab final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.Fab) */ {
 public:
  inline Fab() : Fab(nullptr) {}
  ~Fab() override;
  explicit constexpr Fab(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fab(const Fab& from);
  Fab(Fab&& from) noexcept
    : Fab() {
    *this = ::std::move(from);
  }

  inline Fab& operator=(const Fab& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fab& operator=(Fab&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fab& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fab* internal_default_instance() {
    return reinterpret_cast<const Fab*>(
               &_Fab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Fab& a, Fab& b) {
    a.Swap(&b);
  }
  inline void Swap(Fab* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fab* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fab* New() const final {
    return new Fab();
  }

  Fab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fab>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fab& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fab& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fab* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.Fab";
  }
  protected:
  explicit Fab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashStrFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string hash_str = 1;
  void clear_hash_str();
  const std::string& hash_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_hash_str();
  void set_allocated_hash_str(std::string* hash_str);
  private:
  const std::string& _internal_hash_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash_str(const std::string& value);
  std::string* _internal_mutable_hash_str();
  public:

  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_MUST_USE_RESULT std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.Fab)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffab_2eproto;
};
// -------------------------------------------------------------------

class GetFabRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.GetFabRequest) */ {
 public:
  inline GetFabRequest() : GetFabRequest(nullptr) {}
  ~GetFabRequest() override;
  explicit constexpr GetFabRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFabRequest(const GetFabRequest& from);
  GetFabRequest(GetFabRequest&& from) noexcept
    : GetFabRequest() {
    *this = ::std::move(from);
  }

  inline GetFabRequest& operator=(const GetFabRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFabRequest& operator=(GetFabRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFabRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFabRequest* internal_default_instance() {
    return reinterpret_cast<const GetFabRequest*>(
               &_GetFabRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetFabRequest& a, GetFabRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFabRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFabRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFabRequest* New() const final {
    return new GetFabRequest();
  }

  GetFabRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFabRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFabRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetFabRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFabRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.GetFabRequest";
  }
  protected:
  explicit GetFabRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashStrFieldNumber = 2,
    kNodeFieldNumber = 1,
  };
  // string hash_str = 2;
  void clear_hash_str();
  const std::string& hash_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_hash_str();
  void set_allocated_hash_str(std::string* hash_str);
  private:
  const std::string& _internal_hash_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash_str(const std::string& value);
  std::string* _internal_mutable_hash_str();
  public:

  // .flwr.proto.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::flwr::proto::Node& node() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Node* release_node();
  ::flwr::proto::Node* mutable_node();
  void set_allocated_node(::flwr::proto::Node* node);
  private:
  const ::flwr::proto::Node& _internal_node() const;
  ::flwr::proto::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::flwr::proto::Node* node);
  ::flwr::proto::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:flwr.proto.GetFabRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_str_;
  ::flwr::proto::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffab_2eproto;
};
// -------------------------------------------------------------------

class GetFabResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.GetFabResponse) */ {
 public:
  inline GetFabResponse() : GetFabResponse(nullptr) {}
  ~GetFabResponse() override;
  explicit constexpr GetFabResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFabResponse(const GetFabResponse& from);
  GetFabResponse(GetFabResponse&& from) noexcept
    : GetFabResponse() {
    *this = ::std::move(from);
  }

  inline GetFabResponse& operator=(const GetFabResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFabResponse& operator=(GetFabResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFabResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFabResponse* internal_default_instance() {
    return reinterpret_cast<const GetFabResponse*>(
               &_GetFabResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetFabResponse& a, GetFabResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFabResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFabResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFabResponse* New() const final {
    return new GetFabResponse();
  }

  GetFabResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFabResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFabResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetFabResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFabResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.GetFabResponse";
  }
  protected:
  explicit GetFabResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFabFieldNumber = 1,
  };
  // .flwr.proto.Fab fab = 1;
  bool has_fab() const;
  private:
  bool _internal_has_fab() const;
  public:
  void clear_fab();
  const ::flwr::proto::Fab& fab() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::Fab* release_fab();
  ::flwr::proto::Fab* mutable_fab();
  void set_allocated_fab(::flwr::proto::Fab* fab);
  private:
  const ::flwr::proto::Fab& _internal_fab() const;
  ::flwr::proto::Fab* _internal_mutable_fab();
  public:
  void unsafe_arena_set_allocated_fab(
      ::flwr::proto::Fab* fab);
  ::flwr::proto::Fab* unsafe_arena_release_fab();

  // @@protoc_insertion_point(class_scope:flwr.proto.GetFabResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flwr::proto::Fab* fab_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2ffab_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Fab

// string hash_str = 1;
inline void Fab::clear_hash_str() {
  hash_str_.ClearToEmpty();
}
inline const std::string& Fab::hash_str() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Fab.hash_str)
  return _internal_hash_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Fab::set_hash_str(ArgT0&& arg0, ArgT... args) {
 
 hash_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.Fab.hash_str)
}
inline std::string* Fab::mutable_hash_str() {
  std::string* _s = _internal_mutable_hash_str();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Fab.hash_str)
  return _s;
}
inline const std::string& Fab::_internal_hash_str() const {
  return hash_str_.Get();
}
inline void Fab::_internal_set_hash_str(const std::string& value) {
  
  hash_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Fab::_internal_mutable_hash_str() {
  
  return hash_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Fab::release_hash_str() {
  // @@protoc_insertion_point(field_release:flwr.proto.Fab.hash_str)
  return hash_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Fab::set_allocated_hash_str(std::string* hash_str) {
  if (hash_str != nullptr) {
    
  } else {
    
  }
  hash_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Fab.hash_str)
}

// bytes content = 2;
inline void Fab::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Fab::content() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Fab.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Fab::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.Fab.content)
}
inline std::string* Fab::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Fab.content)
  return _s;
}
inline const std::string& Fab::_internal_content() const {
  return content_.Get();
}
inline void Fab::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Fab::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Fab::release_content() {
  // @@protoc_insertion_point(field_release:flwr.proto.Fab.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Fab::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Fab.content)
}

// -------------------------------------------------------------------

// GetFabRequest

// .flwr.proto.Node node = 1;
inline bool GetFabRequest::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool GetFabRequest::has_node() const {
  return _internal_has_node();
}
inline const ::flwr::proto::Node& GetFabRequest::_internal_node() const {
  const ::flwr::proto::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Node&>(
      ::flwr::proto::_Node_default_instance_);
}
inline const ::flwr::proto::Node& GetFabRequest::node() const {
  // @@protoc_insertion_point(field_get:flwr.proto.GetFabRequest.node)
  return _internal_node();
}
inline void GetFabRequest::unsafe_arena_set_allocated_node(
    ::flwr::proto::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.GetFabRequest.node)
}
inline ::flwr::proto::Node* GetFabRequest::release_node() {
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Node* GetFabRequest::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:flwr.proto.GetFabRequest.node)
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::flwr::proto::Node* GetFabRequest::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::flwr::proto::Node* GetFabRequest::mutable_node() {
  ::flwr::proto::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:flwr.proto.GetFabRequest.node)
  return _msg;
}
inline void GetFabRequest::set_allocated_node(::flwr::proto::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.GetFabRequest.node)
}

// string hash_str = 2;
inline void GetFabRequest::clear_hash_str() {
  hash_str_.ClearToEmpty();
}
inline const std::string& GetFabRequest::hash_str() const {
  // @@protoc_insertion_point(field_get:flwr.proto.GetFabRequest.hash_str)
  return _internal_hash_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFabRequest::set_hash_str(ArgT0&& arg0, ArgT... args) {
 
 hash_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.GetFabRequest.hash_str)
}
inline std::string* GetFabRequest::mutable_hash_str() {
  std::string* _s = _internal_mutable_hash_str();
  // @@protoc_insertion_point(field_mutable:flwr.proto.GetFabRequest.hash_str)
  return _s;
}
inline const std::string& GetFabRequest::_internal_hash_str() const {
  return hash_str_.Get();
}
inline void GetFabRequest::_internal_set_hash_str(const std::string& value) {
  
  hash_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFabRequest::_internal_mutable_hash_str() {
  
  return hash_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFabRequest::release_hash_str() {
  // @@protoc_insertion_point(field_release:flwr.proto.GetFabRequest.hash_str)
  return hash_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFabRequest::set_allocated_hash_str(std::string* hash_str) {
  if (hash_str != nullptr) {
    
  } else {
    
  }
  hash_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.GetFabRequest.hash_str)
}

// -------------------------------------------------------------------

// GetFabResponse

// .flwr.proto.Fab fab = 1;
inline bool GetFabResponse::_internal_has_fab() const {
  return this != internal_default_instance() && fab_ != nullptr;
}
inline bool GetFabResponse::has_fab() const {
  return _internal_has_fab();
}
inline void GetFabResponse::clear_fab() {
  if (GetArenaForAllocation() == nullptr && fab_ != nullptr) {
    delete fab_;
  }
  fab_ = nullptr;
}
inline const ::flwr::proto::Fab& GetFabResponse::_internal_fab() const {
  const ::flwr::proto::Fab* p = fab_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Fab&>(
      ::flwr::proto::_Fab_default_instance_);
}
inline const ::flwr::proto::Fab& GetFabResponse::fab() const {
  // @@protoc_insertion_point(field_get:flwr.proto.GetFabResponse.fab)
  return _internal_fab();
}
inline void GetFabResponse::unsafe_arena_set_allocated_fab(
    ::flwr::proto::Fab* fab) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fab_);
  }
  fab_ = fab;
  if (fab) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.GetFabResponse.fab)
}
inline ::flwr::proto::Fab* GetFabResponse::release_fab() {
  
  ::flwr::proto::Fab* temp = fab_;
  fab_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Fab* GetFabResponse::unsafe_arena_release_fab() {
  // @@protoc_insertion_point(field_release:flwr.proto.GetFabResponse.fab)
  
  ::flwr::proto::Fab* temp = fab_;
  fab_ = nullptr;
  return temp;
}
inline ::flwr::proto::Fab* GetFabResponse::_internal_mutable_fab() {
  
  if (fab_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Fab>(GetArenaForAllocation());
    fab_ = p;
  }
  return fab_;
}
inline ::flwr::proto::Fab* GetFabResponse::mutable_fab() {
  ::flwr::proto::Fab* _msg = _internal_mutable_fab();
  // @@protoc_insertion_point(field_mutable:flwr.proto.GetFabResponse.fab)
  return _msg;
}
inline void GetFabResponse::set_allocated_fab(::flwr::proto::Fab* fab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fab_;
  }
  if (fab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flwr::proto::Fab>::GetOwningArena(fab);
    if (message_arena != submessage_arena) {
      fab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fab, submessage_arena);
    }
    
  } else {
    
  }
  fab_ = fab;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.GetFabResponse.fab)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flwr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2ffab_2eproto
