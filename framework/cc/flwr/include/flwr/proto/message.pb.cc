// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/message.proto

#include "flwr/proto/message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flwr {
namespace proto {
constexpr Message::Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , content_(nullptr)
  , error_(nullptr){}
struct MessageDefaultTypeInternal {
  constexpr MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;
constexpr Context_NodeConfigEntry_DoNotUse::Context_NodeConfigEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Context_NodeConfigEntry_DoNotUseDefaultTypeInternal {
  constexpr Context_NodeConfigEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Context_NodeConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Context_NodeConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Context_NodeConfigEntry_DoNotUseDefaultTypeInternal _Context_NodeConfigEntry_DoNotUse_default_instance_;
constexpr Context_RunConfigEntry_DoNotUse::Context_RunConfigEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Context_RunConfigEntry_DoNotUseDefaultTypeInternal {
  constexpr Context_RunConfigEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Context_RunConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Context_RunConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Context_RunConfigEntry_DoNotUseDefaultTypeInternal _Context_RunConfigEntry_DoNotUse_default_instance_;
constexpr Context::Context(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_config_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , run_config_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , state_(nullptr)
  , run_id_(uint64_t{0u})
  , node_id_(uint64_t{0u}){}
struct ContextDefaultTypeInternal {
  constexpr ContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContextDefaultTypeInternal() {}
  union {
    Context _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContextDefaultTypeInternal _Context_default_instance_;
constexpr Metadata::Metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reply_to_message_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , run_id_(uint64_t{0u})
  , src_node_id_(uint64_t{0u})
  , dst_node_id_(uint64_t{0u})
  , ttl_(0)
  , created_at_(0){}
struct MetadataDefaultTypeInternal {
  constexpr MetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace proto
}  // namespace flwr
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flwr_2fproto_2fmessage_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flwr_2fproto_2fmessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flwr_2fproto_2fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flwr_2fproto_2fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Message, metadata_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Message, content_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Message, error_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context_NodeConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context_NodeConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context_NodeConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context_NodeConfigEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context_RunConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context_RunConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context_RunConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context_RunConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context, run_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context, node_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context, node_config_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context, state_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Context, run_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Metadata, run_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Metadata, message_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Metadata, src_node_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Metadata, dst_node_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Metadata, reply_to_message_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Metadata, group_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Metadata, ttl_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Metadata, message_type_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Metadata, created_at_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flwr::proto::Message)},
  { 9, 17, -1, sizeof(::flwr::proto::Context_NodeConfigEntry_DoNotUse)},
  { 19, 27, -1, sizeof(::flwr::proto::Context_RunConfigEntry_DoNotUse)},
  { 29, -1, -1, sizeof(::flwr::proto::Context)},
  { 40, -1, -1, sizeof(::flwr::proto::Metadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_Context_NodeConfigEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_Context_RunConfigEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_Context_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flwr::proto::_Metadata_default_instance_),
};

const char descriptor_table_protodef_flwr_2fproto_2fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030flwr/proto/message.proto\022\nflwr.proto\032\026"
  "flwr/proto/error.proto\032\033flwr/proto/recor"
  "ddict.proto\032\032flwr/proto/transport.proto\""
  "|\n\007Message\022&\n\010metadata\030\001 \001(\0132\024.flwr.prot"
  "o.Metadata\022\'\n\007content\030\002 \001(\0132\026.flwr.proto"
  ".RecordDict\022 \n\005error\030\003 \001(\0132\021.flwr.proto."
  "Error\"\320\002\n\007Context\022\016\n\006run_id\030\001 \001(\004\022\017\n\007nod"
  "e_id\030\002 \001(\004\0228\n\013node_config\030\003 \003(\0132#.flwr.p"
  "roto.Context.NodeConfigEntry\022%\n\005state\030\004 "
  "\001(\0132\026.flwr.proto.RecordDict\0226\n\nrun_confi"
  "g\030\005 \003(\0132\".flwr.proto.Context.RunConfigEn"
  "try\032E\n\017NodeConfigEntry\022\013\n\003key\030\001 \001(\t\022!\n\005v"
  "alue\030\002 \001(\0132\022.flwr.proto.Scalar:\0028\001\032D\n\016Ru"
  "nConfigEntry\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\013"
  "2\022.flwr.proto.Scalar:\0028\001\"\276\001\n\010Metadata\022\016\n"
  "\006run_id\030\001 \001(\004\022\022\n\nmessage_id\030\002 \001(\t\022\023\n\013src"
  "_node_id\030\003 \001(\004\022\023\n\013dst_node_id\030\004 \001(\004\022\033\n\023r"
  "eply_to_message_id\030\005 \001(\t\022\020\n\010group_id\030\006 \001"
  "(\t\022\013\n\003ttl\030\007 \001(\001\022\024\n\014message_type\030\010 \001(\t\022\022\n"
  "\ncreated_at\030\t \001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flwr_2fproto_2fmessage_2eproto_deps[3] = {
  &::descriptor_table_flwr_2fproto_2ferror_2eproto,
  &::descriptor_table_flwr_2fproto_2frecorddict_2eproto,
  &::descriptor_table_flwr_2fproto_2ftransport_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flwr_2fproto_2fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flwr_2fproto_2fmessage_2eproto = {
  false, false, 785, descriptor_table_protodef_flwr_2fproto_2fmessage_2eproto, "flwr/proto/message.proto", 
  &descriptor_table_flwr_2fproto_2fmessage_2eproto_once, descriptor_table_flwr_2fproto_2fmessage_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_flwr_2fproto_2fmessage_2eproto::offsets,
  file_level_metadata_flwr_2fproto_2fmessage_2eproto, file_level_enum_descriptors_flwr_2fproto_2fmessage_2eproto, file_level_service_descriptors_flwr_2fproto_2fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flwr_2fproto_2fmessage_2eproto_getter() {
  return &descriptor_table_flwr_2fproto_2fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flwr_2fproto_2fmessage_2eproto(&descriptor_table_flwr_2fproto_2fmessage_2eproto);
namespace flwr {
namespace proto {

// ===================================================================

class Message::_Internal {
 public:
  static const ::flwr::proto::Metadata& metadata(const Message* msg);
  static const ::flwr::proto::RecordDict& content(const Message* msg);
  static const ::flwr::proto::Error& error(const Message* msg);
};

const ::flwr::proto::Metadata&
Message::_Internal::metadata(const Message* msg) {
  return *msg->metadata_;
}
const ::flwr::proto::RecordDict&
Message::_Internal::content(const Message* msg) {
  return *msg->content_;
}
const ::flwr::proto::Error&
Message::_Internal::error(const Message* msg) {
  return *msg->error_;
}
void Message::clear_content() {
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
}
void Message::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::flwr::proto::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_content()) {
    content_ = new ::flwr::proto::RecordDict(*from.content_);
  } else {
    content_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::flwr::proto::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flwr.proto.Message)
}

void Message::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(error_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:flwr.proto.Message)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete content_;
  if (this != internal_default_instance()) delete error_;
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flwr.proto.Metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.RecordDict content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flwr.proto.Metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // .flwr.proto.RecordDict content = 2;
  if (this->_internal_has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::content(this), target, stream);
  }

  // .flwr.proto.Error error = 3;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flwr.proto.Metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .flwr.proto.RecordDict content = 2;
  if (this->_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  // .flwr.proto.Error error = 3;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }

void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message *>(to)->MergeFrom(
      static_cast<const Message &>(from));
}


void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.Message)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::flwr::proto::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_content()) {
    _internal_mutable_content()->::flwr::proto::RecordDict::MergeFrom(from._internal_content());
  }
  if (from._internal_has_error()) {
    _internal_mutable_error()->::flwr::proto::Error::MergeFrom(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, error_)
      + sizeof(Message::error_)
      - PROTOBUF_FIELD_OFFSET(Message, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fmessage_2eproto_getter, &descriptor_table_flwr_2fproto_2fmessage_2eproto_once,
      file_level_metadata_flwr_2fproto_2fmessage_2eproto[0]);
}

// ===================================================================

Context_NodeConfigEntry_DoNotUse::Context_NodeConfigEntry_DoNotUse() {}
Context_NodeConfigEntry_DoNotUse::Context_NodeConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Context_NodeConfigEntry_DoNotUse::MergeFrom(const Context_NodeConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Context_NodeConfigEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fmessage_2eproto_getter, &descriptor_table_flwr_2fproto_2fmessage_2eproto_once,
      file_level_metadata_flwr_2fproto_2fmessage_2eproto[1]);
}

// ===================================================================

Context_RunConfigEntry_DoNotUse::Context_RunConfigEntry_DoNotUse() {}
Context_RunConfigEntry_DoNotUse::Context_RunConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Context_RunConfigEntry_DoNotUse::MergeFrom(const Context_RunConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Context_RunConfigEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fmessage_2eproto_getter, &descriptor_table_flwr_2fproto_2fmessage_2eproto_once,
      file_level_metadata_flwr_2fproto_2fmessage_2eproto[2]);
}

// ===================================================================

class Context::_Internal {
 public:
  static const ::flwr::proto::RecordDict& state(const Context* msg);
};

const ::flwr::proto::RecordDict&
Context::_Internal::state(const Context* msg) {
  return *msg->state_;
}
void Context::clear_node_config() {
  node_config_.Clear();
}
void Context::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
void Context::clear_run_config() {
  run_config_.Clear();
}
Context::Context(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  node_config_(arena),
  run_config_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.Context)
}
Context::Context(const Context& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_config_.MergeFrom(from.node_config_);
  run_config_.MergeFrom(from.run_config_);
  if (from._internal_has_state()) {
    state_ = new ::flwr::proto::RecordDict(*from.state_);
  } else {
    state_ = nullptr;
  }
  ::memcpy(&run_id_, &from.run_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&run_id_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:flwr.proto.Context)
}

void Context::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&state_)) + sizeof(node_id_));
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:flwr.proto.Context)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Context::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete state_;
}

void Context::ArenaDtor(void* object) {
  Context* _this = reinterpret_cast< Context* >(object);
  (void)_this;
  _this->node_config_. ~MapField();
  _this->run_config_. ~MapField();
}
inline void Context::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Context::ArenaDtor);
  }
}
void Context::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.Context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_config_.Clear();
  run_config_.Clear();
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  ::memset(&run_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&run_id_)) + sizeof(node_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Context::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .flwr.proto.Scalar> node_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&node_config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.RecordDict state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .flwr.proto.Scalar> run_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&run_config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Context::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.Context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_run_id(), target);
  }

  // uint64 node_id = 2;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_node_id(), target);
  }

  // map<string, .flwr.proto.Scalar> node_config = 3;
  if (!this->_internal_node_config().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "flwr.proto.Context.NodeConfigEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_node_config().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_node_config().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_iterator
          it = this->_internal_node_config().begin();
          it != this->_internal_node_config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Context_NodeConfigEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_iterator
          it = this->_internal_node_config().begin();
          it != this->_internal_node_config().end(); ++it) {
        target = Context_NodeConfigEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .flwr.proto.RecordDict state = 4;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::state(this), target, stream);
  }

  // map<string, .flwr.proto.Scalar> run_config = 5;
  if (!this->_internal_run_config().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "flwr.proto.Context.RunConfigEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_run_config().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_run_config().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_iterator
          it = this->_internal_run_config().begin();
          it != this->_internal_run_config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Context_RunConfigEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_iterator
          it = this->_internal_run_config().begin();
          it != this->_internal_run_config().end(); ++it) {
        target = Context_RunConfigEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.Context)
  return target;
}

size_t Context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.Context)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flwr.proto.Scalar> node_config = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_node_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_iterator
      it = this->_internal_node_config().begin();
      it != this->_internal_node_config().end(); ++it) {
    total_size += Context_NodeConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .flwr.proto.Scalar> run_config = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_run_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_iterator
      it = this->_internal_run_config().begin();
      it != this->_internal_run_config().end(); ++it) {
    total_size += Context_RunConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .flwr.proto.RecordDict state = 4;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_run_id());
  }

  // uint64 node_id = 2;
  if (this->_internal_node_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Context::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Context::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Context::GetClassData() const { return &_class_data_; }

void Context::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Context *>(to)->MergeFrom(
      static_cast<const Context &>(from));
}


void Context::MergeFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.Context)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_config_.MergeFrom(from.node_config_);
  run_config_.MergeFrom(from.run_config_);
  if (from._internal_has_state()) {
    _internal_mutable_state()->::flwr::proto::RecordDict::MergeFrom(from._internal_state());
  }
  if (from._internal_run_id() != 0) {
    _internal_set_run_id(from._internal_run_id());
  }
  if (from._internal_node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {
  return true;
}

void Context::InternalSwap(Context* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  node_config_.InternalSwap(&other->node_config_);
  run_config_.InternalSwap(&other->run_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Context, node_id_)
      + sizeof(Context::node_id_)
      - PROTOBUF_FIELD_OFFSET(Context, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Context::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fmessage_2eproto_getter, &descriptor_table_flwr_2fproto_2fmessage_2eproto_once,
      file_level_metadata_flwr_2fproto_2fmessage_2eproto[3]);
}

// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_id(), 
      GetArenaForAllocation());
  }
  reply_to_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reply_to_message_id().empty()) {
    reply_to_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reply_to_message_id(), 
      GetArenaForAllocation());
  }
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_id(), 
      GetArenaForAllocation());
  }
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_type().empty()) {
    message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&run_id_, &from.run_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&run_id_)) + sizeof(created_at_));
  // @@protoc_insertion_point(copy_constructor:flwr.proto.Metadata)
}

void Metadata::SharedCtor() {
message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reply_to_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&run_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&run_id_)) + sizeof(created_at_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:flwr.proto.Metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reply_to_message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  (void)_this;
}
void Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmpty();
  reply_to_message_id_.ClearToEmpty();
  group_id_.ClearToEmpty();
  message_type_.ClearToEmpty();
  ::memset(&run_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&run_id_)) + sizeof(created_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flwr.proto.Metadata.message_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 src_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          src_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dst_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dst_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reply_to_message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reply_to_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flwr.proto.Metadata.reply_to_message_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string group_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flwr.proto.Metadata.group_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double ttl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string message_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flwr.proto.Metadata.message_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double created_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_run_id(), target);
  }

  // string message_id = 2;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.Metadata.message_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_id(), target);
  }

  // uint64 src_node_id = 3;
  if (this->_internal_src_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_src_node_id(), target);
  }

  // uint64 dst_node_id = 4;
  if (this->_internal_dst_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_dst_node_id(), target);
  }

  // string reply_to_message_id = 5;
  if (!this->_internal_reply_to_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_to_message_id().data(), static_cast<int>(this->_internal_reply_to_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.Metadata.reply_to_message_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reply_to_message_id(), target);
  }

  // string group_id = 6;
  if (!this->_internal_group_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.Metadata.group_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_group_id(), target);
  }

  // double ttl = 7;
  if (!(this->_internal_ttl() <= 0 && this->_internal_ttl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_ttl(), target);
  }

  // string message_type = 8;
  if (!this->_internal_message_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.Metadata.message_type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_message_type(), target);
  }

  // double created_at = 9;
  if (!(this->_internal_created_at() <= 0 && this->_internal_created_at() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_created_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 2;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string reply_to_message_id = 5;
  if (!this->_internal_reply_to_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_to_message_id());
  }

  // string group_id = 6;
  if (!this->_internal_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  // string message_type = 8;
  if (!this->_internal_message_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_type());
  }

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_run_id());
  }

  // uint64 src_node_id = 3;
  if (this->_internal_src_node_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_src_node_id());
  }

  // uint64 dst_node_id = 4;
  if (this->_internal_dst_node_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_dst_node_id());
  }

  // double ttl = 7;
  if (!(this->_internal_ttl() <= 0 && this->_internal_ttl() >= 0)) {
    total_size += 1 + 8;
  }

  // double created_at = 9;
  if (!(this->_internal_created_at() <= 0 && this->_internal_created_at() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }

void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Metadata *>(to)->MergeFrom(
      static_cast<const Metadata &>(from));
}


void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_reply_to_message_id().empty()) {
    _internal_set_reply_to_message_id(from._internal_reply_to_message_id());
  }
  if (!from._internal_group_id().empty()) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (!from._internal_message_type().empty()) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (from._internal_run_id() != 0) {
    _internal_set_run_id(from._internal_run_id());
  }
  if (from._internal_src_node_id() != 0) {
    _internal_set_src_node_id(from._internal_src_node_id());
  }
  if (from._internal_dst_node_id() != 0) {
    _internal_set_dst_node_id(from._internal_dst_node_id());
  }
  if (!(from._internal_ttl() <= 0 && from._internal_ttl() >= 0)) {
    _internal_set_ttl(from._internal_ttl());
  }
  if (!(from._internal_created_at() <= 0 && from._internal_created_at() >= 0)) {
    _internal_set_created_at(from._internal_created_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reply_to_message_id_, lhs_arena,
      &other->reply_to_message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_id_, lhs_arena,
      &other->group_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_type_, lhs_arena,
      &other->message_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata, created_at_)
      + sizeof(Metadata::created_at_)
      - PROTOBUF_FIELD_OFFSET(Metadata, run_id_)>(
          reinterpret_cast<char*>(&run_id_),
          reinterpret_cast<char*>(&other->run_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fmessage_2eproto_getter, &descriptor_table_flwr_2fproto_2fmessage_2eproto_once,
      file_level_metadata_flwr_2fproto_2fmessage_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flwr::proto::Message* Arena::CreateMaybeMessage< ::flwr::proto::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::Context_NodeConfigEntry_DoNotUse* Arena::CreateMaybeMessage< ::flwr::proto::Context_NodeConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::Context_NodeConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::Context_RunConfigEntry_DoNotUse* Arena::CreateMaybeMessage< ::flwr::proto::Context_RunConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::Context_RunConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::Context* Arena::CreateMaybeMessage< ::flwr::proto::Context >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::Context >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::Metadata* Arena::CreateMaybeMessage< ::flwr::proto::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::Metadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
