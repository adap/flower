// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/recorddict.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2frecorddict_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2frecorddict_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flwr_2fproto_2frecorddict_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flwr_2fproto_2frecorddict_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flwr_2fproto_2frecorddict_2eproto;
namespace flwr {
namespace proto {
class Array;
struct ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class ArrayRecord;
struct ArrayRecordDefaultTypeInternal;
extern ArrayRecordDefaultTypeInternal _ArrayRecord_default_instance_;
class BoolList;
struct BoolListDefaultTypeInternal;
extern BoolListDefaultTypeInternal _BoolList_default_instance_;
class BytesList;
struct BytesListDefaultTypeInternal;
extern BytesListDefaultTypeInternal _BytesList_default_instance_;
class ConfigRecord;
struct ConfigRecordDefaultTypeInternal;
extern ConfigRecordDefaultTypeInternal _ConfigRecord_default_instance_;
class ConfigRecordValue;
struct ConfigRecordValueDefaultTypeInternal;
extern ConfigRecordValueDefaultTypeInternal _ConfigRecordValue_default_instance_;
class ConfigRecord_DataEntry_DoNotUse;
struct ConfigRecord_DataEntry_DoNotUseDefaultTypeInternal;
extern ConfigRecord_DataEntry_DoNotUseDefaultTypeInternal _ConfigRecord_DataEntry_DoNotUse_default_instance_;
class DoubleList;
struct DoubleListDefaultTypeInternal;
extern DoubleListDefaultTypeInternal _DoubleList_default_instance_;
class MetricRecord;
struct MetricRecordDefaultTypeInternal;
extern MetricRecordDefaultTypeInternal _MetricRecord_default_instance_;
class MetricRecordValue;
struct MetricRecordValueDefaultTypeInternal;
extern MetricRecordValueDefaultTypeInternal _MetricRecordValue_default_instance_;
class MetricRecord_DataEntry_DoNotUse;
struct MetricRecord_DataEntry_DoNotUseDefaultTypeInternal;
extern MetricRecord_DataEntry_DoNotUseDefaultTypeInternal _MetricRecord_DataEntry_DoNotUse_default_instance_;
class RecordDict;
struct RecordDictDefaultTypeInternal;
extern RecordDictDefaultTypeInternal _RecordDict_default_instance_;
class RecordDict_ArraysEntry_DoNotUse;
struct RecordDict_ArraysEntry_DoNotUseDefaultTypeInternal;
extern RecordDict_ArraysEntry_DoNotUseDefaultTypeInternal _RecordDict_ArraysEntry_DoNotUse_default_instance_;
class RecordDict_ConfigsEntry_DoNotUse;
struct RecordDict_ConfigsEntry_DoNotUseDefaultTypeInternal;
extern RecordDict_ConfigsEntry_DoNotUseDefaultTypeInternal _RecordDict_ConfigsEntry_DoNotUse_default_instance_;
class RecordDict_MetricsEntry_DoNotUse;
struct RecordDict_MetricsEntry_DoNotUseDefaultTypeInternal;
extern RecordDict_MetricsEntry_DoNotUseDefaultTypeInternal _RecordDict_MetricsEntry_DoNotUse_default_instance_;
class SintList;
struct SintListDefaultTypeInternal;
extern SintListDefaultTypeInternal _SintList_default_instance_;
class StringList;
struct StringListDefaultTypeInternal;
extern StringListDefaultTypeInternal _StringList_default_instance_;
class UintList;
struct UintListDefaultTypeInternal;
extern UintListDefaultTypeInternal _UintList_default_instance_;
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> ::flwr::proto::Array* Arena::CreateMaybeMessage<::flwr::proto::Array>(Arena*);
template<> ::flwr::proto::ArrayRecord* Arena::CreateMaybeMessage<::flwr::proto::ArrayRecord>(Arena*);
template<> ::flwr::proto::BoolList* Arena::CreateMaybeMessage<::flwr::proto::BoolList>(Arena*);
template<> ::flwr::proto::BytesList* Arena::CreateMaybeMessage<::flwr::proto::BytesList>(Arena*);
template<> ::flwr::proto::ConfigRecord* Arena::CreateMaybeMessage<::flwr::proto::ConfigRecord>(Arena*);
template<> ::flwr::proto::ConfigRecordValue* Arena::CreateMaybeMessage<::flwr::proto::ConfigRecordValue>(Arena*);
template<> ::flwr::proto::ConfigRecord_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::flwr::proto::ConfigRecord_DataEntry_DoNotUse>(Arena*);
template<> ::flwr::proto::DoubleList* Arena::CreateMaybeMessage<::flwr::proto::DoubleList>(Arena*);
template<> ::flwr::proto::MetricRecord* Arena::CreateMaybeMessage<::flwr::proto::MetricRecord>(Arena*);
template<> ::flwr::proto::MetricRecordValue* Arena::CreateMaybeMessage<::flwr::proto::MetricRecordValue>(Arena*);
template<> ::flwr::proto::MetricRecord_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::flwr::proto::MetricRecord_DataEntry_DoNotUse>(Arena*);
template<> ::flwr::proto::RecordDict* Arena::CreateMaybeMessage<::flwr::proto::RecordDict>(Arena*);
template<> ::flwr::proto::RecordDict_ArraysEntry_DoNotUse* Arena::CreateMaybeMessage<::flwr::proto::RecordDict_ArraysEntry_DoNotUse>(Arena*);
template<> ::flwr::proto::RecordDict_ConfigsEntry_DoNotUse* Arena::CreateMaybeMessage<::flwr::proto::RecordDict_ConfigsEntry_DoNotUse>(Arena*);
template<> ::flwr::proto::RecordDict_MetricsEntry_DoNotUse* Arena::CreateMaybeMessage<::flwr::proto::RecordDict_MetricsEntry_DoNotUse>(Arena*);
template<> ::flwr::proto::SintList* Arena::CreateMaybeMessage<::flwr::proto::SintList>(Arena*);
template<> ::flwr::proto::StringList* Arena::CreateMaybeMessage<::flwr::proto::StringList>(Arena*);
template<> ::flwr::proto::UintList* Arena::CreateMaybeMessage<::flwr::proto::UintList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flwr {
namespace proto {

// ===================================================================

class DoubleList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.DoubleList) */ {
 public:
  inline DoubleList() : DoubleList(nullptr) {}
  ~DoubleList() override;
  explicit constexpr DoubleList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleList(const DoubleList& from);
  DoubleList(DoubleList&& from) noexcept
    : DoubleList() {
    *this = ::std::move(from);
  }

  inline DoubleList& operator=(const DoubleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleList& operator=(DoubleList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoubleList& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleList* internal_default_instance() {
    return reinterpret_cast<const DoubleList*>(
               &_DoubleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DoubleList& a, DoubleList& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleList* New() const final {
    return new DoubleList();
  }

  DoubleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DoubleList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DoubleList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.DoubleList";
  }
  protected:
  explicit DoubleList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsFieldNumber = 1,
  };
  // repeated double vals = 1;
  int vals_size() const;
  private:
  int _internal_vals_size() const;
  public:
  void clear_vals();
  private:
  double _internal_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_vals() const;
  void _internal_add_vals(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_vals();
  public:
  double vals(int index) const;
  void set_vals(int index, double value);
  void add_vals(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_vals();

  // @@protoc_insertion_point(class_scope:flwr.proto.DoubleList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > vals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class SintList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.SintList) */ {
 public:
  inline SintList() : SintList(nullptr) {}
  ~SintList() override;
  explicit constexpr SintList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SintList(const SintList& from);
  SintList(SintList&& from) noexcept
    : SintList() {
    *this = ::std::move(from);
  }

  inline SintList& operator=(const SintList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SintList& operator=(SintList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SintList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SintList* internal_default_instance() {
    return reinterpret_cast<const SintList*>(
               &_SintList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SintList& a, SintList& b) {
    a.Swap(&b);
  }
  inline void Swap(SintList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SintList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SintList* New() const final {
    return new SintList();
  }

  SintList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SintList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SintList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SintList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SintList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.SintList";
  }
  protected:
  explicit SintList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsFieldNumber = 1,
  };
  // repeated sint64 vals = 1;
  int vals_size() const;
  private:
  int _internal_vals_size() const;
  public:
  void clear_vals();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_vals() const;
  void _internal_add_vals(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_vals();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 vals(int index) const;
  void set_vals(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_vals(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_vals();

  // @@protoc_insertion_point(class_scope:flwr.proto.SintList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > vals_;
  mutable std::atomic<int> _vals_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class UintList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.UintList) */ {
 public:
  inline UintList() : UintList(nullptr) {}
  ~UintList() override;
  explicit constexpr UintList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UintList(const UintList& from);
  UintList(UintList&& from) noexcept
    : UintList() {
    *this = ::std::move(from);
  }

  inline UintList& operator=(const UintList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UintList& operator=(UintList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UintList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UintList* internal_default_instance() {
    return reinterpret_cast<const UintList*>(
               &_UintList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UintList& a, UintList& b) {
    a.Swap(&b);
  }
  inline void Swap(UintList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UintList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UintList* New() const final {
    return new UintList();
  }

  UintList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UintList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UintList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UintList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UintList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.UintList";
  }
  protected:
  explicit UintList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsFieldNumber = 1,
  };
  // repeated uint64 vals = 1;
  int vals_size() const;
  private:
  int _internal_vals_size() const;
  public:
  void clear_vals();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_vals() const;
  void _internal_add_vals(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_vals();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 vals(int index) const;
  void set_vals(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_vals(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_vals();

  // @@protoc_insertion_point(class_scope:flwr.proto.UintList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > vals_;
  mutable std::atomic<int> _vals_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class BoolList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.BoolList) */ {
 public:
  inline BoolList() : BoolList(nullptr) {}
  ~BoolList() override;
  explicit constexpr BoolList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolList(const BoolList& from);
  BoolList(BoolList&& from) noexcept
    : BoolList() {
    *this = ::std::move(from);
  }

  inline BoolList& operator=(const BoolList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolList& operator=(BoolList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolList* internal_default_instance() {
    return reinterpret_cast<const BoolList*>(
               &_BoolList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BoolList& a, BoolList& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoolList* New() const final {
    return new BoolList();
  }

  BoolList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoolList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoolList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.BoolList";
  }
  protected:
  explicit BoolList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsFieldNumber = 1,
  };
  // repeated bool vals = 1;
  int vals_size() const;
  private:
  int _internal_vals_size() const;
  public:
  void clear_vals();
  private:
  bool _internal_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_vals() const;
  void _internal_add_vals(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_vals();
  public:
  bool vals(int index) const;
  void set_vals(int index, bool value);
  void add_vals(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_vals();

  // @@protoc_insertion_point(class_scope:flwr.proto.BoolList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > vals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class StringList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.StringList) */ {
 public:
  inline StringList() : StringList(nullptr) {}
  ~StringList() override;
  explicit constexpr StringList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringList(const StringList& from);
  StringList(StringList&& from) noexcept
    : StringList() {
    *this = ::std::move(from);
  }

  inline StringList& operator=(const StringList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringList& operator=(StringList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringList& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringList* internal_default_instance() {
    return reinterpret_cast<const StringList*>(
               &_StringList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StringList& a, StringList& b) {
    a.Swap(&b);
  }
  inline void Swap(StringList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringList* New() const final {
    return new StringList();
  }

  StringList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StringList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.StringList";
  }
  protected:
  explicit StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsFieldNumber = 1,
  };
  // repeated string vals = 1;
  int vals_size() const;
  private:
  int _internal_vals_size() const;
  public:
  void clear_vals();
  const std::string& vals(int index) const;
  std::string* mutable_vals(int index);
  void set_vals(int index, const std::string& value);
  void set_vals(int index, std::string&& value);
  void set_vals(int index, const char* value);
  void set_vals(int index, const char* value, size_t size);
  std::string* add_vals();
  void add_vals(const std::string& value);
  void add_vals(std::string&& value);
  void add_vals(const char* value);
  void add_vals(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vals();
  private:
  const std::string& _internal_vals(int index) const;
  std::string* _internal_add_vals();
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.StringList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class BytesList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.BytesList) */ {
 public:
  inline BytesList() : BytesList(nullptr) {}
  ~BytesList() override;
  explicit constexpr BytesList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BytesList(const BytesList& from);
  BytesList(BytesList&& from) noexcept
    : BytesList() {
    *this = ::std::move(from);
  }

  inline BytesList& operator=(const BytesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BytesList& operator=(BytesList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BytesList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BytesList* internal_default_instance() {
    return reinterpret_cast<const BytesList*>(
               &_BytesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BytesList& a, BytesList& b) {
    a.Swap(&b);
  }
  inline void Swap(BytesList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BytesList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BytesList* New() const final {
    return new BytesList();
  }

  BytesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BytesList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BytesList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BytesList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BytesList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.BytesList";
  }
  protected:
  explicit BytesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsFieldNumber = 1,
  };
  // repeated bytes vals = 1;
  int vals_size() const;
  private:
  int _internal_vals_size() const;
  public:
  void clear_vals();
  const std::string& vals(int index) const;
  std::string* mutable_vals(int index);
  void set_vals(int index, const std::string& value);
  void set_vals(int index, std::string&& value);
  void set_vals(int index, const char* value);
  void set_vals(int index, const void* value, size_t size);
  std::string* add_vals();
  void add_vals(const std::string& value);
  void add_vals(std::string&& value);
  void add_vals(const char* value);
  void add_vals(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vals();
  private:
  const std::string& _internal_vals(int index) const;
  std::string* _internal_add_vals();
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.BytesList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class Array final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.Array) */ {
 public:
  inline Array() : Array(nullptr) {}
  ~Array() override;
  explicit constexpr Array(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Array(const Array& from);
  Array(Array&& from) noexcept
    : Array() {
    *this = ::std::move(from);
  }

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Array& operator=(Array&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Array& default_instance() {
    return *internal_default_instance();
  }
  static inline const Array* internal_default_instance() {
    return reinterpret_cast<const Array*>(
               &_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Array& a, Array& b) {
    a.Swap(&b);
  }
  inline void Swap(Array* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Array* New() const final {
    return new Array();
  }

  Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Array>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Array& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Array& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Array* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.Array";
  }
  protected:
  explicit Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kDtypeFieldNumber = 1,
    kStypeFieldNumber = 3,
    kDataFieldNumber = 4,
  };
  // repeated int32 shape = 2;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shape();

  // string dtype = 1;
  void clear_dtype();
  const std::string& dtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dtype();
  PROTOBUF_MUST_USE_RESULT std::string* release_dtype();
  void set_allocated_dtype(std::string* dtype);
  private:
  const std::string& _internal_dtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dtype(const std::string& value);
  std::string* _internal_mutable_dtype();
  public:

  // string stype = 3;
  void clear_stype();
  const std::string& stype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stype();
  PROTOBUF_MUST_USE_RESULT std::string* release_stype();
  void set_allocated_stype(std::string* stype);
  private:
  const std::string& _internal_stype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stype(const std::string& value);
  std::string* _internal_mutable_stype();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.Array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class MetricRecordValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.MetricRecordValue) */ {
 public:
  inline MetricRecordValue() : MetricRecordValue(nullptr) {}
  ~MetricRecordValue() override;
  explicit constexpr MetricRecordValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricRecordValue(const MetricRecordValue& from);
  MetricRecordValue(MetricRecordValue&& from) noexcept
    : MetricRecordValue() {
    *this = ::std::move(from);
  }

  inline MetricRecordValue& operator=(const MetricRecordValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricRecordValue& operator=(MetricRecordValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricRecordValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kDouble = 1,
    kSint64 = 2,
    kUint64 = 3,
    kDoubleList = 21,
    kSintList = 22,
    kUintList = 23,
    VALUE_NOT_SET = 0,
  };

  static inline const MetricRecordValue* internal_default_instance() {
    return reinterpret_cast<const MetricRecordValue*>(
               &_MetricRecordValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MetricRecordValue& a, MetricRecordValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricRecordValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricRecordValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricRecordValue* New() const final {
    return new MetricRecordValue();
  }

  MetricRecordValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricRecordValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricRecordValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MetricRecordValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricRecordValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.MetricRecordValue";
  }
  protected:
  explicit MetricRecordValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoubleFieldNumber = 1,
    kSint64FieldNumber = 2,
    kUint64FieldNumber = 3,
    kDoubleListFieldNumber = 21,
    kSintListFieldNumber = 22,
    kUintListFieldNumber = 23,
  };
  // double double = 1;
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  double double_() const;
  void set_double_(double value);
  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);
  public:

  // sint64 sint64 = 2;
  bool has_sint64() const;
  private:
  bool _internal_has_sint64() const;
  public:
  void clear_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64() const;
  void set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64() const;
  void _internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 uint64 = 3;
  bool has_uint64() const;
  private:
  bool _internal_has_uint64() const;
  public:
  void clear_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64() const;
  void set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64() const;
  void _internal_set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .flwr.proto.DoubleList double_list = 21;
  bool has_double_list() const;
  private:
  bool _internal_has_double_list() const;
  public:
  void clear_double_list();
  const ::flwr::proto::DoubleList& double_list() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::DoubleList* release_double_list();
  ::flwr::proto::DoubleList* mutable_double_list();
  void set_allocated_double_list(::flwr::proto::DoubleList* double_list);
  private:
  const ::flwr::proto::DoubleList& _internal_double_list() const;
  ::flwr::proto::DoubleList* _internal_mutable_double_list();
  public:
  void unsafe_arena_set_allocated_double_list(
      ::flwr::proto::DoubleList* double_list);
  ::flwr::proto::DoubleList* unsafe_arena_release_double_list();

  // .flwr.proto.SintList sint_list = 22;
  bool has_sint_list() const;
  private:
  bool _internal_has_sint_list() const;
  public:
  void clear_sint_list();
  const ::flwr::proto::SintList& sint_list() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::SintList* release_sint_list();
  ::flwr::proto::SintList* mutable_sint_list();
  void set_allocated_sint_list(::flwr::proto::SintList* sint_list);
  private:
  const ::flwr::proto::SintList& _internal_sint_list() const;
  ::flwr::proto::SintList* _internal_mutable_sint_list();
  public:
  void unsafe_arena_set_allocated_sint_list(
      ::flwr::proto::SintList* sint_list);
  ::flwr::proto::SintList* unsafe_arena_release_sint_list();

  // .flwr.proto.UintList uint_list = 23;
  bool has_uint_list() const;
  private:
  bool _internal_has_uint_list() const;
  public:
  void clear_uint_list();
  const ::flwr::proto::UintList& uint_list() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::UintList* release_uint_list();
  ::flwr::proto::UintList* mutable_uint_list();
  void set_allocated_uint_list(::flwr::proto::UintList* uint_list);
  private:
  const ::flwr::proto::UintList& _internal_uint_list() const;
  ::flwr::proto::UintList* _internal_mutable_uint_list();
  public:
  void unsafe_arena_set_allocated_uint_list(
      ::flwr::proto::UintList* uint_list);
  ::flwr::proto::UintList* unsafe_arena_release_uint_list();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:flwr.proto.MetricRecordValue)
 private:
  class _Internal;
  void set_has_double_();
  void set_has_sint64();
  void set_has_uint64();
  void set_has_double_list();
  void set_has_sint_list();
  void set_has_uint_list();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    double double__;
    ::PROTOBUF_NAMESPACE_ID::int64 sint64_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint64_;
    ::flwr::proto::DoubleList* double_list_;
    ::flwr::proto::SintList* sint_list_;
    ::flwr::proto::UintList* uint_list_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class ConfigRecordValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.ConfigRecordValue) */ {
 public:
  inline ConfigRecordValue() : ConfigRecordValue(nullptr) {}
  ~ConfigRecordValue() override;
  explicit constexpr ConfigRecordValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigRecordValue(const ConfigRecordValue& from);
  ConfigRecordValue(ConfigRecordValue&& from) noexcept
    : ConfigRecordValue() {
    *this = ::std::move(from);
  }

  inline ConfigRecordValue& operator=(const ConfigRecordValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigRecordValue& operator=(ConfigRecordValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigRecordValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kDouble = 1,
    kSint64 = 2,
    kUint64 = 3,
    kBool = 4,
    kString = 5,
    kBytes = 6,
    kDoubleList = 21,
    kSintList = 22,
    kUintList = 23,
    kBoolList = 24,
    kStringList = 25,
    kBytesList = 26,
    VALUE_NOT_SET = 0,
  };

  static inline const ConfigRecordValue* internal_default_instance() {
    return reinterpret_cast<const ConfigRecordValue*>(
               &_ConfigRecordValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConfigRecordValue& a, ConfigRecordValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigRecordValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigRecordValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigRecordValue* New() const final {
    return new ConfigRecordValue();
  }

  ConfigRecordValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRecordValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigRecordValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigRecordValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRecordValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.ConfigRecordValue";
  }
  protected:
  explicit ConfigRecordValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoubleFieldNumber = 1,
    kSint64FieldNumber = 2,
    kUint64FieldNumber = 3,
    kBoolFieldNumber = 4,
    kStringFieldNumber = 5,
    kBytesFieldNumber = 6,
    kDoubleListFieldNumber = 21,
    kSintListFieldNumber = 22,
    kUintListFieldNumber = 23,
    kBoolListFieldNumber = 24,
    kStringListFieldNumber = 25,
    kBytesListFieldNumber = 26,
  };
  // double double = 1;
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  double double_() const;
  void set_double_(double value);
  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);
  public:

  // sint64 sint64 = 2;
  bool has_sint64() const;
  private:
  bool _internal_has_sint64() const;
  public:
  void clear_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64() const;
  void set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64() const;
  void _internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 uint64 = 3;
  bool has_uint64() const;
  private:
  bool _internal_has_uint64() const;
  public:
  void clear_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64() const;
  void set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64() const;
  void _internal_set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool bool = 4;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // string string = 5;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // bytes bytes = 6;
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const std::string& bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes();
  PROTOBUF_MUST_USE_RESULT std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // .flwr.proto.DoubleList double_list = 21;
  bool has_double_list() const;
  private:
  bool _internal_has_double_list() const;
  public:
  void clear_double_list();
  const ::flwr::proto::DoubleList& double_list() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::DoubleList* release_double_list();
  ::flwr::proto::DoubleList* mutable_double_list();
  void set_allocated_double_list(::flwr::proto::DoubleList* double_list);
  private:
  const ::flwr::proto::DoubleList& _internal_double_list() const;
  ::flwr::proto::DoubleList* _internal_mutable_double_list();
  public:
  void unsafe_arena_set_allocated_double_list(
      ::flwr::proto::DoubleList* double_list);
  ::flwr::proto::DoubleList* unsafe_arena_release_double_list();

  // .flwr.proto.SintList sint_list = 22;
  bool has_sint_list() const;
  private:
  bool _internal_has_sint_list() const;
  public:
  void clear_sint_list();
  const ::flwr::proto::SintList& sint_list() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::SintList* release_sint_list();
  ::flwr::proto::SintList* mutable_sint_list();
  void set_allocated_sint_list(::flwr::proto::SintList* sint_list);
  private:
  const ::flwr::proto::SintList& _internal_sint_list() const;
  ::flwr::proto::SintList* _internal_mutable_sint_list();
  public:
  void unsafe_arena_set_allocated_sint_list(
      ::flwr::proto::SintList* sint_list);
  ::flwr::proto::SintList* unsafe_arena_release_sint_list();

  // .flwr.proto.UintList uint_list = 23;
  bool has_uint_list() const;
  private:
  bool _internal_has_uint_list() const;
  public:
  void clear_uint_list();
  const ::flwr::proto::UintList& uint_list() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::UintList* release_uint_list();
  ::flwr::proto::UintList* mutable_uint_list();
  void set_allocated_uint_list(::flwr::proto::UintList* uint_list);
  private:
  const ::flwr::proto::UintList& _internal_uint_list() const;
  ::flwr::proto::UintList* _internal_mutable_uint_list();
  public:
  void unsafe_arena_set_allocated_uint_list(
      ::flwr::proto::UintList* uint_list);
  ::flwr::proto::UintList* unsafe_arena_release_uint_list();

  // .flwr.proto.BoolList bool_list = 24;
  bool has_bool_list() const;
  private:
  bool _internal_has_bool_list() const;
  public:
  void clear_bool_list();
  const ::flwr::proto::BoolList& bool_list() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::BoolList* release_bool_list();
  ::flwr::proto::BoolList* mutable_bool_list();
  void set_allocated_bool_list(::flwr::proto::BoolList* bool_list);
  private:
  const ::flwr::proto::BoolList& _internal_bool_list() const;
  ::flwr::proto::BoolList* _internal_mutable_bool_list();
  public:
  void unsafe_arena_set_allocated_bool_list(
      ::flwr::proto::BoolList* bool_list);
  ::flwr::proto::BoolList* unsafe_arena_release_bool_list();

  // .flwr.proto.StringList string_list = 25;
  bool has_string_list() const;
  private:
  bool _internal_has_string_list() const;
  public:
  void clear_string_list();
  const ::flwr::proto::StringList& string_list() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::StringList* release_string_list();
  ::flwr::proto::StringList* mutable_string_list();
  void set_allocated_string_list(::flwr::proto::StringList* string_list);
  private:
  const ::flwr::proto::StringList& _internal_string_list() const;
  ::flwr::proto::StringList* _internal_mutable_string_list();
  public:
  void unsafe_arena_set_allocated_string_list(
      ::flwr::proto::StringList* string_list);
  ::flwr::proto::StringList* unsafe_arena_release_string_list();

  // .flwr.proto.BytesList bytes_list = 26;
  bool has_bytes_list() const;
  private:
  bool _internal_has_bytes_list() const;
  public:
  void clear_bytes_list();
  const ::flwr::proto::BytesList& bytes_list() const;
  PROTOBUF_MUST_USE_RESULT ::flwr::proto::BytesList* release_bytes_list();
  ::flwr::proto::BytesList* mutable_bytes_list();
  void set_allocated_bytes_list(::flwr::proto::BytesList* bytes_list);
  private:
  const ::flwr::proto::BytesList& _internal_bytes_list() const;
  ::flwr::proto::BytesList* _internal_mutable_bytes_list();
  public:
  void unsafe_arena_set_allocated_bytes_list(
      ::flwr::proto::BytesList* bytes_list);
  ::flwr::proto::BytesList* unsafe_arena_release_bytes_list();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:flwr.proto.ConfigRecordValue)
 private:
  class _Internal;
  void set_has_double_();
  void set_has_sint64();
  void set_has_uint64();
  void set_has_bool_();
  void set_has_string();
  void set_has_bytes();
  void set_has_double_list();
  void set_has_sint_list();
  void set_has_uint_list();
  void set_has_bool_list();
  void set_has_string_list();
  void set_has_bytes_list();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    double double__;
    ::PROTOBUF_NAMESPACE_ID::int64 sint64_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint64_;
    bool bool__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
    ::flwr::proto::DoubleList* double_list_;
    ::flwr::proto::SintList* sint_list_;
    ::flwr::proto::UintList* uint_list_;
    ::flwr::proto::BoolList* bool_list_;
    ::flwr::proto::StringList* string_list_;
    ::flwr::proto::BytesList* bytes_list_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class ArrayRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.ArrayRecord) */ {
 public:
  inline ArrayRecord() : ArrayRecord(nullptr) {}
  ~ArrayRecord() override;
  explicit constexpr ArrayRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayRecord(const ArrayRecord& from);
  ArrayRecord(ArrayRecord&& from) noexcept
    : ArrayRecord() {
    *this = ::std::move(from);
  }

  inline ArrayRecord& operator=(const ArrayRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayRecord& operator=(ArrayRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArrayRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayRecord* internal_default_instance() {
    return reinterpret_cast<const ArrayRecord*>(
               &_ArrayRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ArrayRecord& a, ArrayRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayRecord* New() const final {
    return new ArrayRecord();
  }

  ArrayRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArrayRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ArrayRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.ArrayRecord";
  }
  protected:
  explicit ArrayRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataKeysFieldNumber = 1,
    kDataValuesFieldNumber = 2,
  };
  // repeated string data_keys = 1;
  int data_keys_size() const;
  private:
  int _internal_data_keys_size() const;
  public:
  void clear_data_keys();
  const std::string& data_keys(int index) const;
  std::string* mutable_data_keys(int index);
  void set_data_keys(int index, const std::string& value);
  void set_data_keys(int index, std::string&& value);
  void set_data_keys(int index, const char* value);
  void set_data_keys(int index, const char* value, size_t size);
  std::string* add_data_keys();
  void add_data_keys(const std::string& value);
  void add_data_keys(std::string&& value);
  void add_data_keys(const char* value);
  void add_data_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_keys();
  private:
  const std::string& _internal_data_keys(int index) const;
  std::string* _internal_add_data_keys();
  public:

  // repeated .flwr.proto.Array data_values = 2;
  int data_values_size() const;
  private:
  int _internal_data_values_size() const;
  public:
  void clear_data_values();
  ::flwr::proto::Array* mutable_data_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Array >*
      mutable_data_values();
  private:
  const ::flwr::proto::Array& _internal_data_values(int index) const;
  ::flwr::proto::Array* _internal_add_data_values();
  public:
  const ::flwr::proto::Array& data_values(int index) const;
  ::flwr::proto::Array* add_data_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Array >&
      data_values() const;

  // @@protoc_insertion_point(class_scope:flwr.proto.ArrayRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Array > data_values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class MetricRecord_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricRecord_DataEntry_DoNotUse, 
    std::string, ::flwr::proto::MetricRecordValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricRecord_DataEntry_DoNotUse, 
    std::string, ::flwr::proto::MetricRecordValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MetricRecord_DataEntry_DoNotUse();
  explicit constexpr MetricRecord_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MetricRecord_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MetricRecord_DataEntry_DoNotUse& other);
  static const MetricRecord_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MetricRecord_DataEntry_DoNotUse*>(&_MetricRecord_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.MetricRecord.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class MetricRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.MetricRecord) */ {
 public:
  inline MetricRecord() : MetricRecord(nullptr) {}
  ~MetricRecord() override;
  explicit constexpr MetricRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricRecord(const MetricRecord& from);
  MetricRecord(MetricRecord&& from) noexcept
    : MetricRecord() {
    *this = ::std::move(from);
  }

  inline MetricRecord& operator=(const MetricRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricRecord& operator=(MetricRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricRecord* internal_default_instance() {
    return reinterpret_cast<const MetricRecord*>(
               &_MetricRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MetricRecord& a, MetricRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricRecord* New() const final {
    return new MetricRecord();
  }

  MetricRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MetricRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.MetricRecord";
  }
  protected:
  explicit MetricRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<string, .flwr.proto.MetricRecordValue> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:flwr.proto.MetricRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MetricRecord_DataEntry_DoNotUse,
      std::string, ::flwr::proto::MetricRecordValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class ConfigRecord_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConfigRecord_DataEntry_DoNotUse, 
    std::string, ::flwr::proto::ConfigRecordValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConfigRecord_DataEntry_DoNotUse, 
    std::string, ::flwr::proto::ConfigRecordValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ConfigRecord_DataEntry_DoNotUse();
  explicit constexpr ConfigRecord_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ConfigRecord_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ConfigRecord_DataEntry_DoNotUse& other);
  static const ConfigRecord_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConfigRecord_DataEntry_DoNotUse*>(&_ConfigRecord_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.ConfigRecord.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ConfigRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.ConfigRecord) */ {
 public:
  inline ConfigRecord() : ConfigRecord(nullptr) {}
  ~ConfigRecord() override;
  explicit constexpr ConfigRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigRecord(const ConfigRecord& from);
  ConfigRecord(ConfigRecord&& from) noexcept
    : ConfigRecord() {
    *this = ::std::move(from);
  }

  inline ConfigRecord& operator=(const ConfigRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigRecord& operator=(ConfigRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigRecord* internal_default_instance() {
    return reinterpret_cast<const ConfigRecord*>(
               &_ConfigRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ConfigRecord& a, ConfigRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigRecord* New() const final {
    return new ConfigRecord();
  }

  ConfigRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.ConfigRecord";
  }
  protected:
  explicit ConfigRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<string, .flwr.proto.ConfigRecordValue> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:flwr.proto.ConfigRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ConfigRecord_DataEntry_DoNotUse,
      std::string, ::flwr::proto::ConfigRecordValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// -------------------------------------------------------------------

class RecordDict_ArraysEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordDict_ArraysEntry_DoNotUse, 
    std::string, ::flwr::proto::ArrayRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordDict_ArraysEntry_DoNotUse, 
    std::string, ::flwr::proto::ArrayRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RecordDict_ArraysEntry_DoNotUse();
  explicit constexpr RecordDict_ArraysEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RecordDict_ArraysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RecordDict_ArraysEntry_DoNotUse& other);
  static const RecordDict_ArraysEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecordDict_ArraysEntry_DoNotUse*>(&_RecordDict_ArraysEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.RecordDict.ArraysEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class RecordDict_MetricsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordDict_MetricsEntry_DoNotUse, 
    std::string, ::flwr::proto::MetricRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordDict_MetricsEntry_DoNotUse, 
    std::string, ::flwr::proto::MetricRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RecordDict_MetricsEntry_DoNotUse();
  explicit constexpr RecordDict_MetricsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RecordDict_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RecordDict_MetricsEntry_DoNotUse& other);
  static const RecordDict_MetricsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecordDict_MetricsEntry_DoNotUse*>(&_RecordDict_MetricsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.RecordDict.MetricsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class RecordDict_ConfigsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordDict_ConfigsEntry_DoNotUse, 
    std::string, ::flwr::proto::ConfigRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RecordDict_ConfigsEntry_DoNotUse, 
    std::string, ::flwr::proto::ConfigRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RecordDict_ConfigsEntry_DoNotUse();
  explicit constexpr RecordDict_ConfigsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RecordDict_ConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RecordDict_ConfigsEntry_DoNotUse& other);
  static const RecordDict_ConfigsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecordDict_ConfigsEntry_DoNotUse*>(&_RecordDict_ConfigsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.RecordDict.ConfigsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class RecordDict final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.RecordDict) */ {
 public:
  inline RecordDict() : RecordDict(nullptr) {}
  ~RecordDict() override;
  explicit constexpr RecordDict(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordDict(const RecordDict& from);
  RecordDict(RecordDict&& from) noexcept
    : RecordDict() {
    *this = ::std::move(from);
  }

  inline RecordDict& operator=(const RecordDict& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordDict& operator=(RecordDict&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordDict& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordDict* internal_default_instance() {
    return reinterpret_cast<const RecordDict*>(
               &_RecordDict_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RecordDict& a, RecordDict& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordDict* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordDict* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordDict* New() const final {
    return new RecordDict();
  }

  RecordDict* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordDict>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordDict& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordDict& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordDict* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.RecordDict";
  }
  protected:
  explicit RecordDict(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArraysFieldNumber = 1,
    kMetricsFieldNumber = 2,
    kConfigsFieldNumber = 3,
  };
  // map<string, .flwr.proto.ArrayRecord> arrays = 1;
  int arrays_size() const;
  private:
  int _internal_arrays_size() const;
  public:
  void clear_arrays();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >&
      _internal_arrays() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >*
      _internal_mutable_arrays();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >&
      arrays() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >*
      mutable_arrays();

  // map<string, .flwr.proto.MetricRecord> metrics = 2;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >&
      _internal_metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >*
      _internal_mutable_metrics();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >&
      metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >*
      mutable_metrics();

  // map<string, .flwr.proto.ConfigRecord> configs = 3;
  int configs_size() const;
  private:
  int _internal_configs_size() const;
  public:
  void clear_configs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >&
      _internal_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >*
      _internal_mutable_configs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >&
      configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >*
      mutable_configs();

  // @@protoc_insertion_point(class_scope:flwr.proto.RecordDict)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RecordDict_ArraysEntry_DoNotUse,
      std::string, ::flwr::proto::ArrayRecord,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> arrays_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RecordDict_MetricsEntry_DoNotUse,
      std::string, ::flwr::proto::MetricRecord,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RecordDict_ConfigsEntry_DoNotUse,
      std::string, ::flwr::proto::ConfigRecord,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2frecorddict_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DoubleList

// repeated double vals = 1;
inline int DoubleList::_internal_vals_size() const {
  return vals_.size();
}
inline int DoubleList::vals_size() const {
  return _internal_vals_size();
}
inline void DoubleList::clear_vals() {
  vals_.Clear();
}
inline double DoubleList::_internal_vals(int index) const {
  return vals_.Get(index);
}
inline double DoubleList::vals(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.DoubleList.vals)
  return _internal_vals(index);
}
inline void DoubleList::set_vals(int index, double value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:flwr.proto.DoubleList.vals)
}
inline void DoubleList::_internal_add_vals(double value) {
  vals_.Add(value);
}
inline void DoubleList::add_vals(double value) {
  _internal_add_vals(value);
  // @@protoc_insertion_point(field_add:flwr.proto.DoubleList.vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleList::_internal_vals() const {
  return vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleList::vals() const {
  // @@protoc_insertion_point(field_list:flwr.proto.DoubleList.vals)
  return _internal_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleList::_internal_mutable_vals() {
  return &vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleList::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.DoubleList.vals)
  return _internal_mutable_vals();
}

// -------------------------------------------------------------------

// SintList

// repeated sint64 vals = 1;
inline int SintList::_internal_vals_size() const {
  return vals_.size();
}
inline int SintList::vals_size() const {
  return _internal_vals_size();
}
inline void SintList::clear_vals() {
  vals_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SintList::_internal_vals(int index) const {
  return vals_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SintList::vals(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.SintList.vals)
  return _internal_vals(index);
}
inline void SintList::set_vals(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:flwr.proto.SintList.vals)
}
inline void SintList::_internal_add_vals(::PROTOBUF_NAMESPACE_ID::int64 value) {
  vals_.Add(value);
}
inline void SintList::add_vals(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_vals(value);
  // @@protoc_insertion_point(field_add:flwr.proto.SintList.vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SintList::_internal_vals() const {
  return vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SintList::vals() const {
  // @@protoc_insertion_point(field_list:flwr.proto.SintList.vals)
  return _internal_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SintList::_internal_mutable_vals() {
  return &vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SintList::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.SintList.vals)
  return _internal_mutable_vals();
}

// -------------------------------------------------------------------

// UintList

// repeated uint64 vals = 1;
inline int UintList::_internal_vals_size() const {
  return vals_.size();
}
inline int UintList::vals_size() const {
  return _internal_vals_size();
}
inline void UintList::clear_vals() {
  vals_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UintList::_internal_vals(int index) const {
  return vals_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UintList::vals(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.UintList.vals)
  return _internal_vals(index);
}
inline void UintList::set_vals(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:flwr.proto.UintList.vals)
}
inline void UintList::_internal_add_vals(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  vals_.Add(value);
}
inline void UintList::add_vals(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_vals(value);
  // @@protoc_insertion_point(field_add:flwr.proto.UintList.vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UintList::_internal_vals() const {
  return vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UintList::vals() const {
  // @@protoc_insertion_point(field_list:flwr.proto.UintList.vals)
  return _internal_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UintList::_internal_mutable_vals() {
  return &vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UintList::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.UintList.vals)
  return _internal_mutable_vals();
}

// -------------------------------------------------------------------

// BoolList

// repeated bool vals = 1;
inline int BoolList::_internal_vals_size() const {
  return vals_.size();
}
inline int BoolList::vals_size() const {
  return _internal_vals_size();
}
inline void BoolList::clear_vals() {
  vals_.Clear();
}
inline bool BoolList::_internal_vals(int index) const {
  return vals_.Get(index);
}
inline bool BoolList::vals(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.BoolList.vals)
  return _internal_vals(index);
}
inline void BoolList::set_vals(int index, bool value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:flwr.proto.BoolList.vals)
}
inline void BoolList::_internal_add_vals(bool value) {
  vals_.Add(value);
}
inline void BoolList::add_vals(bool value) {
  _internal_add_vals(value);
  // @@protoc_insertion_point(field_add:flwr.proto.BoolList.vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BoolList::_internal_vals() const {
  return vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BoolList::vals() const {
  // @@protoc_insertion_point(field_list:flwr.proto.BoolList.vals)
  return _internal_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BoolList::_internal_mutable_vals() {
  return &vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BoolList::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.BoolList.vals)
  return _internal_mutable_vals();
}

// -------------------------------------------------------------------

// StringList

// repeated string vals = 1;
inline int StringList::_internal_vals_size() const {
  return vals_.size();
}
inline int StringList::vals_size() const {
  return _internal_vals_size();
}
inline void StringList::clear_vals() {
  vals_.Clear();
}
inline std::string* StringList::add_vals() {
  std::string* _s = _internal_add_vals();
  // @@protoc_insertion_point(field_add_mutable:flwr.proto.StringList.vals)
  return _s;
}
inline const std::string& StringList::_internal_vals(int index) const {
  return vals_.Get(index);
}
inline const std::string& StringList::vals(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.StringList.vals)
  return _internal_vals(index);
}
inline std::string* StringList::mutable_vals(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.StringList.vals)
  return vals_.Mutable(index);
}
inline void StringList::set_vals(int index, const std::string& value) {
  vals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flwr.proto.StringList.vals)
}
inline void StringList::set_vals(int index, std::string&& value) {
  vals_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flwr.proto.StringList.vals)
}
inline void StringList::set_vals(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flwr.proto.StringList.vals)
}
inline void StringList::set_vals(int index, const char* value, size_t size) {
  vals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flwr.proto.StringList.vals)
}
inline std::string* StringList::_internal_add_vals() {
  return vals_.Add();
}
inline void StringList::add_vals(const std::string& value) {
  vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flwr.proto.StringList.vals)
}
inline void StringList::add_vals(std::string&& value) {
  vals_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flwr.proto.StringList.vals)
}
inline void StringList::add_vals(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flwr.proto.StringList.vals)
}
inline void StringList::add_vals(const char* value, size_t size) {
  vals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flwr.proto.StringList.vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringList::vals() const {
  // @@protoc_insertion_point(field_list:flwr.proto.StringList.vals)
  return vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringList::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.StringList.vals)
  return &vals_;
}

// -------------------------------------------------------------------

// BytesList

// repeated bytes vals = 1;
inline int BytesList::_internal_vals_size() const {
  return vals_.size();
}
inline int BytesList::vals_size() const {
  return _internal_vals_size();
}
inline void BytesList::clear_vals() {
  vals_.Clear();
}
inline std::string* BytesList::add_vals() {
  std::string* _s = _internal_add_vals();
  // @@protoc_insertion_point(field_add_mutable:flwr.proto.BytesList.vals)
  return _s;
}
inline const std::string& BytesList::_internal_vals(int index) const {
  return vals_.Get(index);
}
inline const std::string& BytesList::vals(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.BytesList.vals)
  return _internal_vals(index);
}
inline std::string* BytesList::mutable_vals(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.BytesList.vals)
  return vals_.Mutable(index);
}
inline void BytesList::set_vals(int index, const std::string& value) {
  vals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flwr.proto.BytesList.vals)
}
inline void BytesList::set_vals(int index, std::string&& value) {
  vals_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flwr.proto.BytesList.vals)
}
inline void BytesList::set_vals(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flwr.proto.BytesList.vals)
}
inline void BytesList::set_vals(int index, const void* value, size_t size) {
  vals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flwr.proto.BytesList.vals)
}
inline std::string* BytesList::_internal_add_vals() {
  return vals_.Add();
}
inline void BytesList::add_vals(const std::string& value) {
  vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flwr.proto.BytesList.vals)
}
inline void BytesList::add_vals(std::string&& value) {
  vals_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flwr.proto.BytesList.vals)
}
inline void BytesList::add_vals(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flwr.proto.BytesList.vals)
}
inline void BytesList::add_vals(const void* value, size_t size) {
  vals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flwr.proto.BytesList.vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BytesList::vals() const {
  // @@protoc_insertion_point(field_list:flwr.proto.BytesList.vals)
  return vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BytesList::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.BytesList.vals)
  return &vals_;
}

// -------------------------------------------------------------------

// Array

// string dtype = 1;
inline void Array::clear_dtype() {
  dtype_.ClearToEmpty();
}
inline const std::string& Array::dtype() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Array.dtype)
  return _internal_dtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Array::set_dtype(ArgT0&& arg0, ArgT... args) {
 
 dtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.Array.dtype)
}
inline std::string* Array::mutable_dtype() {
  std::string* _s = _internal_mutable_dtype();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Array.dtype)
  return _s;
}
inline const std::string& Array::_internal_dtype() const {
  return dtype_.Get();
}
inline void Array::_internal_set_dtype(const std::string& value) {
  
  dtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Array::_internal_mutable_dtype() {
  
  return dtype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Array::release_dtype() {
  // @@protoc_insertion_point(field_release:flwr.proto.Array.dtype)
  return dtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Array::set_allocated_dtype(std::string* dtype) {
  if (dtype != nullptr) {
    
  } else {
    
  }
  dtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dtype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Array.dtype)
}

// repeated int32 shape = 2;
inline int Array::_internal_shape_size() const {
  return shape_.size();
}
inline int Array::shape_size() const {
  return _internal_shape_size();
}
inline void Array::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::shape(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.Array.shape)
  return _internal_shape(index);
}
inline void Array::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:flwr.proto.Array.shape)
}
inline void Array::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Add(value);
}
inline void Array::add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:flwr.proto.Array.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Array::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Array::shape() const {
  // @@protoc_insertion_point(field_list:flwr.proto.Array.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Array::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Array::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.Array.shape)
  return _internal_mutable_shape();
}

// string stype = 3;
inline void Array::clear_stype() {
  stype_.ClearToEmpty();
}
inline const std::string& Array::stype() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Array.stype)
  return _internal_stype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Array::set_stype(ArgT0&& arg0, ArgT... args) {
 
 stype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.Array.stype)
}
inline std::string* Array::mutable_stype() {
  std::string* _s = _internal_mutable_stype();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Array.stype)
  return _s;
}
inline const std::string& Array::_internal_stype() const {
  return stype_.Get();
}
inline void Array::_internal_set_stype(const std::string& value) {
  
  stype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Array::_internal_mutable_stype() {
  
  return stype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Array::release_stype() {
  // @@protoc_insertion_point(field_release:flwr.proto.Array.stype)
  return stype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Array::set_allocated_stype(std::string* stype) {
  if (stype != nullptr) {
    
  } else {
    
  }
  stype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Array.stype)
}

// bytes data = 4;
inline void Array::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Array::data() const {
  // @@protoc_insertion_point(field_get:flwr.proto.Array.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Array::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.Array.data)
}
inline std::string* Array::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:flwr.proto.Array.data)
  return _s;
}
inline const std::string& Array::_internal_data() const {
  return data_.Get();
}
inline void Array::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Array::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Array::release_data() {
  // @@protoc_insertion_point(field_release:flwr.proto.Array.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Array::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.Array.data)
}

// -------------------------------------------------------------------

// MetricRecordValue

// double double = 1;
inline bool MetricRecordValue::_internal_has_double_() const {
  return value_case() == kDouble;
}
inline bool MetricRecordValue::has_double_() const {
  return _internal_has_double_();
}
inline void MetricRecordValue::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void MetricRecordValue::clear_double_() {
  if (_internal_has_double_()) {
    value_.double__ = 0;
    clear_has_value();
  }
}
inline double MetricRecordValue::_internal_double_() const {
  if (_internal_has_double_()) {
    return value_.double__;
  }
  return 0;
}
inline void MetricRecordValue::_internal_set_double_(double value) {
  if (!_internal_has_double_()) {
    clear_value();
    set_has_double_();
  }
  value_.double__ = value;
}
inline double MetricRecordValue::double_() const {
  // @@protoc_insertion_point(field_get:flwr.proto.MetricRecordValue.double)
  return _internal_double_();
}
inline void MetricRecordValue::set_double_(double value) {
  _internal_set_double_(value);
  // @@protoc_insertion_point(field_set:flwr.proto.MetricRecordValue.double)
}

// sint64 sint64 = 2;
inline bool MetricRecordValue::_internal_has_sint64() const {
  return value_case() == kSint64;
}
inline bool MetricRecordValue::has_sint64() const {
  return _internal_has_sint64();
}
inline void MetricRecordValue::set_has_sint64() {
  _oneof_case_[0] = kSint64;
}
inline void MetricRecordValue::clear_sint64() {
  if (_internal_has_sint64()) {
    value_.sint64_ = int64_t{0};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MetricRecordValue::_internal_sint64() const {
  if (_internal_has_sint64()) {
    return value_.sint64_;
  }
  return int64_t{0};
}
inline void MetricRecordValue::_internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sint64()) {
    clear_value();
    set_has_sint64();
  }
  value_.sint64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MetricRecordValue::sint64() const {
  // @@protoc_insertion_point(field_get:flwr.proto.MetricRecordValue.sint64)
  return _internal_sint64();
}
inline void MetricRecordValue::set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64(value);
  // @@protoc_insertion_point(field_set:flwr.proto.MetricRecordValue.sint64)
}

// uint64 uint64 = 3;
inline bool MetricRecordValue::_internal_has_uint64() const {
  return value_case() == kUint64;
}
inline bool MetricRecordValue::has_uint64() const {
  return _internal_has_uint64();
}
inline void MetricRecordValue::set_has_uint64() {
  _oneof_case_[0] = kUint64;
}
inline void MetricRecordValue::clear_uint64() {
  if (_internal_has_uint64()) {
    value_.uint64_ = uint64_t{0u};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetricRecordValue::_internal_uint64() const {
  if (_internal_has_uint64()) {
    return value_.uint64_;
  }
  return uint64_t{0u};
}
inline void MetricRecordValue::_internal_set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint64()) {
    clear_value();
    set_has_uint64();
  }
  value_.uint64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetricRecordValue::uint64() const {
  // @@protoc_insertion_point(field_get:flwr.proto.MetricRecordValue.uint64)
  return _internal_uint64();
}
inline void MetricRecordValue::set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64(value);
  // @@protoc_insertion_point(field_set:flwr.proto.MetricRecordValue.uint64)
}

// .flwr.proto.DoubleList double_list = 21;
inline bool MetricRecordValue::_internal_has_double_list() const {
  return value_case() == kDoubleList;
}
inline bool MetricRecordValue::has_double_list() const {
  return _internal_has_double_list();
}
inline void MetricRecordValue::set_has_double_list() {
  _oneof_case_[0] = kDoubleList;
}
inline void MetricRecordValue::clear_double_list() {
  if (_internal_has_double_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.double_list_;
    }
    clear_has_value();
  }
}
inline ::flwr::proto::DoubleList* MetricRecordValue::release_double_list() {
  // @@protoc_insertion_point(field_release:flwr.proto.MetricRecordValue.double_list)
  if (_internal_has_double_list()) {
    clear_has_value();
      ::flwr::proto::DoubleList* temp = value_.double_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.double_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flwr::proto::DoubleList& MetricRecordValue::_internal_double_list() const {
  return _internal_has_double_list()
      ? *value_.double_list_
      : reinterpret_cast< ::flwr::proto::DoubleList&>(::flwr::proto::_DoubleList_default_instance_);
}
inline const ::flwr::proto::DoubleList& MetricRecordValue::double_list() const {
  // @@protoc_insertion_point(field_get:flwr.proto.MetricRecordValue.double_list)
  return _internal_double_list();
}
inline ::flwr::proto::DoubleList* MetricRecordValue::unsafe_arena_release_double_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flwr.proto.MetricRecordValue.double_list)
  if (_internal_has_double_list()) {
    clear_has_value();
    ::flwr::proto::DoubleList* temp = value_.double_list_;
    value_.double_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MetricRecordValue::unsafe_arena_set_allocated_double_list(::flwr::proto::DoubleList* double_list) {
  clear_value();
  if (double_list) {
    set_has_double_list();
    value_.double_list_ = double_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.MetricRecordValue.double_list)
}
inline ::flwr::proto::DoubleList* MetricRecordValue::_internal_mutable_double_list() {
  if (!_internal_has_double_list()) {
    clear_value();
    set_has_double_list();
    value_.double_list_ = CreateMaybeMessage< ::flwr::proto::DoubleList >(GetArenaForAllocation());
  }
  return value_.double_list_;
}
inline ::flwr::proto::DoubleList* MetricRecordValue::mutable_double_list() {
  ::flwr::proto::DoubleList* _msg = _internal_mutable_double_list();
  // @@protoc_insertion_point(field_mutable:flwr.proto.MetricRecordValue.double_list)
  return _msg;
}

// .flwr.proto.SintList sint_list = 22;
inline bool MetricRecordValue::_internal_has_sint_list() const {
  return value_case() == kSintList;
}
inline bool MetricRecordValue::has_sint_list() const {
  return _internal_has_sint_list();
}
inline void MetricRecordValue::set_has_sint_list() {
  _oneof_case_[0] = kSintList;
}
inline void MetricRecordValue::clear_sint_list() {
  if (_internal_has_sint_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.sint_list_;
    }
    clear_has_value();
  }
}
inline ::flwr::proto::SintList* MetricRecordValue::release_sint_list() {
  // @@protoc_insertion_point(field_release:flwr.proto.MetricRecordValue.sint_list)
  if (_internal_has_sint_list()) {
    clear_has_value();
      ::flwr::proto::SintList* temp = value_.sint_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.sint_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flwr::proto::SintList& MetricRecordValue::_internal_sint_list() const {
  return _internal_has_sint_list()
      ? *value_.sint_list_
      : reinterpret_cast< ::flwr::proto::SintList&>(::flwr::proto::_SintList_default_instance_);
}
inline const ::flwr::proto::SintList& MetricRecordValue::sint_list() const {
  // @@protoc_insertion_point(field_get:flwr.proto.MetricRecordValue.sint_list)
  return _internal_sint_list();
}
inline ::flwr::proto::SintList* MetricRecordValue::unsafe_arena_release_sint_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flwr.proto.MetricRecordValue.sint_list)
  if (_internal_has_sint_list()) {
    clear_has_value();
    ::flwr::proto::SintList* temp = value_.sint_list_;
    value_.sint_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MetricRecordValue::unsafe_arena_set_allocated_sint_list(::flwr::proto::SintList* sint_list) {
  clear_value();
  if (sint_list) {
    set_has_sint_list();
    value_.sint_list_ = sint_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.MetricRecordValue.sint_list)
}
inline ::flwr::proto::SintList* MetricRecordValue::_internal_mutable_sint_list() {
  if (!_internal_has_sint_list()) {
    clear_value();
    set_has_sint_list();
    value_.sint_list_ = CreateMaybeMessage< ::flwr::proto::SintList >(GetArenaForAllocation());
  }
  return value_.sint_list_;
}
inline ::flwr::proto::SintList* MetricRecordValue::mutable_sint_list() {
  ::flwr::proto::SintList* _msg = _internal_mutable_sint_list();
  // @@protoc_insertion_point(field_mutable:flwr.proto.MetricRecordValue.sint_list)
  return _msg;
}

// .flwr.proto.UintList uint_list = 23;
inline bool MetricRecordValue::_internal_has_uint_list() const {
  return value_case() == kUintList;
}
inline bool MetricRecordValue::has_uint_list() const {
  return _internal_has_uint_list();
}
inline void MetricRecordValue::set_has_uint_list() {
  _oneof_case_[0] = kUintList;
}
inline void MetricRecordValue::clear_uint_list() {
  if (_internal_has_uint_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.uint_list_;
    }
    clear_has_value();
  }
}
inline ::flwr::proto::UintList* MetricRecordValue::release_uint_list() {
  // @@protoc_insertion_point(field_release:flwr.proto.MetricRecordValue.uint_list)
  if (_internal_has_uint_list()) {
    clear_has_value();
      ::flwr::proto::UintList* temp = value_.uint_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uint_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flwr::proto::UintList& MetricRecordValue::_internal_uint_list() const {
  return _internal_has_uint_list()
      ? *value_.uint_list_
      : reinterpret_cast< ::flwr::proto::UintList&>(::flwr::proto::_UintList_default_instance_);
}
inline const ::flwr::proto::UintList& MetricRecordValue::uint_list() const {
  // @@protoc_insertion_point(field_get:flwr.proto.MetricRecordValue.uint_list)
  return _internal_uint_list();
}
inline ::flwr::proto::UintList* MetricRecordValue::unsafe_arena_release_uint_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flwr.proto.MetricRecordValue.uint_list)
  if (_internal_has_uint_list()) {
    clear_has_value();
    ::flwr::proto::UintList* temp = value_.uint_list_;
    value_.uint_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MetricRecordValue::unsafe_arena_set_allocated_uint_list(::flwr::proto::UintList* uint_list) {
  clear_value();
  if (uint_list) {
    set_has_uint_list();
    value_.uint_list_ = uint_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.MetricRecordValue.uint_list)
}
inline ::flwr::proto::UintList* MetricRecordValue::_internal_mutable_uint_list() {
  if (!_internal_has_uint_list()) {
    clear_value();
    set_has_uint_list();
    value_.uint_list_ = CreateMaybeMessage< ::flwr::proto::UintList >(GetArenaForAllocation());
  }
  return value_.uint_list_;
}
inline ::flwr::proto::UintList* MetricRecordValue::mutable_uint_list() {
  ::flwr::proto::UintList* _msg = _internal_mutable_uint_list();
  // @@protoc_insertion_point(field_mutable:flwr.proto.MetricRecordValue.uint_list)
  return _msg;
}

inline bool MetricRecordValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void MetricRecordValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline MetricRecordValue::ValueCase MetricRecordValue::value_case() const {
  return MetricRecordValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConfigRecordValue

// double double = 1;
inline bool ConfigRecordValue::_internal_has_double_() const {
  return value_case() == kDouble;
}
inline bool ConfigRecordValue::has_double_() const {
  return _internal_has_double_();
}
inline void ConfigRecordValue::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void ConfigRecordValue::clear_double_() {
  if (_internal_has_double_()) {
    value_.double__ = 0;
    clear_has_value();
  }
}
inline double ConfigRecordValue::_internal_double_() const {
  if (_internal_has_double_()) {
    return value_.double__;
  }
  return 0;
}
inline void ConfigRecordValue::_internal_set_double_(double value) {
  if (!_internal_has_double_()) {
    clear_value();
    set_has_double_();
  }
  value_.double__ = value;
}
inline double ConfigRecordValue::double_() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.double)
  return _internal_double_();
}
inline void ConfigRecordValue::set_double_(double value) {
  _internal_set_double_(value);
  // @@protoc_insertion_point(field_set:flwr.proto.ConfigRecordValue.double)
}

// sint64 sint64 = 2;
inline bool ConfigRecordValue::_internal_has_sint64() const {
  return value_case() == kSint64;
}
inline bool ConfigRecordValue::has_sint64() const {
  return _internal_has_sint64();
}
inline void ConfigRecordValue::set_has_sint64() {
  _oneof_case_[0] = kSint64;
}
inline void ConfigRecordValue::clear_sint64() {
  if (_internal_has_sint64()) {
    value_.sint64_ = int64_t{0};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRecordValue::_internal_sint64() const {
  if (_internal_has_sint64()) {
    return value_.sint64_;
  }
  return int64_t{0};
}
inline void ConfigRecordValue::_internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sint64()) {
    clear_value();
    set_has_sint64();
  }
  value_.sint64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigRecordValue::sint64() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.sint64)
  return _internal_sint64();
}
inline void ConfigRecordValue::set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64(value);
  // @@protoc_insertion_point(field_set:flwr.proto.ConfigRecordValue.sint64)
}

// uint64 uint64 = 3;
inline bool ConfigRecordValue::_internal_has_uint64() const {
  return value_case() == kUint64;
}
inline bool ConfigRecordValue::has_uint64() const {
  return _internal_has_uint64();
}
inline void ConfigRecordValue::set_has_uint64() {
  _oneof_case_[0] = kUint64;
}
inline void ConfigRecordValue::clear_uint64() {
  if (_internal_has_uint64()) {
    value_.uint64_ = uint64_t{0u};
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfigRecordValue::_internal_uint64() const {
  if (_internal_has_uint64()) {
    return value_.uint64_;
  }
  return uint64_t{0u};
}
inline void ConfigRecordValue::_internal_set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint64()) {
    clear_value();
    set_has_uint64();
  }
  value_.uint64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfigRecordValue::uint64() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.uint64)
  return _internal_uint64();
}
inline void ConfigRecordValue::set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64(value);
  // @@protoc_insertion_point(field_set:flwr.proto.ConfigRecordValue.uint64)
}

// bool bool = 4;
inline bool ConfigRecordValue::_internal_has_bool_() const {
  return value_case() == kBool;
}
inline bool ConfigRecordValue::has_bool_() const {
  return _internal_has_bool_();
}
inline void ConfigRecordValue::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void ConfigRecordValue::clear_bool_() {
  if (_internal_has_bool_()) {
    value_.bool__ = false;
    clear_has_value();
  }
}
inline bool ConfigRecordValue::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return value_.bool__;
  }
  return false;
}
inline void ConfigRecordValue::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_value();
    set_has_bool_();
  }
  value_.bool__ = value;
}
inline bool ConfigRecordValue::bool_() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.bool)
  return _internal_bool_();
}
inline void ConfigRecordValue::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:flwr.proto.ConfigRecordValue.bool)
}

// string string = 5;
inline bool ConfigRecordValue::_internal_has_string() const {
  return value_case() == kString;
}
inline bool ConfigRecordValue::has_string() const {
  return _internal_has_string();
}
inline void ConfigRecordValue::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void ConfigRecordValue::clear_string() {
  if (_internal_has_string()) {
    value_.string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& ConfigRecordValue::string() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.string)
  return _internal_string();
}
template <typename ArgT0, typename... ArgT>
inline void ConfigRecordValue::set_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.ConfigRecordValue.string)
}
inline std::string* ConfigRecordValue::mutable_string() {
  std::string* _s = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:flwr.proto.ConfigRecordValue.string)
  return _s;
}
inline const std::string& ConfigRecordValue::_internal_string() const {
  if (_internal_has_string()) {
    return value_.string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConfigRecordValue::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigRecordValue::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigRecordValue::release_string() {
  // @@protoc_insertion_point(field_release:flwr.proto.ConfigRecordValue.string)
  if (_internal_has_string()) {
    clear_has_value();
    return value_.string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ConfigRecordValue::set_allocated_string(std::string* string) {
  if (has_value()) {
    clear_value();
  }
  if (string != nullptr) {
    set_has_string();
    value_.string_.UnsafeSetDefault(string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.ConfigRecordValue.string)
}

// bytes bytes = 6;
inline bool ConfigRecordValue::_internal_has_bytes() const {
  return value_case() == kBytes;
}
inline bool ConfigRecordValue::has_bytes() const {
  return _internal_has_bytes();
}
inline void ConfigRecordValue::set_has_bytes() {
  _oneof_case_[0] = kBytes;
}
inline void ConfigRecordValue::clear_bytes() {
  if (_internal_has_bytes()) {
    value_.bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& ConfigRecordValue::bytes() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.bytes)
  return _internal_bytes();
}
template <typename ArgT0, typename... ArgT>
inline void ConfigRecordValue::set_bytes(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes()) {
    clear_value();
    set_has_bytes();
    value_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.ConfigRecordValue.bytes)
}
inline std::string* ConfigRecordValue::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:flwr.proto.ConfigRecordValue.bytes)
  return _s;
}
inline const std::string& ConfigRecordValue::_internal_bytes() const {
  if (_internal_has_bytes()) {
    return value_.bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConfigRecordValue::_internal_set_bytes(const std::string& value) {
  if (!_internal_has_bytes()) {
    clear_value();
    set_has_bytes();
    value_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigRecordValue::_internal_mutable_bytes() {
  if (!_internal_has_bytes()) {
    clear_value();
    set_has_bytes();
    value_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.bytes_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigRecordValue::release_bytes() {
  // @@protoc_insertion_point(field_release:flwr.proto.ConfigRecordValue.bytes)
  if (_internal_has_bytes()) {
    clear_has_value();
    return value_.bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ConfigRecordValue::set_allocated_bytes(std::string* bytes) {
  if (has_value()) {
    clear_value();
  }
  if (bytes != nullptr) {
    set_has_bytes();
    value_.bytes_.UnsafeSetDefault(bytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(bytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.ConfigRecordValue.bytes)
}

// .flwr.proto.DoubleList double_list = 21;
inline bool ConfigRecordValue::_internal_has_double_list() const {
  return value_case() == kDoubleList;
}
inline bool ConfigRecordValue::has_double_list() const {
  return _internal_has_double_list();
}
inline void ConfigRecordValue::set_has_double_list() {
  _oneof_case_[0] = kDoubleList;
}
inline void ConfigRecordValue::clear_double_list() {
  if (_internal_has_double_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.double_list_;
    }
    clear_has_value();
  }
}
inline ::flwr::proto::DoubleList* ConfigRecordValue::release_double_list() {
  // @@protoc_insertion_point(field_release:flwr.proto.ConfigRecordValue.double_list)
  if (_internal_has_double_list()) {
    clear_has_value();
      ::flwr::proto::DoubleList* temp = value_.double_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.double_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flwr::proto::DoubleList& ConfigRecordValue::_internal_double_list() const {
  return _internal_has_double_list()
      ? *value_.double_list_
      : reinterpret_cast< ::flwr::proto::DoubleList&>(::flwr::proto::_DoubleList_default_instance_);
}
inline const ::flwr::proto::DoubleList& ConfigRecordValue::double_list() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.double_list)
  return _internal_double_list();
}
inline ::flwr::proto::DoubleList* ConfigRecordValue::unsafe_arena_release_double_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flwr.proto.ConfigRecordValue.double_list)
  if (_internal_has_double_list()) {
    clear_has_value();
    ::flwr::proto::DoubleList* temp = value_.double_list_;
    value_.double_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigRecordValue::unsafe_arena_set_allocated_double_list(::flwr::proto::DoubleList* double_list) {
  clear_value();
  if (double_list) {
    set_has_double_list();
    value_.double_list_ = double_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.ConfigRecordValue.double_list)
}
inline ::flwr::proto::DoubleList* ConfigRecordValue::_internal_mutable_double_list() {
  if (!_internal_has_double_list()) {
    clear_value();
    set_has_double_list();
    value_.double_list_ = CreateMaybeMessage< ::flwr::proto::DoubleList >(GetArenaForAllocation());
  }
  return value_.double_list_;
}
inline ::flwr::proto::DoubleList* ConfigRecordValue::mutable_double_list() {
  ::flwr::proto::DoubleList* _msg = _internal_mutable_double_list();
  // @@protoc_insertion_point(field_mutable:flwr.proto.ConfigRecordValue.double_list)
  return _msg;
}

// .flwr.proto.SintList sint_list = 22;
inline bool ConfigRecordValue::_internal_has_sint_list() const {
  return value_case() == kSintList;
}
inline bool ConfigRecordValue::has_sint_list() const {
  return _internal_has_sint_list();
}
inline void ConfigRecordValue::set_has_sint_list() {
  _oneof_case_[0] = kSintList;
}
inline void ConfigRecordValue::clear_sint_list() {
  if (_internal_has_sint_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.sint_list_;
    }
    clear_has_value();
  }
}
inline ::flwr::proto::SintList* ConfigRecordValue::release_sint_list() {
  // @@protoc_insertion_point(field_release:flwr.proto.ConfigRecordValue.sint_list)
  if (_internal_has_sint_list()) {
    clear_has_value();
      ::flwr::proto::SintList* temp = value_.sint_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.sint_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flwr::proto::SintList& ConfigRecordValue::_internal_sint_list() const {
  return _internal_has_sint_list()
      ? *value_.sint_list_
      : reinterpret_cast< ::flwr::proto::SintList&>(::flwr::proto::_SintList_default_instance_);
}
inline const ::flwr::proto::SintList& ConfigRecordValue::sint_list() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.sint_list)
  return _internal_sint_list();
}
inline ::flwr::proto::SintList* ConfigRecordValue::unsafe_arena_release_sint_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flwr.proto.ConfigRecordValue.sint_list)
  if (_internal_has_sint_list()) {
    clear_has_value();
    ::flwr::proto::SintList* temp = value_.sint_list_;
    value_.sint_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigRecordValue::unsafe_arena_set_allocated_sint_list(::flwr::proto::SintList* sint_list) {
  clear_value();
  if (sint_list) {
    set_has_sint_list();
    value_.sint_list_ = sint_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.ConfigRecordValue.sint_list)
}
inline ::flwr::proto::SintList* ConfigRecordValue::_internal_mutable_sint_list() {
  if (!_internal_has_sint_list()) {
    clear_value();
    set_has_sint_list();
    value_.sint_list_ = CreateMaybeMessage< ::flwr::proto::SintList >(GetArenaForAllocation());
  }
  return value_.sint_list_;
}
inline ::flwr::proto::SintList* ConfigRecordValue::mutable_sint_list() {
  ::flwr::proto::SintList* _msg = _internal_mutable_sint_list();
  // @@protoc_insertion_point(field_mutable:flwr.proto.ConfigRecordValue.sint_list)
  return _msg;
}

// .flwr.proto.UintList uint_list = 23;
inline bool ConfigRecordValue::_internal_has_uint_list() const {
  return value_case() == kUintList;
}
inline bool ConfigRecordValue::has_uint_list() const {
  return _internal_has_uint_list();
}
inline void ConfigRecordValue::set_has_uint_list() {
  _oneof_case_[0] = kUintList;
}
inline void ConfigRecordValue::clear_uint_list() {
  if (_internal_has_uint_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.uint_list_;
    }
    clear_has_value();
  }
}
inline ::flwr::proto::UintList* ConfigRecordValue::release_uint_list() {
  // @@protoc_insertion_point(field_release:flwr.proto.ConfigRecordValue.uint_list)
  if (_internal_has_uint_list()) {
    clear_has_value();
      ::flwr::proto::UintList* temp = value_.uint_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.uint_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flwr::proto::UintList& ConfigRecordValue::_internal_uint_list() const {
  return _internal_has_uint_list()
      ? *value_.uint_list_
      : reinterpret_cast< ::flwr::proto::UintList&>(::flwr::proto::_UintList_default_instance_);
}
inline const ::flwr::proto::UintList& ConfigRecordValue::uint_list() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.uint_list)
  return _internal_uint_list();
}
inline ::flwr::proto::UintList* ConfigRecordValue::unsafe_arena_release_uint_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flwr.proto.ConfigRecordValue.uint_list)
  if (_internal_has_uint_list()) {
    clear_has_value();
    ::flwr::proto::UintList* temp = value_.uint_list_;
    value_.uint_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigRecordValue::unsafe_arena_set_allocated_uint_list(::flwr::proto::UintList* uint_list) {
  clear_value();
  if (uint_list) {
    set_has_uint_list();
    value_.uint_list_ = uint_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.ConfigRecordValue.uint_list)
}
inline ::flwr::proto::UintList* ConfigRecordValue::_internal_mutable_uint_list() {
  if (!_internal_has_uint_list()) {
    clear_value();
    set_has_uint_list();
    value_.uint_list_ = CreateMaybeMessage< ::flwr::proto::UintList >(GetArenaForAllocation());
  }
  return value_.uint_list_;
}
inline ::flwr::proto::UintList* ConfigRecordValue::mutable_uint_list() {
  ::flwr::proto::UintList* _msg = _internal_mutable_uint_list();
  // @@protoc_insertion_point(field_mutable:flwr.proto.ConfigRecordValue.uint_list)
  return _msg;
}

// .flwr.proto.BoolList bool_list = 24;
inline bool ConfigRecordValue::_internal_has_bool_list() const {
  return value_case() == kBoolList;
}
inline bool ConfigRecordValue::has_bool_list() const {
  return _internal_has_bool_list();
}
inline void ConfigRecordValue::set_has_bool_list() {
  _oneof_case_[0] = kBoolList;
}
inline void ConfigRecordValue::clear_bool_list() {
  if (_internal_has_bool_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.bool_list_;
    }
    clear_has_value();
  }
}
inline ::flwr::proto::BoolList* ConfigRecordValue::release_bool_list() {
  // @@protoc_insertion_point(field_release:flwr.proto.ConfigRecordValue.bool_list)
  if (_internal_has_bool_list()) {
    clear_has_value();
      ::flwr::proto::BoolList* temp = value_.bool_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.bool_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flwr::proto::BoolList& ConfigRecordValue::_internal_bool_list() const {
  return _internal_has_bool_list()
      ? *value_.bool_list_
      : reinterpret_cast< ::flwr::proto::BoolList&>(::flwr::proto::_BoolList_default_instance_);
}
inline const ::flwr::proto::BoolList& ConfigRecordValue::bool_list() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.bool_list)
  return _internal_bool_list();
}
inline ::flwr::proto::BoolList* ConfigRecordValue::unsafe_arena_release_bool_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flwr.proto.ConfigRecordValue.bool_list)
  if (_internal_has_bool_list()) {
    clear_has_value();
    ::flwr::proto::BoolList* temp = value_.bool_list_;
    value_.bool_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigRecordValue::unsafe_arena_set_allocated_bool_list(::flwr::proto::BoolList* bool_list) {
  clear_value();
  if (bool_list) {
    set_has_bool_list();
    value_.bool_list_ = bool_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.ConfigRecordValue.bool_list)
}
inline ::flwr::proto::BoolList* ConfigRecordValue::_internal_mutable_bool_list() {
  if (!_internal_has_bool_list()) {
    clear_value();
    set_has_bool_list();
    value_.bool_list_ = CreateMaybeMessage< ::flwr::proto::BoolList >(GetArenaForAllocation());
  }
  return value_.bool_list_;
}
inline ::flwr::proto::BoolList* ConfigRecordValue::mutable_bool_list() {
  ::flwr::proto::BoolList* _msg = _internal_mutable_bool_list();
  // @@protoc_insertion_point(field_mutable:flwr.proto.ConfigRecordValue.bool_list)
  return _msg;
}

// .flwr.proto.StringList string_list = 25;
inline bool ConfigRecordValue::_internal_has_string_list() const {
  return value_case() == kStringList;
}
inline bool ConfigRecordValue::has_string_list() const {
  return _internal_has_string_list();
}
inline void ConfigRecordValue::set_has_string_list() {
  _oneof_case_[0] = kStringList;
}
inline void ConfigRecordValue::clear_string_list() {
  if (_internal_has_string_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.string_list_;
    }
    clear_has_value();
  }
}
inline ::flwr::proto::StringList* ConfigRecordValue::release_string_list() {
  // @@protoc_insertion_point(field_release:flwr.proto.ConfigRecordValue.string_list)
  if (_internal_has_string_list()) {
    clear_has_value();
      ::flwr::proto::StringList* temp = value_.string_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.string_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flwr::proto::StringList& ConfigRecordValue::_internal_string_list() const {
  return _internal_has_string_list()
      ? *value_.string_list_
      : reinterpret_cast< ::flwr::proto::StringList&>(::flwr::proto::_StringList_default_instance_);
}
inline const ::flwr::proto::StringList& ConfigRecordValue::string_list() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.string_list)
  return _internal_string_list();
}
inline ::flwr::proto::StringList* ConfigRecordValue::unsafe_arena_release_string_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flwr.proto.ConfigRecordValue.string_list)
  if (_internal_has_string_list()) {
    clear_has_value();
    ::flwr::proto::StringList* temp = value_.string_list_;
    value_.string_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigRecordValue::unsafe_arena_set_allocated_string_list(::flwr::proto::StringList* string_list) {
  clear_value();
  if (string_list) {
    set_has_string_list();
    value_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.ConfigRecordValue.string_list)
}
inline ::flwr::proto::StringList* ConfigRecordValue::_internal_mutable_string_list() {
  if (!_internal_has_string_list()) {
    clear_value();
    set_has_string_list();
    value_.string_list_ = CreateMaybeMessage< ::flwr::proto::StringList >(GetArenaForAllocation());
  }
  return value_.string_list_;
}
inline ::flwr::proto::StringList* ConfigRecordValue::mutable_string_list() {
  ::flwr::proto::StringList* _msg = _internal_mutable_string_list();
  // @@protoc_insertion_point(field_mutable:flwr.proto.ConfigRecordValue.string_list)
  return _msg;
}

// .flwr.proto.BytesList bytes_list = 26;
inline bool ConfigRecordValue::_internal_has_bytes_list() const {
  return value_case() == kBytesList;
}
inline bool ConfigRecordValue::has_bytes_list() const {
  return _internal_has_bytes_list();
}
inline void ConfigRecordValue::set_has_bytes_list() {
  _oneof_case_[0] = kBytesList;
}
inline void ConfigRecordValue::clear_bytes_list() {
  if (_internal_has_bytes_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.bytes_list_;
    }
    clear_has_value();
  }
}
inline ::flwr::proto::BytesList* ConfigRecordValue::release_bytes_list() {
  // @@protoc_insertion_point(field_release:flwr.proto.ConfigRecordValue.bytes_list)
  if (_internal_has_bytes_list()) {
    clear_has_value();
      ::flwr::proto::BytesList* temp = value_.bytes_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.bytes_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flwr::proto::BytesList& ConfigRecordValue::_internal_bytes_list() const {
  return _internal_has_bytes_list()
      ? *value_.bytes_list_
      : reinterpret_cast< ::flwr::proto::BytesList&>(::flwr::proto::_BytesList_default_instance_);
}
inline const ::flwr::proto::BytesList& ConfigRecordValue::bytes_list() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ConfigRecordValue.bytes_list)
  return _internal_bytes_list();
}
inline ::flwr::proto::BytesList* ConfigRecordValue::unsafe_arena_release_bytes_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flwr.proto.ConfigRecordValue.bytes_list)
  if (_internal_has_bytes_list()) {
    clear_has_value();
    ::flwr::proto::BytesList* temp = value_.bytes_list_;
    value_.bytes_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigRecordValue::unsafe_arena_set_allocated_bytes_list(::flwr::proto::BytesList* bytes_list) {
  clear_value();
  if (bytes_list) {
    set_has_bytes_list();
    value_.bytes_list_ = bytes_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.ConfigRecordValue.bytes_list)
}
inline ::flwr::proto::BytesList* ConfigRecordValue::_internal_mutable_bytes_list() {
  if (!_internal_has_bytes_list()) {
    clear_value();
    set_has_bytes_list();
    value_.bytes_list_ = CreateMaybeMessage< ::flwr::proto::BytesList >(GetArenaForAllocation());
  }
  return value_.bytes_list_;
}
inline ::flwr::proto::BytesList* ConfigRecordValue::mutable_bytes_list() {
  ::flwr::proto::BytesList* _msg = _internal_mutable_bytes_list();
  // @@protoc_insertion_point(field_mutable:flwr.proto.ConfigRecordValue.bytes_list)
  return _msg;
}

inline bool ConfigRecordValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ConfigRecordValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ConfigRecordValue::ValueCase ConfigRecordValue::value_case() const {
  return ConfigRecordValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArrayRecord

// repeated string data_keys = 1;
inline int ArrayRecord::_internal_data_keys_size() const {
  return data_keys_.size();
}
inline int ArrayRecord::data_keys_size() const {
  return _internal_data_keys_size();
}
inline void ArrayRecord::clear_data_keys() {
  data_keys_.Clear();
}
inline std::string* ArrayRecord::add_data_keys() {
  std::string* _s = _internal_add_data_keys();
  // @@protoc_insertion_point(field_add_mutable:flwr.proto.ArrayRecord.data_keys)
  return _s;
}
inline const std::string& ArrayRecord::_internal_data_keys(int index) const {
  return data_keys_.Get(index);
}
inline const std::string& ArrayRecord::data_keys(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.ArrayRecord.data_keys)
  return _internal_data_keys(index);
}
inline std::string* ArrayRecord::mutable_data_keys(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.ArrayRecord.data_keys)
  return data_keys_.Mutable(index);
}
inline void ArrayRecord::set_data_keys(int index, const std::string& value) {
  data_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flwr.proto.ArrayRecord.data_keys)
}
inline void ArrayRecord::set_data_keys(int index, std::string&& value) {
  data_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flwr.proto.ArrayRecord.data_keys)
}
inline void ArrayRecord::set_data_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flwr.proto.ArrayRecord.data_keys)
}
inline void ArrayRecord::set_data_keys(int index, const char* value, size_t size) {
  data_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flwr.proto.ArrayRecord.data_keys)
}
inline std::string* ArrayRecord::_internal_add_data_keys() {
  return data_keys_.Add();
}
inline void ArrayRecord::add_data_keys(const std::string& value) {
  data_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flwr.proto.ArrayRecord.data_keys)
}
inline void ArrayRecord::add_data_keys(std::string&& value) {
  data_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flwr.proto.ArrayRecord.data_keys)
}
inline void ArrayRecord::add_data_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flwr.proto.ArrayRecord.data_keys)
}
inline void ArrayRecord::add_data_keys(const char* value, size_t size) {
  data_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flwr.proto.ArrayRecord.data_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ArrayRecord::data_keys() const {
  // @@protoc_insertion_point(field_list:flwr.proto.ArrayRecord.data_keys)
  return data_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ArrayRecord::mutable_data_keys() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.ArrayRecord.data_keys)
  return &data_keys_;
}

// repeated .flwr.proto.Array data_values = 2;
inline int ArrayRecord::_internal_data_values_size() const {
  return data_values_.size();
}
inline int ArrayRecord::data_values_size() const {
  return _internal_data_values_size();
}
inline void ArrayRecord::clear_data_values() {
  data_values_.Clear();
}
inline ::flwr::proto::Array* ArrayRecord::mutable_data_values(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.ArrayRecord.data_values)
  return data_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Array >*
ArrayRecord::mutable_data_values() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.ArrayRecord.data_values)
  return &data_values_;
}
inline const ::flwr::proto::Array& ArrayRecord::_internal_data_values(int index) const {
  return data_values_.Get(index);
}
inline const ::flwr::proto::Array& ArrayRecord::data_values(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.ArrayRecord.data_values)
  return _internal_data_values(index);
}
inline ::flwr::proto::Array* ArrayRecord::_internal_add_data_values() {
  return data_values_.Add();
}
inline ::flwr::proto::Array* ArrayRecord::add_data_values() {
  ::flwr::proto::Array* _add = _internal_add_data_values();
  // @@protoc_insertion_point(field_add:flwr.proto.ArrayRecord.data_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Array >&
ArrayRecord::data_values() const {
  // @@protoc_insertion_point(field_list:flwr.proto.ArrayRecord.data_values)
  return data_values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MetricRecord

// map<string, .flwr.proto.MetricRecordValue> data = 1;
inline int MetricRecord::_internal_data_size() const {
  return data_.size();
}
inline int MetricRecord::data_size() const {
  return _internal_data_size();
}
inline void MetricRecord::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >&
MetricRecord::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >&
MetricRecord::data() const {
  // @@protoc_insertion_point(field_map:flwr.proto.MetricRecord.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >*
MetricRecord::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecordValue >*
MetricRecord::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:flwr.proto.MetricRecord.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConfigRecord

// map<string, .flwr.proto.ConfigRecordValue> data = 1;
inline int ConfigRecord::_internal_data_size() const {
  return data_.size();
}
inline int ConfigRecord::data_size() const {
  return _internal_data_size();
}
inline void ConfigRecord::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >&
ConfigRecord::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >&
ConfigRecord::data() const {
  // @@protoc_insertion_point(field_map:flwr.proto.ConfigRecord.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >*
ConfigRecord::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecordValue >*
ConfigRecord::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:flwr.proto.ConfigRecord.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RecordDict

// map<string, .flwr.proto.ArrayRecord> arrays = 1;
inline int RecordDict::_internal_arrays_size() const {
  return arrays_.size();
}
inline int RecordDict::arrays_size() const {
  return _internal_arrays_size();
}
inline void RecordDict::clear_arrays() {
  arrays_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >&
RecordDict::_internal_arrays() const {
  return arrays_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >&
RecordDict::arrays() const {
  // @@protoc_insertion_point(field_map:flwr.proto.RecordDict.arrays)
  return _internal_arrays();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >*
RecordDict::_internal_mutable_arrays() {
  return arrays_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ArrayRecord >*
RecordDict::mutable_arrays() {
  // @@protoc_insertion_point(field_mutable_map:flwr.proto.RecordDict.arrays)
  return _internal_mutable_arrays();
}

// map<string, .flwr.proto.MetricRecord> metrics = 2;
inline int RecordDict::_internal_metrics_size() const {
  return metrics_.size();
}
inline int RecordDict::metrics_size() const {
  return _internal_metrics_size();
}
inline void RecordDict::clear_metrics() {
  metrics_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >&
RecordDict::_internal_metrics() const {
  return metrics_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >&
RecordDict::metrics() const {
  // @@protoc_insertion_point(field_map:flwr.proto.RecordDict.metrics)
  return _internal_metrics();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >*
RecordDict::_internal_mutable_metrics() {
  return metrics_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::MetricRecord >*
RecordDict::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_map:flwr.proto.RecordDict.metrics)
  return _internal_mutable_metrics();
}

// map<string, .flwr.proto.ConfigRecord> configs = 3;
inline int RecordDict::_internal_configs_size() const {
  return configs_.size();
}
inline int RecordDict::configs_size() const {
  return _internal_configs_size();
}
inline void RecordDict::clear_configs() {
  configs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >&
RecordDict::_internal_configs() const {
  return configs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >&
RecordDict::configs() const {
  // @@protoc_insertion_point(field_map:flwr.proto.RecordDict.configs)
  return _internal_configs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >*
RecordDict::_internal_mutable_configs() {
  return configs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::ConfigRecord >*
RecordDict::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_map:flwr.proto.RecordDict.configs)
  return _internal_mutable_configs();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flwr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2frecorddict_2eproto
