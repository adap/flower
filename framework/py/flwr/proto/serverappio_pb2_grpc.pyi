"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import flwr.proto.appio_pb2
import flwr.proto.fab_pb2
import flwr.proto.heartbeat_pb2
import flwr.proto.log_pb2
import flwr.proto.message_pb2
import flwr.proto.run_pb2
import flwr.proto.serverappio_pb2
import grpc

class ServerAppIoStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    GetNodes: grpc.UnaryUnaryMultiCallable[
        flwr.proto.serverappio_pb2.GetNodesRequest,
        flwr.proto.serverappio_pb2.GetNodesResponse]
    """Return a set of nodes"""

    PushMessages: grpc.UnaryUnaryMultiCallable[
        flwr.proto.appio_pb2.PushAppMessagesRequest,
        flwr.proto.appio_pb2.PushAppMessagesResponse]
    """Create one or more messages"""

    PullMessages: grpc.UnaryUnaryMultiCallable[
        flwr.proto.appio_pb2.PullAppMessagesRequest,
        flwr.proto.appio_pb2.PullAppMessagesResponse]
    """Get message results"""

    GetRun: grpc.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.GetRunRequest,
        flwr.proto.run_pb2.GetRunResponse]
    """Get run details"""

    GetFab: grpc.UnaryUnaryMultiCallable[
        flwr.proto.fab_pb2.GetFabRequest,
        flwr.proto.fab_pb2.GetFabResponse]
    """Get FAB"""

    PullAppInputs: grpc.UnaryUnaryMultiCallable[
        flwr.proto.appio_pb2.PullAppInputsRequest,
        flwr.proto.appio_pb2.PullAppInputsResponse]
    """Pull ServerApp inputs"""

    PushAppOutputs: grpc.UnaryUnaryMultiCallable[
        flwr.proto.appio_pb2.PushAppOutputsRequest,
        flwr.proto.appio_pb2.PushAppOutputsResponse]
    """Push ServerApp outputs"""

    UpdateRunStatus: grpc.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.UpdateRunStatusRequest,
        flwr.proto.run_pb2.UpdateRunStatusResponse]
    """Update the status of a given run"""

    GetRunStatus: grpc.UnaryUnaryMultiCallable[
        flwr.proto.run_pb2.GetRunStatusRequest,
        flwr.proto.run_pb2.GetRunStatusResponse]
    """Get the status of a given run"""

    PushLogs: grpc.UnaryUnaryMultiCallable[
        flwr.proto.log_pb2.PushLogsRequest,
        flwr.proto.log_pb2.PushLogsResponse]
    """Push ServerApp logs"""

    SendAppHeartbeat: grpc.UnaryUnaryMultiCallable[
        flwr.proto.heartbeat_pb2.SendAppHeartbeatRequest,
        flwr.proto.heartbeat_pb2.SendAppHeartbeatResponse]
    """Heartbeat"""

    PushObject: grpc.UnaryUnaryMultiCallable[
        flwr.proto.message_pb2.PushObjectRequest,
        flwr.proto.message_pb2.PushObjectResponse]
    """Push Object"""

    PullObject: grpc.UnaryUnaryMultiCallable[
        flwr.proto.message_pb2.PullObjectRequest,
        flwr.proto.message_pb2.PullObjectResponse]
    """Pull Object"""

    ConfirmMessageReceived: grpc.UnaryUnaryMultiCallable[
        flwr.proto.message_pb2.ConfirmMessageReceivedRequest,
        flwr.proto.message_pb2.ConfirmMessageReceivedResponse]
    """Confirm Message Received"""


class ServerAppIoServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetNodes(self,
        request: flwr.proto.serverappio_pb2.GetNodesRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.serverappio_pb2.GetNodesResponse:
        """Return a set of nodes"""
        pass

    @abc.abstractmethod
    def PushMessages(self,
        request: flwr.proto.appio_pb2.PushAppMessagesRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.appio_pb2.PushAppMessagesResponse:
        """Create one or more messages"""
        pass

    @abc.abstractmethod
    def PullMessages(self,
        request: flwr.proto.appio_pb2.PullAppMessagesRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.appio_pb2.PullAppMessagesResponse:
        """Get message results"""
        pass

    @abc.abstractmethod
    def GetRun(self,
        request: flwr.proto.run_pb2.GetRunRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.run_pb2.GetRunResponse:
        """Get run details"""
        pass

    @abc.abstractmethod
    def GetFab(self,
        request: flwr.proto.fab_pb2.GetFabRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.fab_pb2.GetFabResponse:
        """Get FAB"""
        pass

    @abc.abstractmethod
    def PullAppInputs(self,
        request: flwr.proto.appio_pb2.PullAppInputsRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.appio_pb2.PullAppInputsResponse:
        """Pull ServerApp inputs"""
        pass

    @abc.abstractmethod
    def PushAppOutputs(self,
        request: flwr.proto.appio_pb2.PushAppOutputsRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.appio_pb2.PushAppOutputsResponse:
        """Push ServerApp outputs"""
        pass

    @abc.abstractmethod
    def UpdateRunStatus(self,
        request: flwr.proto.run_pb2.UpdateRunStatusRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.run_pb2.UpdateRunStatusResponse:
        """Update the status of a given run"""
        pass

    @abc.abstractmethod
    def GetRunStatus(self,
        request: flwr.proto.run_pb2.GetRunStatusRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.run_pb2.GetRunStatusResponse:
        """Get the status of a given run"""
        pass

    @abc.abstractmethod
    def PushLogs(self,
        request: flwr.proto.log_pb2.PushLogsRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.log_pb2.PushLogsResponse:
        """Push ServerApp logs"""
        pass

    @abc.abstractmethod
    def SendAppHeartbeat(self,
        request: flwr.proto.heartbeat_pb2.SendAppHeartbeatRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.heartbeat_pb2.SendAppHeartbeatResponse:
        """Heartbeat"""
        pass

    @abc.abstractmethod
    def PushObject(self,
        request: flwr.proto.message_pb2.PushObjectRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.message_pb2.PushObjectResponse:
        """Push Object"""
        pass

    @abc.abstractmethod
    def PullObject(self,
        request: flwr.proto.message_pb2.PullObjectRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.message_pb2.PullObjectResponse:
        """Pull Object"""
        pass

    @abc.abstractmethod
    def ConfirmMessageReceived(self,
        request: flwr.proto.message_pb2.ConfirmMessageReceivedRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.message_pb2.ConfirmMessageReceivedResponse:
        """Confirm Message Received"""
        pass


def add_ServerAppIoServicer_to_server(servicer: ServerAppIoServicer, server: grpc.Server) -> None: ...
