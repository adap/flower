name: Notify on External Issue Closure

on:
  issues:
    types: [closed]

jobs:
  notify-assignee-or-william:
    runs-on: ubuntu-22.04
    permissions:
      issues: read
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
    steps:
      - name: Notify Slack if external user closed the issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fetch = require("node-fetch");
            const issue = context.payload.issue;
            const closer = context.actor;
            const org = context.repo.owner;

            // Skip if the closer is a bot
            if (closer.endsWith("[bot]")) return;

            const { status: closerStatus } = await github.rest.orgs.checkMembershipForUser({
              org,
              username: closer
            }).catch(() => ({ status: 404 }));

            if (closerStatus !== 204) {
              // Closer is external
              const assignees = issue.assignees || [];
              let notifyUser = "@WilliamLindskog";  // fallback
              let matched = false;

              for (const assignee of assignees) {
                const login = assignee.login;
                const { status: assigneeStatus } = await github.rest.orgs.checkMembershipForUser({
                  org,
                  username: login
                }).catch(() => ({ status: 404 }));

                if (assigneeStatus === 204) {
                  notifyUser = `@${login}`;
                  matched = true;
                  break;
                }
              }

              const slackText = `*External issue closure detected*\n${notifyUser}, <${issue.html_url}|#${issue.number} - ${issue.title}> was closed by @${closer} (external).\nPlease review whether it should remain closed.`;

              await fetch("https://slack.com/api/chat.postMessage", {
                method: "POST",
                headers: {
                  Authorization: `Bearer ${process.env.SLACK_BOT_TOKEN}`,
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({
                  channel: process.env.SLACK_CHANNEL_ID,
                  text: slackText
                })
              });
            }
